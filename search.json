[{"path":"https://biometryhub.github.io/speed/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 University Adelaide Biometry Hub Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://biometryhub.github.io/speed/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam Rogers. Author, maintainer. Julian Taylor. Author. Russell Edson. Author. Wasin Pipattungsakul. Author. University Adelaide. Copyright holder, funder.           https://adelaide.edu.au/ Grains Research Development Corporation. Copyright holder, funder.           https://grdc.com.au/","code":""},{"path":"https://biometryhub.github.io/speed/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rogers S, Taylor J, Edson R, Pipattungsakul W (2025). speed: Generate Spatially Optimal Experimental Designs. R package version 0.0.1, https://biometryhub.github.io/speed/.","code":"@Manual{,   title = {speed: Generate Spatially Optimal Experimental Designs},   author = {Sam Rogers and Julian Taylor and Russell Edson and Wasin Pipattungsakul},   year = {2025},   note = {R package version 0.0.1},   url = {https://biometryhub.github.io/speed/}, }"},{"path":"https://biometryhub.github.io/speed/index.html","id":"speed","dir":"","previous_headings":"","what":"Generate Spatially Optimal Experimental Designs","title":"Generate Spatially Optimal Experimental Designs","text":"goal speed …","code":""},{"path":"https://biometryhub.github.io/speed/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Spatially Optimal Experimental Designs","text":"can install development version speed GitHub :","code":"# install.packages(\"pak\") pak::pak(\"biometryhub/speed-sam\")"},{"path":"https://biometryhub.github.io/speed/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generate Spatially Optimal Experimental Designs","text":"basic example shows solve common problem: special using README.Rmd instead just README.md? can include R chunks like : ’ll still need render README.Rmd regularly, keep README.md --date. devtools::build_readme() handy . can also embed plots, example:  case, don’t forget commit push resulting figure files, display GitHub CRAN.","code":"library(speed) ## basic example code summary(cars) #>      speed           dist        #>  Min.   : 4.0   Min.   :  2.00   #>  1st Qu.:12.0   1st Qu.: 26.00   #>  Median :15.0   Median : 36.00   #>  Mean   :15.4   Mean   : 42.98   #>  3rd Qu.:19.0   3rd Qu.: 56.00   #>  Max.   :25.0   Max.   :120.00"},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Adjacency Score for Experimental Design — calculate_adjacency_score","title":"Calculate Adjacency Score for Experimental Design — calculate_adjacency_score","text":"Calculates number adjacent treatments experimental design layout. Lower scores indicate better separation treatments.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Adjacency Score for Experimental Design — calculate_adjacency_score","text":"","code":"calculate_adjacency_score(design)"},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Adjacency Score for Experimental Design — calculate_adjacency_score","text":"design matrix containing experimental design layout treatments","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Adjacency Score for Experimental Design — calculate_adjacency_score","text":"Numeric value representing total number adjacent treatments. score sum treatments adjacent horizontally vertically.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Adjacency Score for Experimental Design — calculate_adjacency_score","text":"","code":"design <- matrix(c(\"A\", \"B\", \"A\",                    \"B\", \"A\", \"B\",                    \"A\", \"B\", \"A\"),                   nrow = 3, byrow = TRUE) calculate_adjacency_score(design)  # Returns the number of adjacent matches #> [1] 0"},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Balance Score for Experimental Design — calculate_balance_score","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"Calculates balance score measures evenly treatments distributed across spatial factors experimental design. Lower scores indicate better balance.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"","code":"calculate_balance_score(layout_df, permute_var, spatial_fac)"},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"layout_df data frame containing experimental design layout permute_var Character string specifying name treatment variable spatial_fac Character vector spatial factors consider (e.g., c(\"Row\", \"Col\"))","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"Numeric value representing total balance score. Lower values indicate better balance treatments across spatial factors.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"","code":"layout_df <- data.frame(   Row = rep(1:3, each = 3),   Col = rep(1:3, times = 3),   Treatment = rep(LETTERS[1:3], 3) ) calculate_balance_score(layout_df, \"Treatment\", c(\"Row\", \"Col\")) #> [1] 9"},{"path":"https://biometryhub.github.io/speed/reference/plot_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Experimental Design — plot_design","title":"Plot Experimental Design — plot_design","text":"Creates visual representation experimental design layout, options highlight blocks customize appearance.","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Experimental Design — plot_design","text":"","code":"plot_design(   design_result,   treatment_var = NULL,   block_var = NULL,   title = \"Experimental Design\",   row_var = \"row\",   col_var = \"col\" )"},{"path":"https://biometryhub.github.io/speed/reference/plot_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Experimental Design — plot_design","text":"design_result Either result speed() function design matrix treatment_var name treatment variable (required design_result dataframe) block_var Optional name blocking variable highlight boundaries title Plot title (default: \"Experimental Design\") row_var Name row coordinate variable (default: \"row\") col_var Name column coordinate variable (default: \"col\")","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Experimental Design — plot_design","text":"ggplot object displaying experimental design","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Experimental Design — plot_design","text":"","code":"# Create a simple design df <- data.frame(   row = rep(1:4, each = 3),   col = rep(1:3, times = 4),   Treatment = rep(LETTERS[1:4], 3) )  # Optimize the design result <- speed(df, permute = ~Treatment) #> Iteration: 1000 Score: 2.333333 Best: 2.333333 Since Improvement: 385  #> Iteration: 2000 Score: 2.333333 Best: 2.333333 Since Improvement: 1385  #> Early stopping at iteration 2615   # Plot the optimized design plot_design(result)   # Plot with custom treatment variable name plot_design(result$design_df, treatment_var = \"Treatment\")"},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Optimization Progress — plot_progress","title":"Plot Optimization Progress — plot_progress","text":"Creates two plots showing progression optimization: Objective score iterations Temperature decay iterations","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Optimization Progress — plot_progress","text":"","code":"plot_progress(result)"},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Optimization Progress — plot_progress","text":"result list containing optimization results following elements: scores - Numeric vector objective scores iteration temperatures - Numeric vector temperatures iteration","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Optimization Progress — plot_progress","text":"return value; prints two ggplot objects showing: Progress objective score Cooling schedule (temperature decay)","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Optimization Progress — plot_progress","text":"","code":"# Create a simple design df <- data.frame(   row = rep(1:3, each = 3),   col = rep(1:3, times = 3),   Treatment = rep(LETTERS[1:3], 3) )  # Optimize the design result <- speed(df, permute = ~Treatment) #> Iteration: 1000 Score: 0 Best: 0 Since Improvement: 750  #> Iteration: 2000 Score: 0 Best: 0 Since Improvement: 1750  #> Early stopping at iteration 2250   # Plot optimization progress plot_progress(result)"},{"path":"https://biometryhub.github.io/speed/reference/speed-package.html","id":null,"dir":"Reference","previous_headings":"","what":"speed: Generate Spatially Optimal Experimental Designs — speed-package","title":"speed: Generate Spatially Optimal Experimental Designs — speed-package","text":"Speed package optimizes spatial experimental designs rearranging treatments improve statistical efficiency maintaining statistical validity. employs customisable optimisation metrics, default approach balances minimising treatment adjacency maintaining spatial balance. Users can supply optimisation metrics tailor designs specific experimental requirements. package also includes visualisation tools allow researchers inspect optimised designs.","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/speed-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"speed: Generate Spatially Optimal Experimental Designs — speed-package","text":"Maintainer: Sam Rogers sam.rogers@adelaide.edu.au Authors: Julian Taylor julian.taylor@adelaide.edu.au Russell Edson russell.edson@adelaide.edu.au Wasin Pipattungsakul wasin.pipattungsakul@adelaide.edu.au contributors: University Adelaide (https://adelaide.edu.au/) [copyright holder, funder] Grains Research Development Corporation (https://grdc.com.au/) [copyright holder, funder]","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize Experimental Design Layout Using Simulated Annealing — speed","title":"Optimize Experimental Design Layout Using Simulated Annealing — speed","text":"Optimizes spatial layout experimental designs using simulated annealing minimize treatment adjacency maintain treatment balance across spatial factors.","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize Experimental Design Layout Using Simulated Annealing — speed","text":"","code":"speed(   data,   permute,   swap_within = ~1,   spatial_factors = ~row + col,   iterations = 10000,   early_stop_iterations = 2000,   quiet = FALSE,   seed = NULL,   swap_count = 1,   swap_all_blocks = FALSE,   adaptive_swaps = FALSE,   start_temp = 100,   cooling_rate = 0.99,   adj_weight = 1,   bal_weight = 1 )"},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize Experimental Design Layout Using Simulated Annealing — speed","text":"data data frame containing initial design layout row col coordinates permute one-sided formula specifying treatment variable permuted (e.g., ~treatment) swap_within one-sided formula specifying blocking factor within permute treatments (default: ~1) spatial_factors one-sided formula specifying spatial factors consider balance (default: ~row + col) iterations Maximum number iterations simulated annealing algorithm (default: 10000) early_stop_iterations Number iterations without improvement early stopping (default: 2000) quiet Logical; TRUE, suppresses progress messages (default: FALSE) seed numeric value random seed. provided, ensures reproducibility results (default: NULL). swap_count Number treatment swaps per iteration (default: 1) swap_all_blocks Logical; TRUE, performs swaps blocks iteration (default: FALSE) adaptive_swaps Logical; TRUE, adjusts swap parameters based temperature (default: FALSE) start_temp Starting temperature simulated annealing (default: 100) cooling_rate Rate temperature decreases (default: 0.99) adj_weight Weight given adjacency score objective function (default: 1) bal_weight Weight given balance score objective function (default: 1)","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize Experimental Design Layout Using Simulated Annealing — speed","text":"list containing: design - Matrix optimized treatment layout design_df - Data frame optimized design score - Final optimization score adjacency_score - Score treatment adjacencies balance_score - Score spatial balance scores - Vector scores across iterations temperatures - Vector temperatures across iterations iterations_run - Total number iterations performed stopped_early - Logical indicating optimization stopped early treatments - Vector unique treatments seed - Random seed used reproducibility design. set function, seed set second element .Random.seed.","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize Experimental Design Layout Using Simulated Annealing — speed","text":"","code":"# Create a simple design with 3 replicates of 4 treatments in a 4x3 layout df <- data.frame(   row = rep(1:4, each = 3),   col = rep(1:3, times = 4),   Treatment = rep(LETTERS[1:4], 3) )  # Optimize the design result <- speed(df, permute = ~Treatment) #> Iteration: 1000 Score: 2.333333 Best: 2.333333 Since Improvement: 894  #> Iteration: 2000 Score: 2.333333 Best: 2.333333 Since Improvement: 1894  #> Early stopping at iteration 2106"}]
