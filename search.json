[{"path":[]},{"path":"https://biometryhub.github.io/speed/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://biometryhub.github.io/speed/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://biometryhub.github.io/speed/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://biometryhub.github.io/speed/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://biometryhub.github.io/speed/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement sam.rogers@adelaide.edu.au. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://biometryhub.github.io/speed/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://biometryhub.github.io/speed/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://biometryhub.github.io/speed/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://biometryhub.github.io/speed/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://biometryhub.github.io/speed/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://biometryhub.github.io/speed/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://biometryhub.github.io/speed/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to speed","title":"Contributing to speed","text":"outlines propose change speed.","code":""},{"path":"https://biometryhub.github.io/speed/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to speed","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://biometryhub.github.io/speed/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to speed","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://biometryhub.github.io/speed/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to speed","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"biometryhub/speed\", fork = TRUE). Install developme nt dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://biometryhub.github.io/speed/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to speed","text":"New code follow tidyverse style guide. can use Air apply style, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://biometryhub.github.io/speed/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to speed","text":"Please note speed project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://biometryhub.github.io/speed/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 University Adelaide Biometry Hub Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Complex Agricultural Experimental Designs with speed","text":"vignette covers advanced complex experimental designs used specialised agricultural research contexts. designs particularly useful plant breeding programs, large-scale variety trials, situations standard complete block designs impractical due resource constraints nature treatments. Building foundational designs covered Common Agricultural Experimental Designs vignette, complex designs offer solutions challenging experimental scenarios maintaining statistical rigour spatial optimisation speed package.","code":"library(speed) library(patchwork) # For combining plots"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"split-split-plot-designs","dir":"Articles","previous_headings":"","what":"Split-Split Plot Designs","title":"Complex Agricultural Experimental Designs with speed","text":"Split-split plot designs extend hierarchical structure split-plot designs accommodate three factors different levels experimental difficulty practical constraints. creates three-level hierarchy experimental units. Largest experimental units Factor applied whole plots difficult factor randomise Example: Tillage systems, irrigation methods Intermediate-sized units within whole plots Factor B applied sub-plots Moderate randomisation difficulty Example: Fertilizer treatments, planting dates Smallest experimental units Factor C applied sub-sub-plots Easiest factor randomise Example: Varieties, pesticide treatments Complex error structure multiple error terms: Whole plot error Factor effects Sub-plot error Factor B ×B effects Sub-sub-plot error Factor C higher-order interactions Three factors different application constraints Hierarchical treatment structure matches practical needs Sequential application treatments time Resource equipment limitations factors Tillage × Fertilizer × Variety experiments Irrigation × Planting Date × Cultivar studies Cover Crop × Nitrogen × Hybrid trials Temperature × Pressure × Catalyst process studies Machine × Operator × Material quality experiments Consider complex agricultural trial examining Tillage System × Nitrogen Rate × Variety interactions three hierarchical levels. Figure 1: Initial layout split-split-plot design showing systematic treatment distribution. shows initial split-split plot design three-level hierarchical structure. Figure 2: Final layout split-split-plot design showing optimised treatment distribution. final output design. Note adjacent pairs treatments sub-sub-plots. quite difficult avoid situations, however adjusting optimisation parameters may help . information, see vignette changing optimisation parameters speed.","code":"split_split_df <- data.frame(   row = rep(1:16, each = 9),   col = rep(1:9, times = 16),   block = rep(1:4, each = 36),   # Fixed wholeplot assignment: 3 wholeplots per block, each 4×3   wholeplot = rep(rep(1:3, each = 3), times = 16) + rep(0:3 * 3, each = 36),   wholeplot_treatment = rep(rep(LETTERS[1:3], each = 3), times = 16),   subplot = rep(1:48, each = 3),   subplot_treatment = rep(rep(letters[1:4], each = 9), times = 4),   subsubplot_treatment = rep(c(\"x\", \"y\", \"z\"), 48) ) result_ss <- speed(split_split_df,                    swap = list(wp = \"wholeplot_treatment\",                                sp = \"subplot_treatment\",                                ssp = \"subsubplot_treatment\"),                    swap_within = list(wp = \"block\",                                       sp = \"wholeplot\",                                       ssp = \"subplot\"),                    iterations = list(wp = 2000,                                       sp = 5000,                                       ssp = 20000),                    early_stop_iterations = list(wp = 1000,                                                  sp = 3000,                                                  ssp = 5000),                    seed = 42) row and col are used as row and column, respectively. Optimising level: wp Level: wp Iteration: 1000 Score: 252 Best: 252 Since Improvement: 972 Early stopping at iteration 1028 for level wp Optimising level: sp Level: sp Iteration: 1000 Score: 132 Best: 132 Since Improvement: 594 Level: sp Iteration: 2000 Score: 132 Best: 132 Since Improvement: 1594 Level: sp Iteration: 3000 Score: 132 Best: 132 Since Improvement: 2594 Early stopping at iteration 3406 for level sp Optimising level: ssp Level: ssp Iteration: 1000 Score: 12 Best: 12 Since Improvement: 46 Level: ssp Iteration: 2000 Score: 10 Best: 10 Since Improvement: 617 Level: ssp Iteration: 3000 Score: 9 Best: 9 Since Improvement: 346 Level: ssp Iteration: 4000 Score: 9 Best: 9 Since Improvement: 1346 Level: ssp Iteration: 5000 Score: 9 Best: 9 Since Improvement: 2346 Level: ssp Iteration: 6000 Score: 9 Best: 9 Since Improvement: 3346 Level: ssp Iteration: 7000 Score: 9 Best: 9 Since Improvement: 4346 Early stopping at iteration 7654 for level ssp result_ss Optimised Experimental Design ---------------------------- Score: 393 Iterations Run: 12091 Stopped Early: TRUE TRUE TRUE Treatments:   wp: A, B, C   sp: a, b, c, d   ssp: x, y, z Seed: 42 res1 <- autoplot(result_ss, treatments = \"wholeplot_treatment\") + ggplot2::labs(title = \"Whole plot Treatments\") res2 <- autoplot(result_ss, treatments = \"subplot_treatment\") + ggplot2::labs(title = \"Sub-plot Treatments\") res3 <- autoplot(result_ss, treatments = \"subsubplot_treatment\") + ggplot2::labs(title = \"Sub-sub-plot Treatments\") res1 + res2 + res3 +   plot_layout(ncol = 2) +   plot_annotation(title = \"Optimised Split-Split Plot Design\")"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Complex Agricultural Experimental Designs with speed","text":"Split-split plot designs extend hierarchical structure split-plot designs accommodate three factors different levels experimental difficulty practical constraints. creates three-level hierarchy experimental units.","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"hierarchical-structure","dir":"Articles","previous_headings":"","what":"Hierarchical Structure","title":"Complex Agricultural Experimental Designs with speed","text":"Largest experimental units Factor applied whole plots difficult factor randomise Example: Tillage systems, irrigation methods Intermediate-sized units within whole plots Factor B applied sub-plots Moderate randomisation difficulty Example: Fertilizer treatments, planting dates Smallest experimental units Factor C applied sub-sub-plots Easiest factor randomise Example: Varieties, pesticide treatments","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"whole-plots-main-plots","dir":"Articles","previous_headings":"Split-Split Plot Designs","what":"Whole Plots (Main Plots)","title":"Complex Agricultural Experimental Designs with speed","text":"Largest experimental units Factor applied whole plots difficult factor randomise Example: Tillage systems, irrigation methods","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"sub-plots-split-plots","dir":"Articles","previous_headings":"Split-Split Plot Designs","what":"Sub-Plots (Split Plots)","title":"Complex Agricultural Experimental Designs with speed","text":"Intermediate-sized units within whole plots Factor B applied sub-plots Moderate randomisation difficulty Example: Fertilizer treatments, planting dates","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"sub-sub-plots-split-split-plots","dir":"Articles","previous_headings":"Split-Split Plot Designs","what":"Sub-Sub-Plots (Split-Split Plots)","title":"Complex Agricultural Experimental Designs with speed","text":"Smallest experimental units Factor C applied sub-sub-plots Easiest factor randomise Example: Varieties, pesticide treatments","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"error-structure","dir":"Articles","previous_headings":"","what":"Error Structure","title":"Complex Agricultural Experimental Designs with speed","text":"Complex error structure multiple error terms: Whole plot error Factor effects Sub-plot error Factor B ×B effects Sub-sub-plot error Factor C higher-order interactions","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"when-to-use-split-split-plot-designs","dir":"Articles","previous_headings":"","what":"When to Use Split-Split Plot Designs","title":"Complex Agricultural Experimental Designs with speed","text":"Three factors different application constraints Hierarchical treatment structure matches practical needs Sequential application treatments time Resource equipment limitations factors","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"examples-of-applications","dir":"Articles","previous_headings":"","what":"Examples of Applications","title":"Complex Agricultural Experimental Designs with speed","text":"Tillage × Fertilizer × Variety experiments Irrigation × Planting Date × Cultivar studies Cover Crop × Nitrogen × Hybrid trials Temperature × Pressure × Catalyst process studies Machine × Operator × Material quality experiments","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"agricultural-examples","dir":"Articles","previous_headings":"Split-Split Plot Designs","what":"Agricultural Examples","title":"Complex Agricultural Experimental Designs with speed","text":"Tillage × Fertilizer × Variety experiments Irrigation × Planting Date × Cultivar studies Cover Crop × Nitrogen × Hybrid trials","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"industrial-examples","dir":"Articles","previous_headings":"Split-Split Plot Designs","what":"Industrial Examples","title":"Complex Agricultural Experimental Designs with speed","text":"Temperature × Pressure × Catalyst process studies Machine × Operator × Material quality experiments","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"example-split-split-plot-design-for-agricultural-systems-research","dir":"Articles","previous_headings":"","what":"Example: Split-Split Plot Design for Agricultural Systems Research","title":"Complex Agricultural Experimental Designs with speed","text":"Consider complex agricultural trial examining Tillage System × Nitrogen Rate × Variety interactions three hierarchical levels.","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"setting-up-split-split-plot-designs-with-speed","dir":"Articles","previous_headings":"","what":"Setting Up Split-Split Plot Designs with speed","title":"Complex Agricultural Experimental Designs with speed","text":"Figure 1: Initial layout split-split-plot design showing systematic treatment distribution. shows initial split-split plot design three-level hierarchical structure. Figure 2: Final layout split-split-plot design showing optimised treatment distribution. final output design. Note adjacent pairs treatments sub-sub-plots. quite difficult avoid situations, however adjusting optimisation parameters may help . information, see vignette changing optimisation parameters speed.","code":"split_split_df <- data.frame(   row = rep(1:16, each = 9),   col = rep(1:9, times = 16),   block = rep(1:4, each = 36),   # Fixed wholeplot assignment: 3 wholeplots per block, each 4×3   wholeplot = rep(rep(1:3, each = 3), times = 16) + rep(0:3 * 3, each = 36),   wholeplot_treatment = rep(rep(LETTERS[1:3], each = 3), times = 16),   subplot = rep(1:48, each = 3),   subplot_treatment = rep(rep(letters[1:4], each = 9), times = 4),   subsubplot_treatment = rep(c(\"x\", \"y\", \"z\"), 48) ) result_ss <- speed(split_split_df,                    swap = list(wp = \"wholeplot_treatment\",                                sp = \"subplot_treatment\",                                ssp = \"subsubplot_treatment\"),                    swap_within = list(wp = \"block\",                                       sp = \"wholeplot\",                                       ssp = \"subplot\"),                    iterations = list(wp = 2000,                                       sp = 5000,                                       ssp = 20000),                    early_stop_iterations = list(wp = 1000,                                                  sp = 3000,                                                  ssp = 5000),                    seed = 42) row and col are used as row and column, respectively. Optimising level: wp Level: wp Iteration: 1000 Score: 252 Best: 252 Since Improvement: 972 Early stopping at iteration 1028 for level wp Optimising level: sp Level: sp Iteration: 1000 Score: 132 Best: 132 Since Improvement: 594 Level: sp Iteration: 2000 Score: 132 Best: 132 Since Improvement: 1594 Level: sp Iteration: 3000 Score: 132 Best: 132 Since Improvement: 2594 Early stopping at iteration 3406 for level sp Optimising level: ssp Level: ssp Iteration: 1000 Score: 12 Best: 12 Since Improvement: 46 Level: ssp Iteration: 2000 Score: 10 Best: 10 Since Improvement: 617 Level: ssp Iteration: 3000 Score: 9 Best: 9 Since Improvement: 346 Level: ssp Iteration: 4000 Score: 9 Best: 9 Since Improvement: 1346 Level: ssp Iteration: 5000 Score: 9 Best: 9 Since Improvement: 2346 Level: ssp Iteration: 6000 Score: 9 Best: 9 Since Improvement: 3346 Level: ssp Iteration: 7000 Score: 9 Best: 9 Since Improvement: 4346 Early stopping at iteration 7654 for level ssp result_ss Optimised Experimental Design ---------------------------- Score: 393 Iterations Run: 12091 Stopped Early: TRUE TRUE TRUE Treatments:   wp: A, B, C   sp: a, b, c, d   ssp: x, y, z Seed: 42 res1 <- autoplot(result_ss, treatments = \"wholeplot_treatment\") + ggplot2::labs(title = \"Whole plot Treatments\") res2 <- autoplot(result_ss, treatments = \"subplot_treatment\") + ggplot2::labs(title = \"Sub-plot Treatments\") res3 <- autoplot(result_ss, treatments = \"subsubplot_treatment\") + ggplot2::labs(title = \"Sub-sub-plot Treatments\") res1 + res2 + res3 +   plot_layout(ncol = 2) +   plot_annotation(title = \"Optimised Split-Split Plot Design\")"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"performing-the-optimisation","dir":"Articles","previous_headings":"Split-Split Plot Designs","what":"Performing the Optimisation","title":"Complex Agricultural Experimental Designs with speed","text":"","code":"result_ss <- speed(split_split_df,                    swap = list(wp = \"wholeplot_treatment\",                                sp = \"subplot_treatment\",                                ssp = \"subsubplot_treatment\"),                    swap_within = list(wp = \"block\",                                       sp = \"wholeplot\",                                       ssp = \"subplot\"),                    iterations = list(wp = 2000,                                       sp = 5000,                                       ssp = 20000),                    early_stop_iterations = list(wp = 1000,                                                  sp = 3000,                                                  ssp = 5000),                    seed = 42) row and col are used as row and column, respectively. Optimising level: wp Level: wp Iteration: 1000 Score: 252 Best: 252 Since Improvement: 972 Early stopping at iteration 1028 for level wp Optimising level: sp Level: sp Iteration: 1000 Score: 132 Best: 132 Since Improvement: 594 Level: sp Iteration: 2000 Score: 132 Best: 132 Since Improvement: 1594 Level: sp Iteration: 3000 Score: 132 Best: 132 Since Improvement: 2594 Early stopping at iteration 3406 for level sp Optimising level: ssp Level: ssp Iteration: 1000 Score: 12 Best: 12 Since Improvement: 46 Level: ssp Iteration: 2000 Score: 10 Best: 10 Since Improvement: 617 Level: ssp Iteration: 3000 Score: 9 Best: 9 Since Improvement: 346 Level: ssp Iteration: 4000 Score: 9 Best: 9 Since Improvement: 1346 Level: ssp Iteration: 5000 Score: 9 Best: 9 Since Improvement: 2346 Level: ssp Iteration: 6000 Score: 9 Best: 9 Since Improvement: 3346 Level: ssp Iteration: 7000 Score: 9 Best: 9 Since Improvement: 4346 Early stopping at iteration 7654 for level ssp"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"output-of-the-optimisation","dir":"Articles","previous_headings":"Split-Split Plot Designs","what":"Output of the Optimisation","title":"Complex Agricultural Experimental Designs with speed","text":"","code":"result_ss Optimised Experimental Design ---------------------------- Score: 393 Iterations Run: 12091 Stopped Early: TRUE TRUE TRUE Treatments:   wp: A, B, C   sp: a, b, c, d   ssp: x, y, z Seed: 42"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"visualise-the-output","dir":"Articles","previous_headings":"Split-Split Plot Designs","what":"Visualise the Output","title":"Complex Agricultural Experimental Designs with speed","text":"Figure 2: Final layout split-split-plot design showing optimised treatment distribution. final output design. Note adjacent pairs treatments sub-sub-plots. quite difficult avoid situations, however adjusting optimisation parameters may help . information, see vignette changing optimisation parameters speed.","code":"res1 <- autoplot(result_ss, treatments = \"wholeplot_treatment\") + ggplot2::labs(title = \"Whole plot Treatments\") res2 <- autoplot(result_ss, treatments = \"subplot_treatment\") + ggplot2::labs(title = \"Sub-plot Treatments\") res3 <- autoplot(result_ss, treatments = \"subsubplot_treatment\") + ggplot2::labs(title = \"Sub-sub-plot Treatments\") res1 + res2 + res3 +   plot_layout(ncol = 2) +   plot_annotation(title = \"Optimised Split-Split Plot Design\")"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"strip-plot-designs","dir":"Articles","previous_headings":"","what":"Strip-Plot Designs","title":"Complex Agricultural Experimental Designs with speed","text":"Strip-plot designs extensions split-plot designs used treatment factors difficult apply small areas. Treatments arranged strips cross , creating grid pattern intersections represent treatment combinations. Horizontal strips one factor (e.g., tillage methods) Vertical strips another factor (e.g., planting dates) Intersections represent factor combinations Whole plots larger traditional split-plot designs factors require large application areas Machinery constraints factors Irrigation × cultivation experiments Planting date × row spacing studies split-plot hierarchy doesn’t fit practical situation Accommodates two “difficult--randomise” factors flexible split-plot certain applications Maintains reasonable precision main effects Practical mechanised agriculture Lower precision interaction effects Complex analysis multiple error terms Less efficient RCBD comparisons Requires larger field areas Consider experiment testing 3 tillage methods 4 planting dates factors require large application areas. Figure 3: Initial layout strip plot design showing systematic treatment distribution. shows initial strip-plot layout horizontal vertical strips optimisation.   optimised strip-plot design well-arranged treatment combinations!","code":"df_strip <- data.frame(   row = rep(1:12, each = 6),  # 12 rows total (4 rows per block x 6 blocks)   col = rep(1:6, times = 12),  # 6 columns   block = rep(rep(1:2, each = 3), times = 4) + rep(0:2*2, each = 24),  # 6 blocks, 12 plots each      # Horizontal strips (3 levels, applied to rows within each block)   vertical_treatment = rep(rep(LETTERS[1:3], times = 2), times = 12),  # A, B, C      # Vertical strips (4 levels, applied to columns within each block)     horizontal_treatment = rep(rep(letters[1:4], each = 6), times = 3),  # a, b, c, d      # Plot identifier within each block   plot_in_block = rep(1:12, times = 6) ) strip_result <- speed(df_strip,                       swap = list(ht = \"horizontal_treatment\", vt = \"vertical_treatment\"),                       swap_within = list(ht = \"block\", vt = \"block\")) row and col are used as row and column, respectively. Optimising level: ht Level: ht Iteration: 1000 Score: 84 Best: 84 Since Improvement: 875 Level: ht Iteration: 2000 Score: 84 Best: 84 Since Improvement: 1875 Early stopping at iteration 2125 for level ht Optimising level: vt Level: vt Iteration: 1000 Score: 54 Best: 54 Since Improvement: 840 Level: vt Iteration: 2000 Score: 54 Best: 54 Since Improvement: 1840 Early stopping at iteration 2160 for level vt strip_result Optimised Experimental Design ---------------------------- Score: 138 Iterations Run: 4287 Stopped Early: TRUE TRUE Treatments:   ht: a, b, c, d   vt: A, B, C Seed: -745752008 autoplot(strip_result, treatments = \"horizontal_treatment\") + ggplot2::labs(title = \"Tillage Treatments\") autoplot(strip_result, treatments = \"vertical_treatment\") + ggplot2::labs(title = \"Planting Date Treatments\")"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"overview-1","dir":"Articles","previous_headings":"","what":"Overview","title":"Complex Agricultural Experimental Designs with speed","text":"Strip-plot designs extensions split-plot designs used treatment factors difficult apply small areas. Treatments arranged strips cross , creating grid pattern intersections represent treatment combinations.","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"structure","dir":"Articles","previous_headings":"","what":"Structure","title":"Complex Agricultural Experimental Designs with speed","text":"Horizontal strips one factor (e.g., tillage methods) Vertical strips another factor (e.g., planting dates) Intersections represent factor combinations Whole plots larger traditional split-plot designs","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"when-to-use-strip-plot-designs","dir":"Articles","previous_headings":"","what":"When to Use Strip-Plot Designs","title":"Complex Agricultural Experimental Designs with speed","text":"factors require large application areas Machinery constraints factors Irrigation × cultivation experiments Planting date × row spacing studies split-plot hierarchy doesn’t fit practical situation","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"advantages-and-limitations","dir":"Articles","previous_headings":"","what":"Advantages and Limitations","title":"Complex Agricultural Experimental Designs with speed","text":"Accommodates two “difficult--randomise” factors flexible split-plot certain applications Maintains reasonable precision main effects Practical mechanised agriculture Lower precision interaction effects Complex analysis multiple error terms Less efficient RCBD comparisons Requires larger field areas","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"advantages","dir":"Articles","previous_headings":"Strip-Plot Designs","what":"Advantages","title":"Complex Agricultural Experimental Designs with speed","text":"Accommodates two “difficult--randomise” factors flexible split-plot certain applications Maintains reasonable precision main effects Practical mechanised agriculture","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"limitations","dir":"Articles","previous_headings":"Strip-Plot Designs","what":"Limitations","title":"Complex Agricultural Experimental Designs with speed","text":"Lower precision interaction effects Complex analysis multiple error terms Less efficient RCBD comparisons Requires larger field areas","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"example-strip-plot-design-for-tillage-planting-date","dir":"Articles","previous_headings":"","what":"Example: Strip-Plot Design for Tillage × Planting Date","title":"Complex Agricultural Experimental Designs with speed","text":"Consider experiment testing 3 tillage methods 4 planting dates factors require large application areas.","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"setting-up-strip-plot-designs-with-speed","dir":"Articles","previous_headings":"","what":"Setting Up Strip-Plot Designs with speed","title":"Complex Agricultural Experimental Designs with speed","text":"Figure 3: Initial layout strip plot design showing systematic treatment distribution. shows initial strip-plot layout horizontal vertical strips optimisation.   optimised strip-plot design well-arranged treatment combinations!","code":"df_strip <- data.frame(   row = rep(1:12, each = 6),  # 12 rows total (4 rows per block x 6 blocks)   col = rep(1:6, times = 12),  # 6 columns   block = rep(rep(1:2, each = 3), times = 4) + rep(0:2*2, each = 24),  # 6 blocks, 12 plots each      # Horizontal strips (3 levels, applied to rows within each block)   vertical_treatment = rep(rep(LETTERS[1:3], times = 2), times = 12),  # A, B, C      # Vertical strips (4 levels, applied to columns within each block)     horizontal_treatment = rep(rep(letters[1:4], each = 6), times = 3),  # a, b, c, d      # Plot identifier within each block   plot_in_block = rep(1:12, times = 6) ) strip_result <- speed(df_strip,                       swap = list(ht = \"horizontal_treatment\", vt = \"vertical_treatment\"),                       swap_within = list(ht = \"block\", vt = \"block\")) row and col are used as row and column, respectively. Optimising level: ht Level: ht Iteration: 1000 Score: 84 Best: 84 Since Improvement: 875 Level: ht Iteration: 2000 Score: 84 Best: 84 Since Improvement: 1875 Early stopping at iteration 2125 for level ht Optimising level: vt Level: vt Iteration: 1000 Score: 54 Best: 54 Since Improvement: 840 Level: vt Iteration: 2000 Score: 54 Best: 54 Since Improvement: 1840 Early stopping at iteration 2160 for level vt strip_result Optimised Experimental Design ---------------------------- Score: 138 Iterations Run: 4287 Stopped Early: TRUE TRUE Treatments:   ht: a, b, c, d   vt: A, B, C Seed: -745752008 autoplot(strip_result, treatments = \"horizontal_treatment\") + ggplot2::labs(title = \"Tillage Treatments\") autoplot(strip_result, treatments = \"vertical_treatment\") + ggplot2::labs(title = \"Planting Date Treatments\")"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"performing-the-optimisation-1","dir":"Articles","previous_headings":"Strip-Plot Designs","what":"Performing the Optimisation","title":"Complex Agricultural Experimental Designs with speed","text":"","code":"strip_result <- speed(df_strip,                       swap = list(ht = \"horizontal_treatment\", vt = \"vertical_treatment\"),                       swap_within = list(ht = \"block\", vt = \"block\")) row and col are used as row and column, respectively. Optimising level: ht Level: ht Iteration: 1000 Score: 84 Best: 84 Since Improvement: 875 Level: ht Iteration: 2000 Score: 84 Best: 84 Since Improvement: 1875 Early stopping at iteration 2125 for level ht Optimising level: vt Level: vt Iteration: 1000 Score: 54 Best: 54 Since Improvement: 840 Level: vt Iteration: 2000 Score: 54 Best: 54 Since Improvement: 1840 Early stopping at iteration 2160 for level vt"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"output-of-the-optimisation-1","dir":"Articles","previous_headings":"Strip-Plot Designs","what":"Output of the Optimisation","title":"Complex Agricultural Experimental Designs with speed","text":"","code":"strip_result Optimised Experimental Design ---------------------------- Score: 138 Iterations Run: 4287 Stopped Early: TRUE TRUE Treatments:   ht: a, b, c, d   vt: A, B, C Seed: -745752008"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"visualise-the-output-1","dir":"Articles","previous_headings":"Strip-Plot Designs","what":"Visualise the Output","title":"Complex Agricultural Experimental Designs with speed","text":"optimised strip-plot design well-arranged treatment combinations!","code":"autoplot(strip_result, treatments = \"horizontal_treatment\") + ggplot2::labs(title = \"Tillage Treatments\") autoplot(strip_result, treatments = \"vertical_treatment\") + ggplot2::labs(title = \"Planting Date Treatments\")"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"incomplete-block-designs","dir":"Articles","previous_headings":"","what":"Incomplete Block Designs","title":"Complex Agricultural Experimental Designs with speed","text":"number treatments large, complete blocks may impractical due field size resource constraints. Incomplete block designs use smaller blocks treatments appear block, still maintaining good statistical properties. restrictive statistically optimal incomplete block design. treatment appears exactly rr blocks block contains exactly kk treatments pair treatments appears together exactly λλ blocks Perfect balance limited parameter combinations vv = number treatments bb = number blocks rr = number blocks containing treatment kk = number treatments per block λλ = number blocks containing pair treatments bk=vrbk = vr λ(v−1)=r(k−1)λ(v-1) = r(k-1) may become apparent characteristics parameters listed designs trivial, specific limited combinations work. case speed, custom objective function required ensure pair treatments appear number times. example discussion, see vignette custom objective functions. flexible incomplete block designs blocks can grouped complete replications. Blocks can organised complete replications replication contains every treatment exactly flexible parameter combinations BIBD Excellent multi-location trials Relaxes balance requirements BIBD maintaining good statistical properties. Large number treatments (typically >15-20) Limited block size due field homogeneity constraints Multi-location variety trials shipping costs limit replication Resource limitations preventing complete replication Preliminary screening large treatment sets Consider trial 15 treatments complete blocks large field homogeneity. ’ll use incomplete block design blocks size 5. Firstly need create data frame representing incomplete block design. use systematic approach generate blocks treatment combinations. Figure 4: Initial layout resolvable incomplete block design showing systematic treatment distribution. Figure 4 shows systematic resolvable incomplete block layout optimisation. Note replicates made two blocks, half treatments appear, replicates made pairs blocks. treatments can swapped blocks, need remain within replicate.  see block contains half treatments, combined, pairs full replicate. algorithm also spatially optimised treatments across rows columns, giving nicely optimised resolvable incomplete block design.","code":"# Create the data frame ribd_df <- data.frame(   row = rep(1:3, 6),                             # Row within each block   col = rep(1:6, each = 3),                      # Column corresponds to block   replicate = rep(1:3, each = 6),                # 3 replicates, 6 observations each   block = rep(1:6, each = 3),                    # 6 blocks total, 3 treatments per block   treatment = paste0(\"V\", rep(1:6, times = 3))   # Treatment assignments )  # View the design head(ribd_df) row col replicate block treatment 1   1   1         1     1        V1 2   2   1         1     1        V2 3   3   1         1     1        V3 4   1   2         1     2        V4 5   2   2         1     2        V5 6   3   2         1     2        V6 ribd_result <- speed(ribd_df,                       swap = \"treatment\",                       swap_within = \"replicate\",                       seed = 42) row and col are used as row and column, respectively. Iteration: 1000 Score: 1.8 Best: 1.8 Since Improvement: 527 Iteration: 2000 Score: 1.8 Best: 1.8 Since Improvement: 1527 Early stopping at iteration 2473 ribd_result Optimised Experimental Design ---------------------------- Score: 1.8 Iterations Run: 2474 Stopped Early: TRUE Treatments: V1, V2, V3, V4, V5, V6 Seed: 42 str(ribd_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    18 obs. of  5 variables:   ..$ row      : int [1:18] 1 1 1 1 1 1 2 2 2 2 ...   ..$ col      : int [1:18] 1 2 3 4 5 6 1 2 3 4 ...   ..$ replicate: int [1:18] 1 1 2 2 3 3 1 1 2 2 ...   ..$ block    : int [1:18] 1 2 3 4 5 6 1 2 3 4 ...   ..$ treatment: chr [1:18] \"V3\" \"V2\" \"V1\" \"V4\" ...  $ score         : num 1.8  $ scores        : num [1:2474] 9 7.4 5.8 6.8 5.4 4.6 4.2 4.2 4.2 4.2 ...  $ temperatures  : num [1:2474] 100 99 98 97 96.1 ...  $ iterations_run: int 2474  $ stopped_early : logi TRUE  $ treatments    : chr [1:6] \"V1\" \"V2\" \"V3\" \"V4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(ribd_result)"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"overview-2","dir":"Articles","previous_headings":"","what":"Overview","title":"Complex Agricultural Experimental Designs with speed","text":"number treatments large, complete blocks may impractical due field size resource constraints. Incomplete block designs use smaller blocks treatments appear block, still maintaining good statistical properties.","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"types-of-incomplete-block-designs","dir":"Articles","previous_headings":"","what":"Types of Incomplete Block Designs","title":"Complex Agricultural Experimental Designs with speed","text":"restrictive statistically optimal incomplete block design. treatment appears exactly rr blocks block contains exactly kk treatments pair treatments appears together exactly λλ blocks Perfect balance limited parameter combinations vv = number treatments bb = number blocks rr = number blocks containing treatment kk = number treatments per block λλ = number blocks containing pair treatments bk=vrbk = vr λ(v−1)=r(k−1)λ(v-1) = r(k-1) may become apparent characteristics parameters listed designs trivial, specific limited combinations work. case speed, custom objective function required ensure pair treatments appear number times. example discussion, see vignette custom objective functions. flexible incomplete block designs blocks can grouped complete replications. Blocks can organised complete replications replication contains every treatment exactly flexible parameter combinations BIBD Excellent multi-location trials Relaxes balance requirements BIBD maintaining good statistical properties.","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"balanced-incomplete-block-design-bibd","dir":"Articles","previous_headings":"Incomplete Block Designs","what":"Balanced Incomplete Block Design (BIBD)","title":"Complex Agricultural Experimental Designs with speed","text":"restrictive statistically optimal incomplete block design. treatment appears exactly rr blocks block contains exactly kk treatments pair treatments appears together exactly λλ blocks Perfect balance limited parameter combinations vv = number treatments bb = number blocks rr = number blocks containing treatment kk = number treatments per block λλ = number blocks containing pair treatments bk=vrbk = vr λ(v−1)=r(k−1)λ(v-1) = r(k-1) may become apparent characteristics parameters listed designs trivial, specific limited combinations work. case speed, custom objective function required ensure pair treatments appear number times. example discussion, see vignette custom objective functions.","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"characteristics","dir":"Articles","previous_headings":"Incomplete Block Designs","what":"Characteristics:","title":"Complex Agricultural Experimental Designs with speed","text":"treatment appears exactly rr blocks block contains exactly kk treatments pair treatments appears together exactly λλ blocks Perfect balance limited parameter combinations","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"parameters","dir":"Articles","previous_headings":"Incomplete Block Designs","what":"Parameters:","title":"Complex Agricultural Experimental Designs with speed","text":"vv = number treatments bb = number blocks rr = number blocks containing treatment kk = number treatments per block λλ = number blocks containing pair treatments bk=vrbk = vr λ(v−1)=r(k−1)λ(v-1) = r(k-1) may become apparent characteristics parameters listed designs trivial, specific limited combinations work. case speed, custom objective function required ensure pair treatments appear number times. example discussion, see vignette custom objective functions.","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"resolvable-incomplete-block-design-ribd","dir":"Articles","previous_headings":"Incomplete Block Designs","what":"Resolvable Incomplete Block Design (RIBD)","title":"Complex Agricultural Experimental Designs with speed","text":"flexible incomplete block designs blocks can grouped complete replications. Blocks can organised complete replications replication contains every treatment exactly flexible parameter combinations BIBD Excellent multi-location trials","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"characteristics-1","dir":"Articles","previous_headings":"Incomplete Block Designs","what":"Characteristics:","title":"Complex Agricultural Experimental Designs with speed","text":"Blocks can organised complete replications replication contains every treatment exactly flexible parameter combinations BIBD Excellent multi-location trials","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"partially-balanced-incomplete-block-design-pbibd","dir":"Articles","previous_headings":"Incomplete Block Designs","what":"Partially Balanced Incomplete Block Design (PBIBD)","title":"Complex Agricultural Experimental Designs with speed","text":"Relaxes balance requirements BIBD maintaining good statistical properties.","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"when-to-use-incomplete-block-designs","dir":"Articles","previous_headings":"","what":"When to Use Incomplete Block Designs","title":"Complex Agricultural Experimental Designs with speed","text":"Large number treatments (typically >15-20) Limited block size due field homogeneity constraints Multi-location variety trials shipping costs limit replication Resource limitations preventing complete replication Preliminary screening large treatment sets","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"example-resolvable-incomplete-block-design-for-6-varieties","dir":"Articles","previous_headings":"","what":"Example: Resolvable Incomplete Block Design for 6 Varieties","title":"Complex Agricultural Experimental Designs with speed","text":"Consider trial 15 treatments complete blocks large field homogeneity. ’ll use incomplete block design blocks size 5.","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"setting-up-a-resolvable-incomplete-block-design-with-speed","dir":"Articles","previous_headings":"","what":"Setting Up a Resolvable Incomplete Block Design with speed","title":"Complex Agricultural Experimental Designs with speed","text":"Firstly need create data frame representing incomplete block design. use systematic approach generate blocks treatment combinations. Figure 4: Initial layout resolvable incomplete block design showing systematic treatment distribution. Figure 4 shows systematic resolvable incomplete block layout optimisation. Note replicates made two blocks, half treatments appear, replicates made pairs blocks. treatments can swapped blocks, need remain within replicate.  see block contains half treatments, combined, pairs full replicate. algorithm also spatially optimised treatments across rows columns, giving nicely optimised resolvable incomplete block design.","code":"# Create the data frame ribd_df <- data.frame(   row = rep(1:3, 6),                             # Row within each block   col = rep(1:6, each = 3),                      # Column corresponds to block   replicate = rep(1:3, each = 6),                # 3 replicates, 6 observations each   block = rep(1:6, each = 3),                    # 6 blocks total, 3 treatments per block   treatment = paste0(\"V\", rep(1:6, times = 3))   # Treatment assignments )  # View the design head(ribd_df) row col replicate block treatment 1   1   1         1     1        V1 2   2   1         1     1        V2 3   3   1         1     1        V3 4   1   2         1     2        V4 5   2   2         1     2        V5 6   3   2         1     2        V6 ribd_result <- speed(ribd_df,                       swap = \"treatment\",                       swap_within = \"replicate\",                       seed = 42) row and col are used as row and column, respectively. Iteration: 1000 Score: 1.8 Best: 1.8 Since Improvement: 527 Iteration: 2000 Score: 1.8 Best: 1.8 Since Improvement: 1527 Early stopping at iteration 2473 ribd_result Optimised Experimental Design ---------------------------- Score: 1.8 Iterations Run: 2474 Stopped Early: TRUE Treatments: V1, V2, V3, V4, V5, V6 Seed: 42 str(ribd_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    18 obs. of  5 variables:   ..$ row      : int [1:18] 1 1 1 1 1 1 2 2 2 2 ...   ..$ col      : int [1:18] 1 2 3 4 5 6 1 2 3 4 ...   ..$ replicate: int [1:18] 1 1 2 2 3 3 1 1 2 2 ...   ..$ block    : int [1:18] 1 2 3 4 5 6 1 2 3 4 ...   ..$ treatment: chr [1:18] \"V3\" \"V2\" \"V1\" \"V4\" ...  $ score         : num 1.8  $ scores        : num [1:2474] 9 7.4 5.8 6.8 5.4 4.6 4.2 4.2 4.2 4.2 ...  $ temperatures  : num [1:2474] 100 99 98 97 96.1 ...  $ iterations_run: int 2474  $ stopped_early : logi TRUE  $ treatments    : chr [1:6] \"V1\" \"V2\" \"V3\" \"V4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(ribd_result)"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"performing-the-optimisation-2","dir":"Articles","previous_headings":"Incomplete Block Designs","what":"Performing the Optimisation","title":"Complex Agricultural Experimental Designs with speed","text":"","code":"ribd_result <- speed(ribd_df,                       swap = \"treatment\",                       swap_within = \"replicate\",                       seed = 42) row and col are used as row and column, respectively. Iteration: 1000 Score: 1.8 Best: 1.8 Since Improvement: 527 Iteration: 2000 Score: 1.8 Best: 1.8 Since Improvement: 1527 Early stopping at iteration 2473"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"output-of-the-optimisation-2","dir":"Articles","previous_headings":"Incomplete Block Designs","what":"Output of the Optimisation","title":"Complex Agricultural Experimental Designs with speed","text":"","code":"ribd_result Optimised Experimental Design ---------------------------- Score: 1.8 Iterations Run: 2474 Stopped Early: TRUE Treatments: V1, V2, V3, V4, V5, V6 Seed: 42 str(ribd_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    18 obs. of  5 variables:   ..$ row      : int [1:18] 1 1 1 1 1 1 2 2 2 2 ...   ..$ col      : int [1:18] 1 2 3 4 5 6 1 2 3 4 ...   ..$ replicate: int [1:18] 1 1 2 2 3 3 1 1 2 2 ...   ..$ block    : int [1:18] 1 2 3 4 5 6 1 2 3 4 ...   ..$ treatment: chr [1:18] \"V3\" \"V2\" \"V1\" \"V4\" ...  $ score         : num 1.8  $ scores        : num [1:2474] 9 7.4 5.8 6.8 5.4 4.6 4.2 4.2 4.2 4.2 ...  $ temperatures  : num [1:2474] 100 99 98 97 96.1 ...  $ iterations_run: int 2474  $ stopped_early : logi TRUE  $ treatments    : chr [1:6] \"V1\" \"V2\" \"V3\" \"V4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"visualise-the-output-2","dir":"Articles","previous_headings":"Incomplete Block Designs","what":"Visualise the Output","title":"Complex Agricultural Experimental Designs with speed","text":"see block contains half treatments, combined, pairs full replicate. algorithm also spatially optimised treatments across rows columns, giving nicely optimised resolvable incomplete block design.","code":"autoplot(ribd_result)"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"p-rep-partially-replicated-designs","dir":"Articles","previous_headings":"","what":"P-Rep (Partially Replicated) Designs","title":"Complex Agricultural Experimental Designs with speed","text":"P-rep designs modern approach plant breeding trials subset entries (typically checks selected test lines) replicated majority test entries appear . provides balance statistical power resource efficiency. Replicated entries: Key checks promising lines (typically 20-25% entries) Unreplicated entries: Majority test lines (75-80% entries) Strategic replication: Based breeding program priorities Spatial distribution: Replicates spread throughout trial Variable replication levels based entry importance Adaptive strategies different breeding stages Resource-efficient compared full replication Mixed models spatial correlation BLUP prediction unreplicated entries Genomic information integration possible Spatial adjustment field variation Large-scale breeding trials (>500 entries) Early generation testing limited seed Resource-constrained breeding programs High-throughput phenotyping applications full replication impractical Consider breeding trial 140 entries 40 key entries (checks promising lines) replicated twice others appear . single site design two blocks. Figure 5: Initial layout p-rep design showing systematic treatment distribution. Figure 6: Initial layout p-rep design showing systematic treatment distribution. shows initial p-rep design duplicated entries distributed systematically. set data frame, speed() optimisation call quite straight-forward. Note added block spatial_factors argument, attempt balance replicated treatments blocks well. Typically larger designs, may also want increase number iterations early_stop_iterations allow swapping take place, however case necessary due low replication. Ideally also like see even distribution duplicated entries block. 40 duplicated varieties block, know also 40 block.  optimised p-rep design strategic replication spatial distribution. Note treatments column called “treatment”, need specify treatments argument autoplot() function.","code":"prep_design <- data.frame(   row = rep(1:14, each = 10),    col = rep(1:10, times = 14),    block = rep(rep(1:2, each = 5), 14),   entry = c(paste0(\"V\", rep(1:40, 2)), paste0(\"V\", 41:100)) # 100 varieties, 40 duplicated )  # Create an indicator for the duplicated entries prep_design$duplicated <- duplicated(prep_design$entry) | duplicated(prep_design$entry, fromLast = TRUE)  head(prep_design) row col block entry duplicated 1   1   1     1    V1       TRUE 2   1   2     1    V2       TRUE 3   1   3     1    V3       TRUE 4   1   4     1    V4       TRUE 5   1   5     1    V5       TRUE 6   1   6     2    V6       TRUE prep_result <- speed(prep_design,                      swap = \"entry\",                      spatial_factors = ~ block + row + col,                       seed = 42) row and col are used as row and column, respectively. Iteration: 1000 Score: 2.993939 Best: 2.993939 Since Improvement: 5 Iteration: 2000 Score: 2.913131 Best: 2.913131 Since Improvement: 818 Iteration: 3000 Score: 2.913131 Best: 2.913131 Since Improvement: 1818 Early stopping at iteration 3182 prep_result Optimised Experimental Design ---------------------------- Score: 2.913131 Iterations Run: 3183 Stopped Early: TRUE Treatments: V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100 Seed: 42 str(prep_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    140 obs. of  5 variables:   ..$ row       : int [1:140] 1 1 1 1 1 1 1 1 1 1 ...   ..$ col       : int [1:140] 1 2 3 4 5 6 7 8 9 10 ...   ..$ block     : int [1:140] 1 1 1 1 1 2 2 2 2 2 ...   ..$ entry     : chr [1:140] \"V100\" \"V16\" \"V38\" \"V37\" ...   ..$ duplicated: logi [1:140] TRUE TRUE TRUE TRUE TRUE TRUE ...  $ score         : num 2.91  $ scores        : num [1:3183] 4.53 4.49 4.45 4.37 4.37 ...  $ temperatures  : num [1:3183] 100 99 98 97 96.1 ...  $ iterations_run: int 3183  $ stopped_early : logi TRUE  $ treatments    : chr [1:100] \"V1\" \"V2\" \"V3\" \"V4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" prep_result$design_df$duplicated <- duplicated(prep_result$design_df$entry) | duplicated(prep_result$design_df$entry, fromLast = TRUE)  sum(prep_result$design_df$duplicated[prep_result$design_df$block==1]) [1] 40 any(duplicated(prep_result$design_df$entry[prep_result$design_df$block==1])) [1] FALSE autoplot(prep_result, treatments = \"entry\")"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"overview-3","dir":"Articles","previous_headings":"","what":"Overview","title":"Complex Agricultural Experimental Designs with speed","text":"P-rep designs modern approach plant breeding trials subset entries (typically checks selected test lines) replicated majority test entries appear . provides balance statistical power resource efficiency.","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"structure-1","dir":"Articles","previous_headings":"","what":"Structure","title":"Complex Agricultural Experimental Designs with speed","text":"Replicated entries: Key checks promising lines (typically 20-25% entries) Unreplicated entries: Majority test lines (75-80% entries) Strategic replication: Based breeding program priorities Spatial distribution: Replicates spread throughout trial","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"key-features","dir":"Articles","previous_headings":"","what":"Key Features","title":"Complex Agricultural Experimental Designs with speed","text":"Variable replication levels based entry importance Adaptive strategies different breeding stages Resource-efficient compared full replication Mixed models spatial correlation BLUP prediction unreplicated entries Genomic information integration possible Spatial adjustment field variation","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"flexible-replication","dir":"Articles","previous_headings":"P-Rep (Partially Replicated) Designs","what":"Flexible Replication","title":"Complex Agricultural Experimental Designs with speed","text":"Variable replication levels based entry importance Adaptive strategies different breeding stages Resource-efficient compared full replication","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"modern-analysis-methods","dir":"Articles","previous_headings":"P-Rep (Partially Replicated) Designs","what":"Modern Analysis Methods","title":"Complex Agricultural Experimental Designs with speed","text":"Mixed models spatial correlation BLUP prediction unreplicated entries Genomic information integration possible Spatial adjustment field variation","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"when-to-use-p-rep-designs","dir":"Articles","previous_headings":"","what":"When to Use P-Rep Designs","title":"Complex Agricultural Experimental Designs with speed","text":"Large-scale breeding trials (>500 entries) Early generation testing limited seed Resource-constrained breeding programs High-throughput phenotyping applications full replication impractical","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"example-p-rep-design-for-large-breeding-trial","dir":"Articles","previous_headings":"","what":"Example: P-Rep Design for Large Breeding Trial","title":"Complex Agricultural Experimental Designs with speed","text":"Consider breeding trial 140 entries 40 key entries (checks promising lines) replicated twice others appear . single site design two blocks.","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"setting-up-p-rep-designs-with-speed","dir":"Articles","previous_headings":"","what":"Setting Up P-Rep Designs with speed","title":"Complex Agricultural Experimental Designs with speed","text":"Figure 5: Initial layout p-rep design showing systematic treatment distribution. Figure 6: Initial layout p-rep design showing systematic treatment distribution. shows initial p-rep design duplicated entries distributed systematically. set data frame, speed() optimisation call quite straight-forward. Note added block spatial_factors argument, attempt balance replicated treatments blocks well. Typically larger designs, may also want increase number iterations early_stop_iterations allow swapping take place, however case necessary due low replication. Ideally also like see even distribution duplicated entries block. 40 duplicated varieties block, know also 40 block.  optimised p-rep design strategic replication spatial distribution. Note treatments column called “treatment”, need specify treatments argument autoplot() function.","code":"prep_design <- data.frame(   row = rep(1:14, each = 10),    col = rep(1:10, times = 14),    block = rep(rep(1:2, each = 5), 14),   entry = c(paste0(\"V\", rep(1:40, 2)), paste0(\"V\", 41:100)) # 100 varieties, 40 duplicated )  # Create an indicator for the duplicated entries prep_design$duplicated <- duplicated(prep_design$entry) | duplicated(prep_design$entry, fromLast = TRUE)  head(prep_design) row col block entry duplicated 1   1   1     1    V1       TRUE 2   1   2     1    V2       TRUE 3   1   3     1    V3       TRUE 4   1   4     1    V4       TRUE 5   1   5     1    V5       TRUE 6   1   6     2    V6       TRUE prep_result <- speed(prep_design,                      swap = \"entry\",                      spatial_factors = ~ block + row + col,                       seed = 42) row and col are used as row and column, respectively. Iteration: 1000 Score: 2.993939 Best: 2.993939 Since Improvement: 5 Iteration: 2000 Score: 2.913131 Best: 2.913131 Since Improvement: 818 Iteration: 3000 Score: 2.913131 Best: 2.913131 Since Improvement: 1818 Early stopping at iteration 3182 prep_result Optimised Experimental Design ---------------------------- Score: 2.913131 Iterations Run: 3183 Stopped Early: TRUE Treatments: V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100 Seed: 42 str(prep_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    140 obs. of  5 variables:   ..$ row       : int [1:140] 1 1 1 1 1 1 1 1 1 1 ...   ..$ col       : int [1:140] 1 2 3 4 5 6 7 8 9 10 ...   ..$ block     : int [1:140] 1 1 1 1 1 2 2 2 2 2 ...   ..$ entry     : chr [1:140] \"V100\" \"V16\" \"V38\" \"V37\" ...   ..$ duplicated: logi [1:140] TRUE TRUE TRUE TRUE TRUE TRUE ...  $ score         : num 2.91  $ scores        : num [1:3183] 4.53 4.49 4.45 4.37 4.37 ...  $ temperatures  : num [1:3183] 100 99 98 97 96.1 ...  $ iterations_run: int 3183  $ stopped_early : logi TRUE  $ treatments    : chr [1:100] \"V1\" \"V2\" \"V3\" \"V4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" prep_result$design_df$duplicated <- duplicated(prep_result$design_df$entry) | duplicated(prep_result$design_df$entry, fromLast = TRUE)  sum(prep_result$design_df$duplicated[prep_result$design_df$block==1]) [1] 40 any(duplicated(prep_result$design_df$entry[prep_result$design_df$block==1])) [1] FALSE autoplot(prep_result, treatments = \"entry\")"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"performing-the-optimisation-3","dir":"Articles","previous_headings":"P-Rep (Partially Replicated) Designs","what":"Performing the Optimisation","title":"Complex Agricultural Experimental Designs with speed","text":"","code":"prep_result <- speed(prep_design,                      swap = \"entry\",                      spatial_factors = ~ block + row + col,                       seed = 42) row and col are used as row and column, respectively. Iteration: 1000 Score: 2.993939 Best: 2.993939 Since Improvement: 5 Iteration: 2000 Score: 2.913131 Best: 2.913131 Since Improvement: 818 Iteration: 3000 Score: 2.913131 Best: 2.913131 Since Improvement: 1818 Early stopping at iteration 3182"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"output-of-the-optimisation-3","dir":"Articles","previous_headings":"P-Rep (Partially Replicated) Designs","what":"Output of the Optimisation","title":"Complex Agricultural Experimental Designs with speed","text":"Ideally also like see even distribution duplicated entries block. 40 duplicated varieties block, know also 40 block.","code":"prep_result Optimised Experimental Design ---------------------------- Score: 2.913131 Iterations Run: 3183 Stopped Early: TRUE Treatments: V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100 Seed: 42 str(prep_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    140 obs. of  5 variables:   ..$ row       : int [1:140] 1 1 1 1 1 1 1 1 1 1 ...   ..$ col       : int [1:140] 1 2 3 4 5 6 7 8 9 10 ...   ..$ block     : int [1:140] 1 1 1 1 1 2 2 2 2 2 ...   ..$ entry     : chr [1:140] \"V100\" \"V16\" \"V38\" \"V37\" ...   ..$ duplicated: logi [1:140] TRUE TRUE TRUE TRUE TRUE TRUE ...  $ score         : num 2.91  $ scores        : num [1:3183] 4.53 4.49 4.45 4.37 4.37 ...  $ temperatures  : num [1:3183] 100 99 98 97 96.1 ...  $ iterations_run: int 3183  $ stopped_early : logi TRUE  $ treatments    : chr [1:100] \"V1\" \"V2\" \"V3\" \"V4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" prep_result$design_df$duplicated <- duplicated(prep_result$design_df$entry) | duplicated(prep_result$design_df$entry, fromLast = TRUE)  sum(prep_result$design_df$duplicated[prep_result$design_df$block==1]) [1] 40 any(duplicated(prep_result$design_df$entry[prep_result$design_df$block==1])) [1] FALSE"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"visualise-the-output-3","dir":"Articles","previous_headings":"P-Rep (Partially Replicated) Designs","what":"Visualise the Output","title":"Complex Agricultural Experimental Designs with speed","text":"optimised p-rep design strategic replication spatial distribution. Note treatments column called “treatment”, need specify treatments argument autoplot() function.","code":"autoplot(prep_result, treatments = \"entry\")"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"row-column-designs-with-blocking","dir":"Articles","previous_headings":"","what":"Row-Column Designs with Blocking","title":"Complex Agricultural Experimental Designs with speed","text":"Advanced row-column designs incorporate additional blocking structures control multiple sources variation simultaneously. designs particularly useful large, complex experiments variation occurs multiple dimensions. Superblocks contain multiple row-column units Hierarchical structure blocks within blocks Multi-level variation control Suitable large experiments Complete replications within row-column structure Replications additional blocking factor Multiple complete layouts Good multi-location multi-season trials Plots nested within row-column intersections Sub-sampling within main experimental units Multiple measurements per treatment combination Increased precision specific comparisons Multi-location breeding trials spatial control Large greenhouse experiments multiple environmental gradients Field trials complex spatial patterns High-throughput phenotyping platforms Consider large field trial 40 varieties replicated 10 times, requiring row blocks column blocks. Figure 7: Initial layout 2D blocking design showing systematic treatment distribution. Figure 8: 2D blocking design showing rowBlock layout. Figure 9: 2D blocking design showing colBlock layout. shows initial row-column design hierarchical blocking structure. Now use speed() function optimise design. swap treatments within row blocks, also considering column blocks spatial factor. Note also set optimisation parameters allow swaps, larger design treatments. Figure 10: Final layout 2D blocking design showing optimised treatment distribution. optimised row-column design blocking two directions.","code":"blocking_2d_design <- data.frame(row = rep(1:20, each = 20),                                   col = rep(1:20, 20),                                   treatment = rep(paste(\"V\", 1:40, sep = \"\"), 10),                                   rowBlock = rep(1:10, each = 40),                                  colBlock = rep(rep(1:10, each = 2), 20)) head(blocking_2d_design) row col treatment rowBlock colBlock 1   1   1        V1        1        1 2   1   2        V2        1        1 3   1   3        V3        1        2 4   1   4        V4        1        2 5   1   5        V5        1        3 6   1   6        V6        1        3 options(speed.swap_count = 5, speed.swap_all_blocks = TRUE, speed.adaptive_swaps = TRUE)  blocking_2d_result <- speed(blocking_2d_design,                              swap = \"treatment\",                              swap_within = \"rowBlock\",                             spatial_factors = ~ colBlock,                              iterations = 150000,                             early_stop_iterations = 50000,                              seed = 42, quiet = TRUE) blocking_2d_result Optimised Experimental Design ---------------------------- Score: 0 Iterations Run: 39972 Stopped Early: TRUE Treatments: V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40 Seed: 42"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"overview-4","dir":"Articles","previous_headings":"","what":"Overview","title":"Complex Agricultural Experimental Designs with speed","text":"Advanced row-column designs incorporate additional blocking structures control multiple sources variation simultaneously. designs particularly useful large, complex experiments variation occurs multiple dimensions.","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"types-of-row-column-blocking","dir":"Articles","previous_headings":"","what":"Types of Row-Column Blocking","title":"Complex Agricultural Experimental Designs with speed","text":"Superblocks contain multiple row-column units Hierarchical structure blocks within blocks Multi-level variation control Suitable large experiments Complete replications within row-column structure Replications additional blocking factor Multiple complete layouts Good multi-location multi-season trials Plots nested within row-column intersections Sub-sampling within main experimental units Multiple measurements per treatment combination Increased precision specific comparisons","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"row-column-designs-with-superblocks","dir":"Articles","previous_headings":"Row-Column Designs with Blocking","what":"Row-Column Designs with Superblocks","title":"Complex Agricultural Experimental Designs with speed","text":"Superblocks contain multiple row-column units Hierarchical structure blocks within blocks Multi-level variation control Suitable large experiments","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"resolvable-row-column-designs","dir":"Articles","previous_headings":"Row-Column Designs with Blocking","what":"Resolvable Row-Column Designs","title":"Complex Agricultural Experimental Designs with speed","text":"Complete replications within row-column structure Replications additional blocking factor Multiple complete layouts Good multi-location multi-season trials","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"nested-row-column-designs","dir":"Articles","previous_headings":"Row-Column Designs with Blocking","what":"Nested Row-Column Designs","title":"Complex Agricultural Experimental Designs with speed","text":"Plots nested within row-column intersections Sub-sampling within main experimental units Multiple measurements per treatment combination Increased precision specific comparisons","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"applications","dir":"Articles","previous_headings":"","what":"Applications","title":"Complex Agricultural Experimental Designs with speed","text":"Multi-location breeding trials spatial control Large greenhouse experiments multiple environmental gradients Field trials complex spatial patterns High-throughput phenotyping platforms","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"example-row-column-design-with-blocking-in-two-dimensions","dir":"Articles","previous_headings":"","what":"Example: Row-Column Design with Blocking in Two Dimensions","title":"Complex Agricultural Experimental Designs with speed","text":"Consider large field trial 40 varieties replicated 10 times, requiring row blocks column blocks.","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"setting-up-row-column-designs-with-blocking","dir":"Articles","previous_headings":"","what":"Setting Up Row-Column Designs with Blocking","title":"Complex Agricultural Experimental Designs with speed","text":"Figure 7: Initial layout 2D blocking design showing systematic treatment distribution. Figure 8: 2D blocking design showing rowBlock layout. Figure 9: 2D blocking design showing colBlock layout. shows initial row-column design hierarchical blocking structure. Now use speed() function optimise design. swap treatments within row blocks, also considering column blocks spatial factor. Note also set optimisation parameters allow swaps, larger design treatments. Figure 10: Final layout 2D blocking design showing optimised treatment distribution. optimised row-column design blocking two directions.","code":"blocking_2d_design <- data.frame(row = rep(1:20, each = 20),                                   col = rep(1:20, 20),                                   treatment = rep(paste(\"V\", 1:40, sep = \"\"), 10),                                   rowBlock = rep(1:10, each = 40),                                  colBlock = rep(rep(1:10, each = 2), 20)) head(blocking_2d_design) row col treatment rowBlock colBlock 1   1   1        V1        1        1 2   1   2        V2        1        1 3   1   3        V3        1        2 4   1   4        V4        1        2 5   1   5        V5        1        3 6   1   6        V6        1        3 options(speed.swap_count = 5, speed.swap_all_blocks = TRUE, speed.adaptive_swaps = TRUE)  blocking_2d_result <- speed(blocking_2d_design,                              swap = \"treatment\",                              swap_within = \"rowBlock\",                             spatial_factors = ~ colBlock,                              iterations = 150000,                             early_stop_iterations = 50000,                              seed = 42, quiet = TRUE) blocking_2d_result Optimised Experimental Design ---------------------------- Score: 0 Iterations Run: 39972 Stopped Early: TRUE Treatments: V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40 Seed: 42"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"performing-the-optimisation-4","dir":"Articles","previous_headings":"Row-Column Designs with Blocking","what":"Performing the Optimisation","title":"Complex Agricultural Experimental Designs with speed","text":"Now use speed() function optimise design. swap treatments within row blocks, also considering column blocks spatial factor. Note also set optimisation parameters allow swaps, larger design treatments.","code":"options(speed.swap_count = 5, speed.swap_all_blocks = TRUE, speed.adaptive_swaps = TRUE)  blocking_2d_result <- speed(blocking_2d_design,                              swap = \"treatment\",                              swap_within = \"rowBlock\",                             spatial_factors = ~ colBlock,                              iterations = 150000,                             early_stop_iterations = 50000,                              seed = 42, quiet = TRUE)"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"output-of-the-optimisation-4","dir":"Articles","previous_headings":"Row-Column Designs with Blocking","what":"Output of the Optimisation","title":"Complex Agricultural Experimental Designs with speed","text":"","code":"blocking_2d_result Optimised Experimental Design ---------------------------- Score: 0 Iterations Run: 39972 Stopped Early: TRUE Treatments: V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40 Seed: 42"},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"visualise-the-output-4","dir":"Articles","previous_headings":"Row-Column Designs with Blocking","what":"Visualise the Output","title":"Complex Agricultural Experimental Designs with speed","text":"Figure 10: Final layout 2D blocking design showing optimised treatment distribution. optimised row-column design blocking two directions.","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Complex Agricultural Experimental Designs with speed","text":"Complex experimental designs offer powerful solutions challenging agricultural research scenarios. speed package provides essential tools optimising designs spatially, ensuring statistical advantages sophisticated designs fully realised practice. Key benefits using complex designs spatial optimisation include: Efficient resource utilisation large-scale studies Maintained statistical rigor despite practical constraints Enhanced precision appropriate blocking spatial arrangement Flexible solutions diverse research objectives Practical feasibility optimised field layouts selecting implementing complex designs, researchers carefully balance statistical efficiency, practical constraints, research objectives. spatial optimisation capabilities speed ensure sophisticated designs achieve full potential real-world applications. Cochran, W.G. & Cox, G.M. (1957). Experimental Designs John, J.. & Williams, E.R. (1995). Cyclic Computer Generated Designs Bailey, R.. (2008). Design Comparative Experiments Patterson, H.D. & Williams, E.R. (1976). “new class resolvable incomplete block designs” Kempton, R.. & Fox, P.N. (1997). Statistical Methods Plant Variety Evaluation Singh, R. & Chaudhary, B.D. (1985). Biometrical Methods Quantitative Genetic Analysis Common Agricultural Experimental Designs speed - Foundational designs agricultural applications vignette demonstrates advanced applications speed package complex experimental designs. foundational designs, see “Common Agricultural Experimental Designs” vignette. specific implementation details, consult package documentation function help files.","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Complex Agricultural Experimental Designs with speed","text":"Cochran, W.G. & Cox, G.M. (1957). Experimental Designs John, J.. & Williams, E.R. (1995). Cyclic Computer Generated Designs Bailey, R.. (2008). Design Comparative Experiments Patterson, H.D. & Williams, E.R. (1976). “new class resolvable incomplete block designs” Kempton, R.. & Fox, P.N. (1997). Statistical Methods Plant Variety Evaluation Singh, R. & Chaudhary, B.D. (1985). Biometrical Methods Quantitative Genetic Analysis","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"specialised-design-references","dir":"Articles","previous_headings":"Conclusion","what":"Specialised Design References","title":"Complex Agricultural Experimental Designs with speed","text":"Cochran, W.G. & Cox, G.M. (1957). Experimental Designs John, J.. & Williams, E.R. (1995). Cyclic Computer Generated Designs Bailey, R.. (2008). Design Comparative Experiments Patterson, H.D. & Williams, E.R. (1976). “new class resolvable incomplete block designs”","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"agricultural-applications","dir":"Articles","previous_headings":"Conclusion","what":"Agricultural Applications","title":"Complex Agricultural Experimental Designs with speed","text":"Kempton, R.. & Fox, P.N. (1997). Statistical Methods Plant Variety Evaluation Singh, R. & Chaudhary, B.D. (1985). Biometrical Methods Quantitative Genetic Analysis","code":""},{"path":"https://biometryhub.github.io/speed/articles/complex_designs.html","id":"related-vignettes","dir":"Articles","previous_headings":"","what":"Related Vignettes","title":"Complex Agricultural Experimental Designs with speed","text":"Common Agricultural Experimental Designs speed - Foundational designs agricultural applications vignette demonstrates advanced applications speed package complex experimental designs. foundational designs, see “Common Agricultural Experimental Designs” vignette. specific implementation details, consult package documentation function help files.","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Common Agricultural Experimental Designs with speed","text":"Agricultural experiments require careful spatial design minimise effects field heterogeneity neighbour interactions maximising statistical power. speed package provides tools creating spatially efficient experimental designs simulated annealing optimisation. vignette demonstrates use speed common agricultural experimental designs, showing spatial optimisation can improve efficiency validity field trials. ’ll work four key design types, building complexity showing different features package. advanced specialised experimental designs (e.g., split-split plot, strip-plot, incomplete block, p-rep, ), see companion vignette: Complex Agricultural Experimental Designs speed.","code":"library(speed)"},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"completely-randomised-design-crd","dir":"Articles","previous_headings":"","what":"Completely Randomised Design (CRD)","title":"Common Agricultural Experimental Designs with speed","text":"Completely Randomised Design simplest experimental design treatments assigned experimental units entirely random. simple implement, CRD doesn’t account spatial variation field conditions, can mitigated spatial optimisation techniques. Homogeneous experimental conditions Controlled environments (greenhouse, growth chamber) Small-scale experiments minimal spatial variation Proof--concept studies Consider field trial testing 8 new wheat varieties 4 replicates . Even though treatments assigned randomly, spatial optimisation can reduce neighbour effects improve precision. agricultural contexts, even completely randomised designs benefit spatial optimisation minimise treatment clustering neighbour effects. Firstly initialise data frame representing design visualise . design 4 replicates 8 treatments items, 8 rows 4 columns.  systematic layout; note initial layout arranges treatments repeating, non-random pattern. now randomised visualisation. main speed() function performs optimisation. set sensible defaults allow application wide variety situations. case, need provide design data frame operate , column name data frame use treatments, seed reproducibility. printed output returned design object shows final optimisation score (lower better), number iterations taken reach result, iterations stopped early due lack improvement, treatments present design, seed. output object contains additional components, can seen : final step visualise optimised design. plot displays spatial arrangement treatments optimisation, allowing easily check clustering, spatial trends, patterns may affect experiment. well-randomised spatially efficient design show treatments distributed evenly across field, helping minimise neighbour effects maximise reliability results.  nicely randomised1 spatially optimal design!","code":"# Initialise data frame crd_design <- initialise_design_df(items = 8, nrows = 8, ncols = 4) head(crd_design) row col treatment 1   1   1        T1 2   2   1        T2 3   3   1        T3 4   4   1        T4 5   5   1        T5 6   6   1        T6 crd_result <- speed(crd_design,                      swap = \"treatment\",                     seed = 42) row and col are used as row and column, respectively. Iteration: 1000 Score: 2.285714 Best: 2.285714 Since Improvement: 271 Iteration: 2000 Score: 2.285714 Best: 2.285714 Since Improvement: 1271 Early stopping at iteration 2729 crd_result Optimised Experimental Design ---------------------------- Score: 2.285714 Iterations Run: 2730 Stopped Early: TRUE Treatments: T1, T2, T3, T4, T5, T6, T7, T8 Seed: 42 str(crd_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    32 obs. of  3 variables:   ..$ row      : int [1:32] 1 1 1 1 2 2 2 2 3 3 ...   ..$ col      : int [1:32] 1 2 3 4 1 2 3 4 1 2 ...   ..$ treatment: chr [1:32] \"T8\" \"T1\" \"T7\" \"T3\" ...   ..- attr(*, \"out.attrs\")=List of 2   .. ..$ dim     : Named int [1:2] 8 4   .. .. ..- attr(*, \"names\")= chr [1:2] \"row\" \"col\"   .. ..$ dimnames:List of 2   .. .. ..$ row: chr [1:8] \"row=1\" \"row=2\" \"row=3\" \"row=4\" ...   .. .. ..$ col: chr [1:4] \"col=1\" \"col=2\" \"col=3\" \"col=4\"  $ score         : num 2.29  $ scores        : num [1:2730] 40 36.3 32.4 28.3 24.1 ...  $ temperatures  : num [1:2730] 100 99 98 97 96.1 ...  $ iterations_run: int 2730  $ stopped_early : logi TRUE  $ treatments    : chr [1:8] \"T1\" \"T2\" \"T3\" \"T4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(crd_result)"},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Common Agricultural Experimental Designs with speed","text":"Completely Randomised Design simplest experimental design treatments assigned experimental units entirely random. simple implement, CRD doesn’t account spatial variation field conditions, can mitigated spatial optimisation techniques.","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"when-to-use","dir":"Articles","previous_headings":"","what":"When to Use","title":"Common Agricultural Experimental Designs with speed","text":"Homogeneous experimental conditions Controlled environments (greenhouse, growth chamber) Small-scale experiments minimal spatial variation Proof--concept studies","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"example-field-trial-with-8-varieties","dir":"Articles","previous_headings":"","what":"Example: Field Trial with 8 Varieties","title":"Common Agricultural Experimental Designs with speed","text":"Consider field trial testing 8 new wheat varieties 4 replicates . Even though treatments assigned randomly, spatial optimisation can reduce neighbour effects improve precision.","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"setting-up-crd-with-speed","dir":"Articles","previous_headings":"","what":"Setting Up CRD with speed","title":"Common Agricultural Experimental Designs with speed","text":"agricultural contexts, even completely randomised designs benefit spatial optimisation minimise treatment clustering neighbour effects. Firstly initialise data frame representing design visualise . design 4 replicates 8 treatments items, 8 rows 4 columns.  systematic layout; note initial layout arranges treatments repeating, non-random pattern. now randomised visualisation. main speed() function performs optimisation. set sensible defaults allow application wide variety situations. case, need provide design data frame operate , column name data frame use treatments, seed reproducibility. printed output returned design object shows final optimisation score (lower better), number iterations taken reach result, iterations stopped early due lack improvement, treatments present design, seed. output object contains additional components, can seen : final step visualise optimised design. plot displays spatial arrangement treatments optimisation, allowing easily check clustering, spatial trends, patterns may affect experiment. well-randomised spatially efficient design show treatments distributed evenly across field, helping minimise neighbour effects maximise reliability results.  nicely randomised1 spatially optimal design!","code":"# Initialise data frame crd_design <- initialise_design_df(items = 8, nrows = 8, ncols = 4) head(crd_design) row col treatment 1   1   1        T1 2   2   1        T2 3   3   1        T3 4   4   1        T4 5   5   1        T5 6   6   1        T6 crd_result <- speed(crd_design,                      swap = \"treatment\",                     seed = 42) row and col are used as row and column, respectively. Iteration: 1000 Score: 2.285714 Best: 2.285714 Since Improvement: 271 Iteration: 2000 Score: 2.285714 Best: 2.285714 Since Improvement: 1271 Early stopping at iteration 2729 crd_result Optimised Experimental Design ---------------------------- Score: 2.285714 Iterations Run: 2730 Stopped Early: TRUE Treatments: T1, T2, T3, T4, T5, T6, T7, T8 Seed: 42 str(crd_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    32 obs. of  3 variables:   ..$ row      : int [1:32] 1 1 1 1 2 2 2 2 3 3 ...   ..$ col      : int [1:32] 1 2 3 4 1 2 3 4 1 2 ...   ..$ treatment: chr [1:32] \"T8\" \"T1\" \"T7\" \"T3\" ...   ..- attr(*, \"out.attrs\")=List of 2   .. ..$ dim     : Named int [1:2] 8 4   .. .. ..- attr(*, \"names\")= chr [1:2] \"row\" \"col\"   .. ..$ dimnames:List of 2   .. .. ..$ row: chr [1:8] \"row=1\" \"row=2\" \"row=3\" \"row=4\" ...   .. .. ..$ col: chr [1:4] \"col=1\" \"col=2\" \"col=3\" \"col=4\"  $ score         : num 2.29  $ scores        : num [1:2730] 40 36.3 32.4 28.3 24.1 ...  $ temperatures  : num [1:2730] 100 99 98 97 96.1 ...  $ iterations_run: int 2730  $ stopped_early : logi TRUE  $ treatments    : chr [1:8] \"T1\" \"T2\" \"T3\" \"T4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(crd_result)"},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"performing-the-optimisation","dir":"Articles","previous_headings":"Completely Randomised Design (CRD)","what":"Performing the Optimisation","title":"Common Agricultural Experimental Designs with speed","text":"main speed() function performs optimisation. set sensible defaults allow application wide variety situations. case, need provide design data frame operate , column name data frame use treatments, seed reproducibility.","code":"crd_result <- speed(crd_design,                      swap = \"treatment\",                     seed = 42) row and col are used as row and column, respectively. Iteration: 1000 Score: 2.285714 Best: 2.285714 Since Improvement: 271 Iteration: 2000 Score: 2.285714 Best: 2.285714 Since Improvement: 1271 Early stopping at iteration 2729 crd_result Optimised Experimental Design ---------------------------- Score: 2.285714 Iterations Run: 2730 Stopped Early: TRUE Treatments: T1, T2, T3, T4, T5, T6, T7, T8 Seed: 42"},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"output-of-the-optimisation","dir":"Articles","previous_headings":"Completely Randomised Design (CRD)","what":"Output of the Optimisation","title":"Common Agricultural Experimental Designs with speed","text":"printed output returned design object shows final optimisation score (lower better), number iterations taken reach result, iterations stopped early due lack improvement, treatments present design, seed. output object contains additional components, can seen :","code":"str(crd_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    32 obs. of  3 variables:   ..$ row      : int [1:32] 1 1 1 1 2 2 2 2 3 3 ...   ..$ col      : int [1:32] 1 2 3 4 1 2 3 4 1 2 ...   ..$ treatment: chr [1:32] \"T8\" \"T1\" \"T7\" \"T3\" ...   ..- attr(*, \"out.attrs\")=List of 2   .. ..$ dim     : Named int [1:2] 8 4   .. .. ..- attr(*, \"names\")= chr [1:2] \"row\" \"col\"   .. ..$ dimnames:List of 2   .. .. ..$ row: chr [1:8] \"row=1\" \"row=2\" \"row=3\" \"row=4\" ...   .. .. ..$ col: chr [1:4] \"col=1\" \"col=2\" \"col=3\" \"col=4\"  $ score         : num 2.29  $ scores        : num [1:2730] 40 36.3 32.4 28.3 24.1 ...  $ temperatures  : num [1:2730] 100 99 98 97 96.1 ...  $ iterations_run: int 2730  $ stopped_early : logi TRUE  $ treatments    : chr [1:8] \"T1\" \"T2\" \"T3\" \"T4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"visualise-the-output","dir":"Articles","previous_headings":"Completely Randomised Design (CRD)","what":"Visualise the Output","title":"Common Agricultural Experimental Designs with speed","text":"final step visualise optimised design. plot displays spatial arrangement treatments optimisation, allowing easily check clustering, spatial trends, patterns may affect experiment. well-randomised spatially efficient design show treatments distributed evenly across field, helping minimise neighbour effects maximise reliability results.  nicely randomised1 spatially optimal design!","code":"autoplot(crd_result)"},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"randomised-complete-block-design-rcbd","dir":"Articles","previous_headings":"","what":"Randomised Complete Block Design (RCBD)","title":"Common Agricultural Experimental Designs with speed","text":"RCBD one commonly used designs agricultural research. controls one source variation grouping experimental units homogeneous blocks, treatment appearing per block. Field experiments known gradient (slope, soil type, irrigation) Medium large experiments (3+ treatments) blocking factor explains significant variation Multi-location trials Consider testing 6 barley varieties across field moisture gradient. Using 4 blocks perpendicular gradient helps control soil moisture variation. initialise data frame design 4 blocks 6 treatments, arranged 4 rows 6 columns. Note can specify treatments items argument.  systematic block layout; block contains treatments repeating pattern. now randomised within blocks.  well-randomised spatially efficient RCBD layout.","code":"rcbd_design <- initialise_design_df(items = paste0(\"V\", 1:6), nrows = 4, ncols = 6, block_nrows = 1, block_ncols = 6) head(rcbd_design) row col treatment row_block col_block block 1   1   1        V1         1         1     1 2   2   1        V1         2         1     2 3   3   1        V1         3         1     3 4   4   1        V1         4         1     4 5   1   2        V2         1         1     1 6   2   2        V2         2         1     2 rcbd_result <- speed(rcbd_design,                       swap = \"treatment\",                      swap_within = \"block\",                      seed = 42) row and col are used as row and column, respectively. Iteration: 1000 Score: 1.6 Best: 1.6 Since Improvement: 672 Iteration: 2000 Score: 1.6 Best: 1.6 Since Improvement: 1672 Early stopping at iteration 2328 rcbd_result Optimised Experimental Design ---------------------------- Score: 1.6 Iterations Run: 2329 Stopped Early: TRUE Treatments: V1, V2, V3, V4, V5, V6 Seed: 42 str(rcbd_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    24 obs. of  6 variables:   ..$ row      : int [1:24] 1 1 1 1 1 1 2 2 2 2 ...   ..$ col      : int [1:24] 1 2 3 4 5 6 1 2 3 4 ...   ..$ treatment: chr [1:24] \"V4\" \"V1\" \"V5\" \"V6\" ...   ..$ row_block: num [1:24] 1 1 1 1 1 1 2 2 2 2 ...   ..$ col_block: num [1:24] 1 1 1 1 1 1 1 1 1 1 ...   ..$ block    : num [1:24] 1 1 1 1 1 1 2 2 2 2 ...   ..- attr(*, \"out.attrs\")=List of 2   .. ..$ dim     : Named int [1:2] 4 6   .. .. ..- attr(*, \"names\")= chr [1:2] \"row\" \"col\"   .. ..$ dimnames:List of 2   .. .. ..$ row: chr [1:4] \"row=1\" \"row=2\" \"row=3\" \"row=4\"   .. .. ..$ col: chr [1:6] \"col=1\" \"col=2\" \"col=3\" \"col=4\" ...  $ score         : num 1.6  $ scores        : num [1:2329] 34 29.6 25.2 21.6 18.4 16.2 13 12.2 8.6 10.4 ...  $ temperatures  : num [1:2329] 100 99 98 97 96.1 ...  $ iterations_run: int 2329  $ stopped_early : logi TRUE  $ treatments    : chr [1:6] \"V1\" \"V2\" \"V3\" \"V4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(rcbd_result)"},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"overview-1","dir":"Articles","previous_headings":"","what":"Overview","title":"Common Agricultural Experimental Designs with speed","text":"RCBD one commonly used designs agricultural research. controls one source variation grouping experimental units homogeneous blocks, treatment appearing per block.","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"when-to-use-1","dir":"Articles","previous_headings":"","what":"When to Use","title":"Common Agricultural Experimental Designs with speed","text":"Field experiments known gradient (slope, soil type, irrigation) Medium large experiments (3+ treatments) blocking factor explains significant variation Multi-location trials","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"example-variety-trial-across-field-gradient","dir":"Articles","previous_headings":"","what":"Example: Variety Trial Across Field Gradient","title":"Common Agricultural Experimental Designs with speed","text":"Consider testing 6 barley varieties across field moisture gradient. Using 4 blocks perpendicular gradient helps control soil moisture variation.","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"setting-up-rcbd-with-speed","dir":"Articles","previous_headings":"","what":"Setting Up RCBD with speed","title":"Common Agricultural Experimental Designs with speed","text":"initialise data frame design 4 blocks 6 treatments, arranged 4 rows 6 columns. Note can specify treatments items argument.  systematic block layout; block contains treatments repeating pattern. now randomised within blocks.  well-randomised spatially efficient RCBD layout.","code":"rcbd_design <- initialise_design_df(items = paste0(\"V\", 1:6), nrows = 4, ncols = 6, block_nrows = 1, block_ncols = 6) head(rcbd_design) row col treatment row_block col_block block 1   1   1        V1         1         1     1 2   2   1        V1         2         1     2 3   3   1        V1         3         1     3 4   4   1        V1         4         1     4 5   1   2        V2         1         1     1 6   2   2        V2         2         1     2 rcbd_result <- speed(rcbd_design,                       swap = \"treatment\",                      swap_within = \"block\",                      seed = 42) row and col are used as row and column, respectively. Iteration: 1000 Score: 1.6 Best: 1.6 Since Improvement: 672 Iteration: 2000 Score: 1.6 Best: 1.6 Since Improvement: 1672 Early stopping at iteration 2328 rcbd_result Optimised Experimental Design ---------------------------- Score: 1.6 Iterations Run: 2329 Stopped Early: TRUE Treatments: V1, V2, V3, V4, V5, V6 Seed: 42 str(rcbd_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    24 obs. of  6 variables:   ..$ row      : int [1:24] 1 1 1 1 1 1 2 2 2 2 ...   ..$ col      : int [1:24] 1 2 3 4 5 6 1 2 3 4 ...   ..$ treatment: chr [1:24] \"V4\" \"V1\" \"V5\" \"V6\" ...   ..$ row_block: num [1:24] 1 1 1 1 1 1 2 2 2 2 ...   ..$ col_block: num [1:24] 1 1 1 1 1 1 1 1 1 1 ...   ..$ block    : num [1:24] 1 1 1 1 1 1 2 2 2 2 ...   ..- attr(*, \"out.attrs\")=List of 2   .. ..$ dim     : Named int [1:2] 4 6   .. .. ..- attr(*, \"names\")= chr [1:2] \"row\" \"col\"   .. ..$ dimnames:List of 2   .. .. ..$ row: chr [1:4] \"row=1\" \"row=2\" \"row=3\" \"row=4\"   .. .. ..$ col: chr [1:6] \"col=1\" \"col=2\" \"col=3\" \"col=4\" ...  $ score         : num 1.6  $ scores        : num [1:2329] 34 29.6 25.2 21.6 18.4 16.2 13 12.2 8.6 10.4 ...  $ temperatures  : num [1:2329] 100 99 98 97 96.1 ...  $ iterations_run: int 2329  $ stopped_early : logi TRUE  $ treatments    : chr [1:6] \"V1\" \"V2\" \"V3\" \"V4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(rcbd_result)"},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"performing-the-optimisation-1","dir":"Articles","previous_headings":"Randomised Complete Block Design (RCBD)","what":"Performing the Optimisation","title":"Common Agricultural Experimental Designs with speed","text":"","code":"rcbd_result <- speed(rcbd_design,                       swap = \"treatment\",                      swap_within = \"block\",                      seed = 42) row and col are used as row and column, respectively. Iteration: 1000 Score: 1.6 Best: 1.6 Since Improvement: 672 Iteration: 2000 Score: 1.6 Best: 1.6 Since Improvement: 1672 Early stopping at iteration 2328 rcbd_result Optimised Experimental Design ---------------------------- Score: 1.6 Iterations Run: 2329 Stopped Early: TRUE Treatments: V1, V2, V3, V4, V5, V6 Seed: 42"},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"output-of-the-optimisation-1","dir":"Articles","previous_headings":"Randomised Complete Block Design (RCBD)","what":"Output of the Optimisation","title":"Common Agricultural Experimental Designs with speed","text":"","code":"str(rcbd_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    24 obs. of  6 variables:   ..$ row      : int [1:24] 1 1 1 1 1 1 2 2 2 2 ...   ..$ col      : int [1:24] 1 2 3 4 5 6 1 2 3 4 ...   ..$ treatment: chr [1:24] \"V4\" \"V1\" \"V5\" \"V6\" ...   ..$ row_block: num [1:24] 1 1 1 1 1 1 2 2 2 2 ...   ..$ col_block: num [1:24] 1 1 1 1 1 1 1 1 1 1 ...   ..$ block    : num [1:24] 1 1 1 1 1 1 2 2 2 2 ...   ..- attr(*, \"out.attrs\")=List of 2   .. ..$ dim     : Named int [1:2] 4 6   .. .. ..- attr(*, \"names\")= chr [1:2] \"row\" \"col\"   .. ..$ dimnames:List of 2   .. .. ..$ row: chr [1:4] \"row=1\" \"row=2\" \"row=3\" \"row=4\"   .. .. ..$ col: chr [1:6] \"col=1\" \"col=2\" \"col=3\" \"col=4\" ...  $ score         : num 1.6  $ scores        : num [1:2329] 34 29.6 25.2 21.6 18.4 16.2 13 12.2 8.6 10.4 ...  $ temperatures  : num [1:2329] 100 99 98 97 96.1 ...  $ iterations_run: int 2329  $ stopped_early : logi TRUE  $ treatments    : chr [1:6] \"V1\" \"V2\" \"V3\" \"V4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"visualise-the-output-1","dir":"Articles","previous_headings":"Randomised Complete Block Design (RCBD)","what":"Visualise the Output","title":"Common Agricultural Experimental Designs with speed","text":"well-randomised spatially efficient RCBD layout.","code":"autoplot(rcbd_result)"},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"latin-square-design","dir":"Articles","previous_headings":"","what":"Latin Square Design","title":"Common Agricultural Experimental Designs with speed","text":"Latin Square Design controls two sources variation simultaneously arranging treatments square grid treatment appears exactly row column. Small medium experiments (3-10 treatments) Two known sources variation (e.g., row column effects) Greenhouse bench experiments Field experiments two-way gradients Number treatments must equal number rows columns Limited degrees freedom error Assumes row × column interaction initialise 5 × 5 Latin square 5 treatments.  systematic Latin square layout; treatment appears per row column. design now randomised. spatial optimisation algorithm built speed, default options enough iterations, arrive Latin square design cases number rows, columns, treatments replicates equal . Note final score zero shows algorithm found perfect Latin Square solution.  well-randomised spatially efficient Latin square layout.","code":"latin_square_design <- initialise_design_df(items = 5, nrows = 5, ncols = 5) head(latin_square_design) row col treatment 1   1   1        T1 2   2   1        T2 3   3   1        T3 4   4   1        T4 5   5   1        T5 6   1   2        T1 latin_square_result <- speed(latin_square_design,                               swap = \"treatment\",                              seed = 42) row and col are used as row and column, respectively. Iteration: 1000 Score: 1 Best: 1 Since Improvement: 308 Early stopping at iteration 1040 latin_square_result Optimised Experimental Design ---------------------------- Score: 0 Iterations Run: 1041 Stopped Early: TRUE Treatments: T1, T2, T3, T4, T5 Seed: 42 str(latin_square_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    25 obs. of  3 variables:   ..$ row      : int [1:25] 1 1 1 1 1 2 2 2 2 2 ...   ..$ col      : int [1:25] 1 2 3 4 5 1 2 3 4 5 ...   ..$ treatment: chr [1:25] \"T3\" \"T2\" \"T5\" \"T1\" ...   ..- attr(*, \"out.attrs\")=List of 2   .. ..$ dim     : Named int [1:2] 5 5   .. .. ..- attr(*, \"names\")= chr [1:2] \"row\" \"col\"   .. ..$ dimnames:List of 2   .. .. ..$ row: chr [1:5] \"row=1\" \"row=2\" \"row=3\" \"row=4\" ...   .. .. ..$ col: chr [1:5] \"col=1\" \"col=2\" \"col=3\" \"col=4\" ...  $ score         : num 0  $ scores        : num [1:1041] 45 39 37 33.5 30.5 32.5 32 30.5 26.5 29 ...  $ temperatures  : num [1:1041] 100 99 98 97 96.1 ...  $ iterations_run: int 1041  $ stopped_early : logi TRUE  $ treatments    : chr [1:5] \"T1\" \"T2\" \"T3\" \"T4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(latin_square_result)"},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"overview-2","dir":"Articles","previous_headings":"","what":"Overview","title":"Common Agricultural Experimental Designs with speed","text":"Latin Square Design controls two sources variation simultaneously arranging treatments square grid treatment appears exactly row column.","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"when-to-use-2","dir":"Articles","previous_headings":"","what":"When to Use","title":"Common Agricultural Experimental Designs with speed","text":"Small medium experiments (3-10 treatments) Two known sources variation (e.g., row column effects) Greenhouse bench experiments Field experiments two-way gradients","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"constraints","dir":"Articles","previous_headings":"","what":"Constraints","title":"Common Agricultural Experimental Designs with speed","text":"Number treatments must equal number rows columns Limited degrees freedom error Assumes row × column interaction","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"setting-up-latin-square-with-speed","dir":"Articles","previous_headings":"","what":"Setting Up Latin Square with speed","title":"Common Agricultural Experimental Designs with speed","text":"initialise 5 × 5 Latin square 5 treatments.  systematic Latin square layout; treatment appears per row column. design now randomised. spatial optimisation algorithm built speed, default options enough iterations, arrive Latin square design cases number rows, columns, treatments replicates equal . Note final score zero shows algorithm found perfect Latin Square solution.  well-randomised spatially efficient Latin square layout.","code":"latin_square_design <- initialise_design_df(items = 5, nrows = 5, ncols = 5) head(latin_square_design) row col treatment 1   1   1        T1 2   2   1        T2 3   3   1        T3 4   4   1        T4 5   5   1        T5 6   1   2        T1 latin_square_result <- speed(latin_square_design,                               swap = \"treatment\",                              seed = 42) row and col are used as row and column, respectively. Iteration: 1000 Score: 1 Best: 1 Since Improvement: 308 Early stopping at iteration 1040 latin_square_result Optimised Experimental Design ---------------------------- Score: 0 Iterations Run: 1041 Stopped Early: TRUE Treatments: T1, T2, T3, T4, T5 Seed: 42 str(latin_square_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    25 obs. of  3 variables:   ..$ row      : int [1:25] 1 1 1 1 1 2 2 2 2 2 ...   ..$ col      : int [1:25] 1 2 3 4 5 1 2 3 4 5 ...   ..$ treatment: chr [1:25] \"T3\" \"T2\" \"T5\" \"T1\" ...   ..- attr(*, \"out.attrs\")=List of 2   .. ..$ dim     : Named int [1:2] 5 5   .. .. ..- attr(*, \"names\")= chr [1:2] \"row\" \"col\"   .. ..$ dimnames:List of 2   .. .. ..$ row: chr [1:5] \"row=1\" \"row=2\" \"row=3\" \"row=4\" ...   .. .. ..$ col: chr [1:5] \"col=1\" \"col=2\" \"col=3\" \"col=4\" ...  $ score         : num 0  $ scores        : num [1:1041] 45 39 37 33.5 30.5 32.5 32 30.5 26.5 29 ...  $ temperatures  : num [1:1041] 100 99 98 97 96.1 ...  $ iterations_run: int 1041  $ stopped_early : logi TRUE  $ treatments    : chr [1:5] \"T1\" \"T2\" \"T3\" \"T4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(latin_square_result)"},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"performing-the-optimisation-2","dir":"Articles","previous_headings":"Latin Square Design","what":"Performing the Optimisation","title":"Common Agricultural Experimental Designs with speed","text":"spatial optimisation algorithm built speed, default options enough iterations, arrive Latin square design cases number rows, columns, treatments replicates equal .","code":"latin_square_result <- speed(latin_square_design,                               swap = \"treatment\",                              seed = 42) row and col are used as row and column, respectively. Iteration: 1000 Score: 1 Best: 1 Since Improvement: 308 Early stopping at iteration 1040 latin_square_result Optimised Experimental Design ---------------------------- Score: 0 Iterations Run: 1041 Stopped Early: TRUE Treatments: T1, T2, T3, T4, T5 Seed: 42"},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"output-of-the-optimisation-2","dir":"Articles","previous_headings":"Latin Square Design","what":"Output of the Optimisation","title":"Common Agricultural Experimental Designs with speed","text":"Note final score zero shows algorithm found perfect Latin Square solution.","code":"str(latin_square_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    25 obs. of  3 variables:   ..$ row      : int [1:25] 1 1 1 1 1 2 2 2 2 2 ...   ..$ col      : int [1:25] 1 2 3 4 5 1 2 3 4 5 ...   ..$ treatment: chr [1:25] \"T3\" \"T2\" \"T5\" \"T1\" ...   ..- attr(*, \"out.attrs\")=List of 2   .. ..$ dim     : Named int [1:2] 5 5   .. .. ..- attr(*, \"names\")= chr [1:2] \"row\" \"col\"   .. ..$ dimnames:List of 2   .. .. ..$ row: chr [1:5] \"row=1\" \"row=2\" \"row=3\" \"row=4\" ...   .. .. ..$ col: chr [1:5] \"col=1\" \"col=2\" \"col=3\" \"col=4\" ...  $ score         : num 0  $ scores        : num [1:1041] 45 39 37 33.5 30.5 32.5 32 30.5 26.5 29 ...  $ temperatures  : num [1:1041] 100 99 98 97 96.1 ...  $ iterations_run: int 1041  $ stopped_early : logi TRUE  $ treatments    : chr [1:5] \"T1\" \"T2\" \"T3\" \"T4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"visualise-the-output-2","dir":"Articles","previous_headings":"Latin Square Design","what":"Visualise the Output","title":"Common Agricultural Experimental Designs with speed","text":"well-randomised spatially efficient Latin square layout.","code":"autoplot(latin_square_result)"},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"split-plot-design","dir":"Articles","previous_headings":"","what":"Split-Plot Design","title":"Common Agricultural Experimental Designs with speed","text":"Split-Plot Design used treatments easier apply large areas (whole plots) others require smaller areas (sub-plots). creates hierarchical structure different levels precision. Split-Plot Designs particularly useful agricultural experiments factors difficult expensive replicate whole plot level. designs possible speed package, allowing spatial optimisation whole plots sub-plots single step. Treatments different application scales (large vs small plots) Irrigation × variety experiments Tillage × fertiliser studies treatments expensive difficult replicate Whole plots: Larger experimental units (main treatments) Sub-plots: Smaller units within whole plots (sub-treatments) Different error terms different treatment levels Now can create data frame representing split plot design. Note initalise_design_df function currently support split plot designs directly, create manually.   systematic split plot layout; treatment appears per block whole plot treatments, per whole plot sub-plot treatments. design now randomised. split-plot designs, use named lists specify hierarchical structure. swap parameter defines optimise level, swap_within defines constraints level. output shows optimisation results design. score iterations combined entire design, treatments, stopping criteria reported separately level, allowing assess quality optimisation hierarchy level.   design now optimised whole plot level sub-plot level.","code":"split_plot_design <- data.frame(     row = rep(1:12, each = 4),     col = rep(1:4, times = 12),     block = rep(1:4, each = 12),     wholeplot = rep(1:12, each = 4),     wholeplot_treatment = rep(rep(LETTERS[1:3], each = 4), times = 4),     subplot_treatment = rep(letters[1:4], 12)  ) head(split_plot_design) row col block wholeplot wholeplot_treatment subplot_treatment 1   1   1     1         1                   A                 a 2   1   2     1         1                   A                 b 3   1   3     1         1                   A                 c 4   1   4     1         1                   A                 d 5   2   1     1         2                   B                 a 6   2   2     1         2                   B                 b split_plot_result <- speed(split_plot_design,                            swap = list(wp = \"wholeplot_treatment\",                                        sp = \"subplot_treatment\"),                            swap_within = list(wp = \"block\", sp = \"wholeplot\"),                            seed = 42) row and col are used as row and column, respectively. Optimising level: wp Level: wp Iteration: 1000 Score: 100 Best: 100 Since Improvement: 1000 Level: wp Iteration: 2000 Score: 100 Best: 100 Since Improvement: 2000 Early stopping at iteration 2000 for level wp Optimising level: sp Early stopping at iteration 570 for level sp split_plot_result Optimised Experimental Design ---------------------------- Score: 100 Iterations Run: 2572 Stopped Early: TRUE TRUE Treatments:   wp: A, B, C   sp: a, b, c, d Seed: 42 str(split_plot_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    48 obs. of  6 variables:   ..$ row                : int [1:48] 1 1 1 1 2 2 2 2 3 3 ...   ..$ col                : int [1:48] 1 2 3 4 1 2 3 4 1 2 ...   ..$ block              : int [1:48] 1 1 1 1 1 1 1 1 1 1 ...   ..$ wholeplot          : int [1:48] 1 1 1 1 2 2 2 2 3 3 ...   ..$ wholeplot_treatment: chr [1:48] \"C\" \"C\" \"C\" \"C\" ...   ..$ subplot_treatment  : chr [1:48] \"a\" \"b\" \"c\" \"d\" ...  $ score         : num 100  $ scores        :List of 2   ..$ wp: num [1:2001] 100 104 104 104 104 104 104 104 100 100 ...   ..$ sp: num [1:571] 188 169 151 133 125 ...  $ temperatures  :List of 2   ..$ wp: num [1:2001] 100 99 98 97 96.1 ...   ..$ sp: num [1:571] 100 99 98 97 96.1 ...  $ iterations_run: num 2572  $ stopped_early : Named logi [1:2] TRUE TRUE   ..- attr(*, \"names\")= chr [1:2] \"wp\" \"sp\"  $ treatments    :List of 2   ..$ wp: chr [1:3] \"A\" \"B\" \"C\"   ..$ sp: chr [1:4] \"a\" \"b\" \"c\" \"d\"  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(split_plot_result, treatments = \"wholeplot_treatment\") autoplot(split_plot_result, treatments = \"subplot_treatment\", block = \"wholeplot\")"},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"overview-3","dir":"Articles","previous_headings":"","what":"Overview","title":"Common Agricultural Experimental Designs with speed","text":"Split-Plot Design used treatments easier apply large areas (whole plots) others require smaller areas (sub-plots). creates hierarchical structure different levels precision. Split-Plot Designs particularly useful agricultural experiments factors difficult expensive replicate whole plot level. designs possible speed package, allowing spatial optimisation whole plots sub-plots single step.","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"when-to-use-3","dir":"Articles","previous_headings":"","what":"When to Use","title":"Common Agricultural Experimental Designs with speed","text":"Treatments different application scales (large vs small plots) Irrigation × variety experiments Tillage × fertiliser studies treatments expensive difficult replicate","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"structure","dir":"Articles","previous_headings":"","what":"Structure","title":"Common Agricultural Experimental Designs with speed","text":"Whole plots: Larger experimental units (main treatments) Sub-plots: Smaller units within whole plots (sub-treatments) Different error terms different treatment levels","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"setting-up-split-plot-design-with-speed","dir":"Articles","previous_headings":"","what":"Setting Up Split Plot Design with speed","title":"Common Agricultural Experimental Designs with speed","text":"Now can create data frame representing split plot design. Note initalise_design_df function currently support split plot designs directly, create manually.   systematic split plot layout; treatment appears per block whole plot treatments, per whole plot sub-plot treatments. design now randomised. split-plot designs, use named lists specify hierarchical structure. swap parameter defines optimise level, swap_within defines constraints level. output shows optimisation results design. score iterations combined entire design, treatments, stopping criteria reported separately level, allowing assess quality optimisation hierarchy level.   design now optimised whole plot level sub-plot level.","code":"split_plot_design <- data.frame(     row = rep(1:12, each = 4),     col = rep(1:4, times = 12),     block = rep(1:4, each = 12),     wholeplot = rep(1:12, each = 4),     wholeplot_treatment = rep(rep(LETTERS[1:3], each = 4), times = 4),     subplot_treatment = rep(letters[1:4], 12)  ) head(split_plot_design) row col block wholeplot wholeplot_treatment subplot_treatment 1   1   1     1         1                   A                 a 2   1   2     1         1                   A                 b 3   1   3     1         1                   A                 c 4   1   4     1         1                   A                 d 5   2   1     1         2                   B                 a 6   2   2     1         2                   B                 b split_plot_result <- speed(split_plot_design,                            swap = list(wp = \"wholeplot_treatment\",                                        sp = \"subplot_treatment\"),                            swap_within = list(wp = \"block\", sp = \"wholeplot\"),                            seed = 42) row and col are used as row and column, respectively. Optimising level: wp Level: wp Iteration: 1000 Score: 100 Best: 100 Since Improvement: 1000 Level: wp Iteration: 2000 Score: 100 Best: 100 Since Improvement: 2000 Early stopping at iteration 2000 for level wp Optimising level: sp Early stopping at iteration 570 for level sp split_plot_result Optimised Experimental Design ---------------------------- Score: 100 Iterations Run: 2572 Stopped Early: TRUE TRUE Treatments:   wp: A, B, C   sp: a, b, c, d Seed: 42 str(split_plot_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    48 obs. of  6 variables:   ..$ row                : int [1:48] 1 1 1 1 2 2 2 2 3 3 ...   ..$ col                : int [1:48] 1 2 3 4 1 2 3 4 1 2 ...   ..$ block              : int [1:48] 1 1 1 1 1 1 1 1 1 1 ...   ..$ wholeplot          : int [1:48] 1 1 1 1 2 2 2 2 3 3 ...   ..$ wholeplot_treatment: chr [1:48] \"C\" \"C\" \"C\" \"C\" ...   ..$ subplot_treatment  : chr [1:48] \"a\" \"b\" \"c\" \"d\" ...  $ score         : num 100  $ scores        :List of 2   ..$ wp: num [1:2001] 100 104 104 104 104 104 104 104 100 100 ...   ..$ sp: num [1:571] 188 169 151 133 125 ...  $ temperatures  :List of 2   ..$ wp: num [1:2001] 100 99 98 97 96.1 ...   ..$ sp: num [1:571] 100 99 98 97 96.1 ...  $ iterations_run: num 2572  $ stopped_early : Named logi [1:2] TRUE TRUE   ..- attr(*, \"names\")= chr [1:2] \"wp\" \"sp\"  $ treatments    :List of 2   ..$ wp: chr [1:3] \"A\" \"B\" \"C\"   ..$ sp: chr [1:4] \"a\" \"b\" \"c\" \"d\"  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(split_plot_result, treatments = \"wholeplot_treatment\") autoplot(split_plot_result, treatments = \"subplot_treatment\", block = \"wholeplot\")"},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"performing-the-optimisation-3","dir":"Articles","previous_headings":"Split-Plot Design","what":"Performing the Optimisation","title":"Common Agricultural Experimental Designs with speed","text":"split-plot designs, use named lists specify hierarchical structure. swap parameter defines optimise level, swap_within defines constraints level.","code":"split_plot_result <- speed(split_plot_design,                            swap = list(wp = \"wholeplot_treatment\",                                        sp = \"subplot_treatment\"),                            swap_within = list(wp = \"block\", sp = \"wholeplot\"),                            seed = 42) row and col are used as row and column, respectively. Optimising level: wp Level: wp Iteration: 1000 Score: 100 Best: 100 Since Improvement: 1000 Level: wp Iteration: 2000 Score: 100 Best: 100 Since Improvement: 2000 Early stopping at iteration 2000 for level wp Optimising level: sp Early stopping at iteration 570 for level sp split_plot_result Optimised Experimental Design ---------------------------- Score: 100 Iterations Run: 2572 Stopped Early: TRUE TRUE Treatments:   wp: A, B, C   sp: a, b, c, d Seed: 42"},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"output-of-the-optimisation-3","dir":"Articles","previous_headings":"Split-Plot Design","what":"Output of the Optimisation","title":"Common Agricultural Experimental Designs with speed","text":"output shows optimisation results design. score iterations combined entire design, treatments, stopping criteria reported separately level, allowing assess quality optimisation hierarchy level.","code":"str(split_plot_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    48 obs. of  6 variables:   ..$ row                : int [1:48] 1 1 1 1 2 2 2 2 3 3 ...   ..$ col                : int [1:48] 1 2 3 4 1 2 3 4 1 2 ...   ..$ block              : int [1:48] 1 1 1 1 1 1 1 1 1 1 ...   ..$ wholeplot          : int [1:48] 1 1 1 1 2 2 2 2 3 3 ...   ..$ wholeplot_treatment: chr [1:48] \"C\" \"C\" \"C\" \"C\" ...   ..$ subplot_treatment  : chr [1:48] \"a\" \"b\" \"c\" \"d\" ...  $ score         : num 100  $ scores        :List of 2   ..$ wp: num [1:2001] 100 104 104 104 104 104 104 104 100 100 ...   ..$ sp: num [1:571] 188 169 151 133 125 ...  $ temperatures  :List of 2   ..$ wp: num [1:2001] 100 99 98 97 96.1 ...   ..$ sp: num [1:571] 100 99 98 97 96.1 ...  $ iterations_run: num 2572  $ stopped_early : Named logi [1:2] TRUE TRUE   ..- attr(*, \"names\")= chr [1:2] \"wp\" \"sp\"  $ treatments    :List of 2   ..$ wp: chr [1:3] \"A\" \"B\" \"C\"   ..$ sp: chr [1:4] \"a\" \"b\" \"c\" \"d\"  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"visualise-the-output-3","dir":"Articles","previous_headings":"Split-Plot Design","what":"Visualise the Output","title":"Common Agricultural Experimental Designs with speed","text":"design now optimised whole plot level sub-plot level.","code":"autoplot(split_plot_result, treatments = \"wholeplot_treatment\") autoplot(split_plot_result, treatments = \"subplot_treatment\", block = \"wholeplot\")"},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"spatial-design-considerations","dir":"Articles","previous_headings":"","what":"Spatial Design Considerations","title":"Common Agricultural Experimental Designs with speed","text":"shape orientation experimental field significantly impacts design efficiency: Long, narrow fields: Favour designs blocks perpendicular long axis Square fields: Allow flexibility blocking direction Irregular shapes: May require custom design approaches Agricultural experiments often experience neighbour effects adjacent plots influence : Competition effects: Tall varieties shading short ones Contamination: Fertiliser pesticide drift Root competition: Nutrient water competition plots speed package specifically addresses issues spatial optimisation. Consider including buffer areas border plots : Reduce edge effects minimise contamination treatments Provide realistic growing conditions","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"field-shape-and-orientation","dir":"Articles","previous_headings":"","what":"Field Shape and Orientation","title":"Common Agricultural Experimental Designs with speed","text":"shape orientation experimental field significantly impacts design efficiency: Long, narrow fields: Favour designs blocks perpendicular long axis Square fields: Allow flexibility blocking direction Irregular shapes: May require custom design approaches","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"neighbour-effects","dir":"Articles","previous_headings":"","what":"Neighbour Effects","title":"Common Agricultural Experimental Designs with speed","text":"Agricultural experiments often experience neighbour effects adjacent plots influence : Competition effects: Tall varieties shading short ones Contamination: Fertiliser pesticide drift Root competition: Nutrient water competition plots speed package specifically addresses issues spatial optimisation.","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"buffer-areas","dir":"Articles","previous_headings":"","what":"Buffer Areas","title":"Common Agricultural Experimental Designs with speed","text":"Consider including buffer areas border plots : Reduce edge effects minimise contamination treatments Provide realistic growing conditions","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"using-speed-effectively","dir":"Articles","previous_headings":"","what":"Using speed Effectively","title":"Common Agricultural Experimental Designs with speed","text":"Set appropriate parameters: Balance optimisation time improvement Visualise designs: Always plot layouts implementation Compare alternatives: Test multiple blocking strategies Validate results: Check constraint satisfaction efficiency metrics","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Common Agricultural Experimental Designs with speed","text":"speed package provides powerful tools creating spatially efficient experimental designs. optimising treatment arrangements, researchers can: Reduce neighbour effects spatial confounding Improve statistical power precision Maintain design validity balance Visualise evaluate design quality Whether using simple randomised designs complex split-plot structures, spatial optimisation speed can significantly enhance efficiency reliability agricultural experiments. Montgomery, D.C. (2017). Design Analysis Experiments Mead, R. (1988). Design Experiments John, J.. & Williams, E.R. (1995). Cyclic Computer Generated Designs Bailey, R.. (2008). Design Comparative Experiments vignette demonstrates versatility speed package agricultural experimental design. advanced applications custom designs, consult package documentation additional vignettes.","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Common Agricultural Experimental Designs with speed","text":"Montgomery, D.C. (2017). Design Analysis Experiments Mead, R. (1988). Design Experiments John, J.. & Williams, E.R. (1995). Cyclic Computer Generated Designs Bailey, R.. (2008). Design Comparative Experiments vignette demonstrates versatility speed package agricultural experimental design. advanced applications custom designs, consult package documentation additional vignettes.","code":""},{"path":"https://biometryhub.github.io/speed/articles/speed.html","id":"related-vignettes","dir":"Articles","previous_headings":"","what":"Related Vignettes","title":"Common Agricultural Experimental Designs with speed","text":"Complex Agricultural Experimental Designs speed: Advanced specialised designs, including split-split plot, strip-plot, incomplete block, p-rep, .","code":""},{"path":"https://biometryhub.github.io/speed/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam Rogers. Author, maintainer. Julian Taylor. Author. Russell Edson. Author. Wasin Pipattungsakul. Author. University Adelaide. Copyright holder, funder.           https://adelaide.edu.au/ Grains Research Development Corporation. Copyright holder, funder.           https://grdc.com.au/","code":""},{"path":"https://biometryhub.github.io/speed/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rogers S, Taylor J, Edson R, Pipattungsakul W (2025). speed: Generate Spatially Efficient Experimental Designs. R package version 0.0.2, https://biometryhub.github.io/speed/.","code":"@Manual{,   title = {speed: Generate Spatially Efficient Experimental Designs},   author = {Sam Rogers and Julian Taylor and Russell Edson and Wasin Pipattungsakul},   year = {2025},   note = {R package version 0.0.2},   url = {https://biometryhub.github.io/speed/}, }"},{"path":[]},{"path":"https://biometryhub.github.io/speed/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"Generate Spatially Efficient Experimental Designs","text":"Overview Installation Features Basic Blocked design Split-plot design Strip-plot design P-rep design BIBD Examples Citation License","code":""},{"path":"https://biometryhub.github.io/speed/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Generate Spatially Efficient Experimental Designs","text":"speed package optimises spatial experimental designs rearranging treatments improve statistical efficiency maintaining statistical validity. uses simulated annealing : Minimise treatment adjacency (reducing neighbour effects) Maintain spatial balance across rows columns Respect blocking constraints specified Provide visualisation tools design evaluation","code":""},{"path":"https://biometryhub.github.io/speed/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Spatially Efficient Experimental Designs","text":"can install development version speed GitHub :","code":"# pak if (!require(\"pak\", quietly = TRUE)) install.packages(\"pak\") pak::pak(\"biometryhub/speed\")  # devtools if (!require(\"devtools\", quietly = TRUE)) install.packages(\"devtools\") devtools::install_github(\"biometryhub/speed\")  # remotes if (!require(\"remotes\", quietly = TRUE)) install.packages(\"remotes\") remotes::install_github(\"biometryhub/speed\")"},{"path":"https://biometryhub.github.io/speed/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Generate Spatially Efficient Experimental Designs","text":"Flexible optimisation experimental designs Support blocked designs Customisable optimisation parameters Built-visualisation functions Progress tracking optimisation Early stopping convergence reached See package documentation detailed examples options.","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/index.html","id":"basic","dir":"","previous_headings":"Example","what":"Basic","title":"Generate Spatially Efficient Experimental Designs","text":"simple example optimising 4×3 completely randomised design 4 treatments:","code":"library(speed)  # Create a simple design with 3 replicates of 4 treatments df <- data.frame(   row = rep(1:4, each = 3),   col = rep(1:3, times = 4),   treatment = rep(LETTERS[1:4], each = 3) )  # Optimise the design with seed for reproducibility result <- speed(df, \"treatment\", seed = 42) #> row and col are used as row and column, respectively. #> Iteration: 1000 Score: 1 Best: 1 Since Improvement: 475  #> Iteration: 2000 Score: 1 Best: 1 Since Improvement: 1475  #> Early stopping at iteration 2525  # Plot the optimised design autoplot(result) # View optimisation progress plot_progress(result)"},{"path":"https://biometryhub.github.io/speed/index.html","id":"blocked-design","dir":"","previous_headings":"Example","what":"Blocked design","title":"Generate Spatially Efficient Experimental Designs","text":"can also optimise designs within blocks:","code":"# Create a design with blocks df <- data.frame(   row = rep(1:6, each = 4),   col = rep(1:4, times = 6),   treatment = rep(LETTERS[1:8], 3),   block = rep(1:3, each = 8) )  # Optimise while respecting blocks result <- speed(df,   \"treatment\",   swap_within = \"block\",   iterations = 5000,   seed = 42 ) #> row and col are used as row and column, respectively. #> Iteration: 1000 Score: 2.571429 Best: 2.571429 Since Improvement: 543  #> Iteration: 2000 Score: 2.571429 Best: 2.571429 Since Improvement: 1543  #> Early stopping at iteration 2457  # Plot the design with block boundaries autoplot(result)"},{"path":"https://biometryhub.github.io/speed/index.html","id":"more-examples","dir":"","previous_headings":"Example","what":"More Examples","title":"Generate Spatially Efficient Experimental Designs","text":"detailed examples, see getting started vignette vignette complex examples including, limited : Split-plot design Strip-plot design P-rep design BIBD","code":""},{"path":"https://biometryhub.github.io/speed/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Generate Spatially Efficient Experimental Designs","text":"use speed research, please cite:","code":"Warning in citation(\"speed\"): could not determine year for 'speed' from package DESCRIPTION file To cite package 'speed' in publications use:    Rogers S, Taylor J, Edson R, Pipattungsakul W (????). _speed:   Generate Spatially Efficient Experimental Designs_. R package version   0.0.2, <https://biometryhub.github.io/speed/>.  A BibTeX entry for LaTeX users is    @Manual{,     title = {speed: Generate Spatially Efficient Experimental Designs},     author = {Sam Rogers and Julian Taylor and Russell Edson and Wasin Pipattungsakul},     note = {R package version 0.0.2},     url = {https://biometryhub.github.io/speed/},   }"},{"path":"https://biometryhub.github.io/speed/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Generate Spatially Efficient Experimental Designs","text":"project licensed MIT License - see LICENSE file details.","code":""},{"path":"https://biometryhub.github.io/speed/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Generate Spatially Efficient Experimental Designs","text":"Please note speed project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://biometryhub.github.io/speed/reference/add_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Names to A List — add_names","title":"Add Names to A List — add_names","text":"Add names list exist fill missing names.","code":""},{"path":"https://biometryhub.github.io/speed/reference/add_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Names to A List — add_names","text":"","code":"add_names(a_list)"},{"path":"https://biometryhub.github.io/speed/reference/add_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Names to A List — add_names","text":"a_list list","code":""},{"path":"https://biometryhub.github.io/speed/reference/add_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Names to A List — add_names","text":"named list","code":""},{"path":"https://biometryhub.github.io/speed/reference/as_numeric_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Factor to Numeric — as_numeric_factor","title":"Convert Factor to Numeric — as_numeric_factor","text":"Convert Factor Numeric","code":""},{"path":"https://biometryhub.github.io/speed/reference/as_numeric_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Factor to Numeric — as_numeric_factor","text":"","code":"as_numeric_factor(x)"},{"path":"https://biometryhub.github.io/speed/reference/as_numeric_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Factor to Numeric — as_numeric_factor","text":"x factor","code":""},{"path":"https://biometryhub.github.io/speed/reference/as_numeric_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Factor to Numeric — as_numeric_factor","text":"numeric vector","code":""},{"path":"https://biometryhub.github.io/speed/reference/autoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate plots for designs generated in speed — autoplot","title":"Generate plots for designs generated in speed — autoplot","text":"Generate plots designs generated speed","code":""},{"path":"https://biometryhub.github.io/speed/reference/autoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate plots for designs generated in speed — autoplot","text":"","code":"autoplot(object, ...)  # S3 method for class 'design' autoplot(   object,   rotation = 0,   size = 4,   margin = FALSE,   palette = \"default\",   buffer = NULL,   row = NULL,   column = NULL,   block = NULL,   treatments = NULL,   legend = FALSE,   ... )"},{"path":"https://biometryhub.github.io/speed/reference/autoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate plots for designs generated in speed — autoplot","text":"object experimental design object generated speed(). ... Arguments passed methods. rotation Rotate x axis labels treatment group labels within plot. Allows easier reading long axis treatment labels. Number 0 360 (inclusive) - default 0 size Increase decrease text size within plot treatment labels. Numeric default value 4. margin Logical (default FALSE). value FALSE expand plot edges plotting area .e. remove white space plot axes. palette string specifying colour scheme use plotting vector custom colours use palette. Default equivalent \"Spectral\". Colour blind friendly palettes can also provided via options \"colour blind\" (\"color blind\", equivalent \"viridis\"), \"magma\", \"inferno\", \"plasma\", \"cividis\", \"rocket\", \"mako\" \"turbo\". palettes scales::brewer_pal() also possible. buffer string specifying buffer plots include plotting. Default NULL (buffers plotted). options \"edge\" (outer edge trial area), \"rows\" (rows), \"columns\" (columns), \"double row\" (buffer row side treatment row) \"double column\" (buffer row side treatment column). \"blocks\" (buffer around treatment block) implemented future release. row variable plot column object rows. column variable plot column object columns. block variable plot column object blocks. treatments variable plot column object treatments. legend Logical (default FALSE). TRUE, displays legend treatment colors.","code":""},{"path":"https://biometryhub.github.io/speed/reference/autoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate plots for designs generated in speed — autoplot","text":"ggplot2 object.","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/autoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate plots for designs generated in speed — autoplot","text":"","code":"# Create a design with blocks df <- data.frame(      row = rep(1:6, each = 4),      col = rep(1:4, times = 6),      treatment = rep(LETTERS[1:8], 3),      block = rep(1:3, each = 8))  # Optimise while respecting blocks result <- speed(df,                 \"treatment\",                 swap_within = \"block\",                 seed = 42) #> row and col are used as row and column, respectively. #> Iteration: 1000 Score: 2.571429 Best: 2.571429 Since Improvement: 543  #> Iteration: 2000 Score: 2.571429 Best: 2.571429 Since Improvement: 1543  #> Early stopping at iteration 2457   # Plot the design with block boundaries autoplot(result)   # Show legend autoplot(result, legend = TRUE)   # Colour blind friendly colours autoplot(result, palette = \"colour-blind\")   # Alternative colour scheme autoplot(result, palette = \"plasma\")   # Custom colour palette autoplot(result, palette = c(\"#ef746a\", \"#3fbfc5\", \"#81ae00\", \"#c37cff\",                              \"#304702\", \"#dde024\", \"#630380ff\", \"#df7700\"))"},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Adjacency Score for Design — calculate_adjacency_score","title":"Calculate Adjacency Score for Design — calculate_adjacency_score","text":"Calculates adjacency score given experimental design. adjacency score represents number adjacent plots treatment. Lower scores indicate better separation treatments.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Adjacency Score for Design — calculate_adjacency_score","text":"","code":"calculate_adjacency_score(   layout_df,   swap,   row_column = \"row\",   col_column = \"col\" )"},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Adjacency Score for Design — calculate_adjacency_score","text":"layout_df data frame representing current design swap column name items swapped row_column Name column representing row design (default: \"row\") col_column Name column representing column design (default: \"col\")","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Adjacency Score for Design — calculate_adjacency_score","text":"Numeric score treatment adjacencies (lower better)","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Adjacency Score for Design — calculate_adjacency_score","text":"","code":"# Example 1: Design with no adjacencies design_no_adj <- data.frame(   row = c(1, 1, 1, 2, 2, 2, 3, 3, 3),   col = c(1, 2, 3, 1, 2, 3, 1, 2, 3),   treatment = c(\"A\", \"B\", \"A\", \"B\", \"A\", \"B\", \"A\", \"B\", \"A\") )  # Gives 0 calculate_adjacency_score(design_no_adj, \"treatment\") #> [1] 0  # Example 2: Design with adjacencies design_with_adj <- data.frame(   row = c(1, 1, 1, 2, 2, 2, 3, 3, 3),   col = c(1, 2, 3, 1, 2, 3, 1, 2, 3),   treatment = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"A\", \"A\", \"A\") )  # Gives value 6 calculate_adjacency_score(design_with_adj, \"treatment\") #> [1] 6"},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Balance Score for Experimental Design — calculate_balance_score","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"Calculates balance score measures evenly treatments distributed across spatial factors experimental design. Lower scores indicate better balance.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"","code":"calculate_balance_score(layout_df, swap, spatial_cols)"},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"layout_df data frame representing current design swap column name items swapped spatial_cols Column name(s) spatial factors","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"Numeric value representing total balance score. Lower values indicate better balance treatments across spatial factors.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"","code":"layout_df <- data.frame(   row = rep(1:3, each = 3),   col = rep(1:3, times = 3),   treatment = rep(letters[1:3], 3) ) calculate_balance_score(layout_df, \"treatment\", c(\"row\", \"col\")) #> [1] 9"},{"path":"https://biometryhub.github.io/speed/reference/calculate_ed.html","id":null,"dir":"Reference","previous_headings":"","what":"Even Distribution Calculation — calculate_ed","title":"Even Distribution Calculation — calculate_ed","text":"metric represents even distribution item minimum spanning tree (mst).","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_ed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Even Distribution Calculation — calculate_ed","text":"","code":"calculate_ed(design_matrix, current_ed = NULL, swapped_items = NULL)"},{"path":"https://biometryhub.github.io/speed/reference/calculate_ed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Even Distribution Calculation — calculate_ed","text":"design_matrix matrix representing design current_ed Named list current ed calculation swapped_items items just swapped","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_ed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Even Distribution Calculation — calculate_ed","text":"Named list containing: - Named list containing: msts - Named list items mst min_mst - lowest mst min_items - Pairs items lowest mst","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/calculate_ed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Even Distribution Calculation — calculate_ed","text":"","code":"design_matrix <- matrix(c(1, 2, 2, 1, 3, 3, 1, 3, 3), nrow = 3, ncol = 3) calculate_ed(design_matrix) #> $`2` #> $`2`$msts #> $`2`$msts$`2` #> [1] 1 #>  #>  #> $`2`$min_mst #> [1] 1 #>  #> $`2`$min_items #> [1] \"2\" #>  #>  #> $`4` #> $`4`$msts #> $`4`$msts$`3` #> [1] 3 #>  #>  #> $`4`$min_mst #> [1] 3 #>  #> $`4`$min_items #> [1] \"3\" #>  #>  #> $`3` #> $`3`$msts #> $`3`$msts$`1` #> [1] 2 #>  #>  #> $`3`$min_mst #> [1] 2 #>  #> $`3`$min_items #> [1] \"1\" #>  #>"},{"path":"https://biometryhub.github.io/speed/reference/calculate_efficiency_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Efficiency Factor according Piepho — calculate_efficiency_factor","title":"Calculate Efficiency Factor according Piepho — calculate_efficiency_factor","text":"Calculates efficiency factor design according Piepho 2015.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_efficiency_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Efficiency Factor according Piepho — calculate_efficiency_factor","text":"","code":"calculate_efficiency_factor(design_df, item)"},{"path":"https://biometryhub.github.io/speed/reference/calculate_efficiency_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Efficiency Factor according Piepho — calculate_efficiency_factor","text":"design_df data frame containing experimental design spatial coordinates item column name items design (e.g., treatment, variety, genotype, etc)","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_efficiency_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Efficiency Factor according Piepho — calculate_efficiency_factor","text":"numeric value representing efficiency factor design. Higher values indicate efficient designs.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_efficiency_factor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Efficiency Factor according Piepho — calculate_efficiency_factor","text":"Piepho, H. P., Williams, E., & Michel, V. (2015). Nonresolvable Row-Column Designs Even Distribution Treatment Replications. Journal Agricultural, Biological, Environmental Statistics, 21, 227-242 (2016). https://doi.org/10.1007/s13253-015-0241-2","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_efficiency_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Efficiency Factor according Piepho — calculate_efficiency_factor","text":"","code":"df_design <- initialise_design_df(c(   \"a\", \"b\", \"d\", \"c\",   \"e\", \"a\", \"f\", \"b\",   \"c\", \"f\", \"e\", \"d\" ), 3, 4)  calculate_efficiency_factor(df_design, \"treatment\") #> [1] 0.6268657"},{"path":"https://biometryhub.github.io/speed/reference/calculate_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighbour Balance Calculation — calculate_nb","title":"Neighbour Balance Calculation — calculate_nb","text":"metric counts occurrence adjacent pairs. horizontal vertical pairs counted.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighbour Balance Calculation — calculate_nb","text":"","code":"calculate_nb(design_matrix, pair_mapping = NULL)"},{"path":"https://biometryhub.github.io/speed/reference/calculate_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighbour Balance Calculation — calculate_nb","text":"design_matrix matrix representing design pair_mapping named vector pairs generated create_pair_mapping","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neighbour Balance Calculation — calculate_nb","text":"Named list containing: nb - Table pairs items number occurrence max_nb - highest number occurrence max_pairs - Vector pairs items highest number occurrence","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/calculate_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Neighbour Balance Calculation — calculate_nb","text":"","code":"design_matrix <- matrix(c(1, 2, 2, 1, 3, 3, 1, 3, 3), nrow = 3, ncol = 3) calculate_nb(design_matrix) #> $nb #> $nb$`3,3` #> [1] 4 #>  #> $nb$`2,2` #> [1] 1 #>  #> $nb$`2,3` #> [1] 2 #>  #> $nb$`1,1` #> [1] 2 #>  #> $nb$`1,2` #> [1] 1 #>  #> $nb$`1,3` #> [1] 2 #>  #>  #> $max_nb #> [1] 4 #>  #> $max_pairs #> [1] \"3,3\" #>  #> $var #> [1] 1.2 #>"},{"path":"https://biometryhub.github.io/speed/reference/create_pair_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Pair Mapping — create_pair_mapping","title":"Create Pair Mapping — create_pair_mapping","text":"Create item pair mapping calculate_nb.","code":""},{"path":"https://biometryhub.github.io/speed/reference/create_pair_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Pair Mapping — create_pair_mapping","text":"","code":"create_pair_mapping(items)"},{"path":"https://biometryhub.github.io/speed/reference/create_pair_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Pair Mapping — create_pair_mapping","text":"items Vector items design","code":""},{"path":"https://biometryhub.github.io/speed/reference/create_pair_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Pair Mapping — create_pair_mapping","text":"Named vector item pairs character separated \",\": \"<item 2>,<item 1>\" - \"<item 1>,<item 2>\" \"<item 3>,<item 1>\" - \"<item 1>,<item 3>\" ... \",<item 1>\" - \"<item 1>,\" \",<item 1>\" - \"<item 1>,\" \"<item 3>,<item 2>\" - \"<item 2>,<item 3>\" \"<item 4>,<item 2>\" - \"<item 2>,<item 4>\" ... \",<item 2>\" - \"<item 2>,\" \",<item 2>\" - \"<item 2>,\" ... \",\" - \",\" \"<item 1>,<item 1>\" - \"<item 1>,<item 1>\" \"<item 2>,<item 2>\" - \"<item 2>,<item 2>\" ... \",\" - \",\" \",\" - \",\"","code":""},{"path":"https://biometryhub.github.io/speed/reference/create_pair_mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Pair Mapping — create_pair_mapping","text":"","code":"treatments <- c(rep(1:10, 4), rep(11:16, 3), rep(17:27, 2)) create_pair_mapping(treatments) #>     2,1     3,1     4,1     5,1     6,1     7,1     8,1     9,1    10,1    11,1  #>   \"1,2\"   \"1,3\"   \"1,4\"   \"1,5\"   \"1,6\"   \"1,7\"   \"1,8\"   \"1,9\"  \"1,10\"  \"1,11\"  #>    12,1    13,1    14,1    15,1    16,1    17,1    18,1    19,1    20,1    21,1  #>  \"1,12\"  \"1,13\"  \"1,14\"  \"1,15\"  \"1,16\"  \"1,17\"  \"1,18\"  \"1,19\"  \"1,20\"  \"1,21\"  #>    22,1    23,1    24,1    25,1    26,1    27,1     3,2     4,2     5,2     6,2  #>  \"1,22\"  \"1,23\"  \"1,24\"  \"1,25\"  \"1,26\"  \"1,27\"   \"2,3\"   \"2,4\"   \"2,5\"   \"2,6\"  #>     7,2     8,2     9,2    10,2    11,2    12,2    13,2    14,2    15,2    16,2  #>   \"2,7\"   \"2,8\"   \"2,9\"  \"2,10\"  \"2,11\"  \"2,12\"  \"2,13\"  \"2,14\"  \"2,15\"  \"2,16\"  #>    17,2    18,2    19,2    20,2    21,2    22,2    23,2    24,2    25,2    26,2  #>  \"2,17\"  \"2,18\"  \"2,19\"  \"2,20\"  \"2,21\"  \"2,22\"  \"2,23\"  \"2,24\"  \"2,25\"  \"2,26\"  #>    27,2     4,3     5,3     6,3     7,3     8,3     9,3    10,3    11,3    12,3  #>  \"2,27\"   \"3,4\"   \"3,5\"   \"3,6\"   \"3,7\"   \"3,8\"   \"3,9\"  \"3,10\"  \"3,11\"  \"3,12\"  #>    13,3    14,3    15,3    16,3    17,3    18,3    19,3    20,3    21,3    22,3  #>  \"3,13\"  \"3,14\"  \"3,15\"  \"3,16\"  \"3,17\"  \"3,18\"  \"3,19\"  \"3,20\"  \"3,21\"  \"3,22\"  #>    23,3    24,3    25,3    26,3    27,3     5,4     6,4     7,4     8,4     9,4  #>  \"3,23\"  \"3,24\"  \"3,25\"  \"3,26\"  \"3,27\"   \"4,5\"   \"4,6\"   \"4,7\"   \"4,8\"   \"4,9\"  #>    10,4    11,4    12,4    13,4    14,4    15,4    16,4    17,4    18,4    19,4  #>  \"4,10\"  \"4,11\"  \"4,12\"  \"4,13\"  \"4,14\"  \"4,15\"  \"4,16\"  \"4,17\"  \"4,18\"  \"4,19\"  #>    20,4    21,4    22,4    23,4    24,4    25,4    26,4    27,4     6,5     7,5  #>  \"4,20\"  \"4,21\"  \"4,22\"  \"4,23\"  \"4,24\"  \"4,25\"  \"4,26\"  \"4,27\"   \"5,6\"   \"5,7\"  #>     8,5     9,5    10,5    11,5    12,5    13,5    14,5    15,5    16,5    17,5  #>   \"5,8\"   \"5,9\"  \"5,10\"  \"5,11\"  \"5,12\"  \"5,13\"  \"5,14\"  \"5,15\"  \"5,16\"  \"5,17\"  #>    18,5    19,5    20,5    21,5    22,5    23,5    24,5    25,5    26,5    27,5  #>  \"5,18\"  \"5,19\"  \"5,20\"  \"5,21\"  \"5,22\"  \"5,23\"  \"5,24\"  \"5,25\"  \"5,26\"  \"5,27\"  #>     7,6     8,6     9,6    10,6    11,6    12,6    13,6    14,6    15,6    16,6  #>   \"6,7\"   \"6,8\"   \"6,9\"  \"6,10\"  \"6,11\"  \"6,12\"  \"6,13\"  \"6,14\"  \"6,15\"  \"6,16\"  #>    17,6    18,6    19,6    20,6    21,6    22,6    23,6    24,6    25,6    26,6  #>  \"6,17\"  \"6,18\"  \"6,19\"  \"6,20\"  \"6,21\"  \"6,22\"  \"6,23\"  \"6,24\"  \"6,25\"  \"6,26\"  #>    27,6     8,7     9,7    10,7    11,7    12,7    13,7    14,7    15,7    16,7  #>  \"6,27\"   \"7,8\"   \"7,9\"  \"7,10\"  \"7,11\"  \"7,12\"  \"7,13\"  \"7,14\"  \"7,15\"  \"7,16\"  #>    17,7    18,7    19,7    20,7    21,7    22,7    23,7    24,7    25,7    26,7  #>  \"7,17\"  \"7,18\"  \"7,19\"  \"7,20\"  \"7,21\"  \"7,22\"  \"7,23\"  \"7,24\"  \"7,25\"  \"7,26\"  #>    27,7     9,8    10,8    11,8    12,8    13,8    14,8    15,8    16,8    17,8  #>  \"7,27\"   \"8,9\"  \"8,10\"  \"8,11\"  \"8,12\"  \"8,13\"  \"8,14\"  \"8,15\"  \"8,16\"  \"8,17\"  #>    18,8    19,8    20,8    21,8    22,8    23,8    24,8    25,8    26,8    27,8  #>  \"8,18\"  \"8,19\"  \"8,20\"  \"8,21\"  \"8,22\"  \"8,23\"  \"8,24\"  \"8,25\"  \"8,26\"  \"8,27\"  #>    10,9    11,9    12,9    13,9    14,9    15,9    16,9    17,9    18,9    19,9  #>  \"9,10\"  \"9,11\"  \"9,12\"  \"9,13\"  \"9,14\"  \"9,15\"  \"9,16\"  \"9,17\"  \"9,18\"  \"9,19\"  #>    20,9    21,9    22,9    23,9    24,9    25,9    26,9    27,9   11,10   12,10  #>  \"9,20\"  \"9,21\"  \"9,22\"  \"9,23\"  \"9,24\"  \"9,25\"  \"9,26\"  \"9,27\" \"10,11\" \"10,12\"  #>   13,10   14,10   15,10   16,10   17,10   18,10   19,10   20,10   21,10   22,10  #> \"10,13\" \"10,14\" \"10,15\" \"10,16\" \"10,17\" \"10,18\" \"10,19\" \"10,20\" \"10,21\" \"10,22\"  #>   23,10   24,10   25,10   26,10   27,10   12,11   13,11   14,11   15,11   16,11  #> \"10,23\" \"10,24\" \"10,25\" \"10,26\" \"10,27\" \"11,12\" \"11,13\" \"11,14\" \"11,15\" \"11,16\"  #>   17,11   18,11   19,11   20,11   21,11   22,11   23,11   24,11   25,11   26,11  #> \"11,17\" \"11,18\" \"11,19\" \"11,20\" \"11,21\" \"11,22\" \"11,23\" \"11,24\" \"11,25\" \"11,26\"  #>   27,11   13,12   14,12   15,12   16,12   17,12   18,12   19,12   20,12   21,12  #> \"11,27\" \"12,13\" \"12,14\" \"12,15\" \"12,16\" \"12,17\" \"12,18\" \"12,19\" \"12,20\" \"12,21\"  #>   22,12   23,12   24,12   25,12   26,12   27,12   14,13   15,13   16,13   17,13  #> \"12,22\" \"12,23\" \"12,24\" \"12,25\" \"12,26\" \"12,27\" \"13,14\" \"13,15\" \"13,16\" \"13,17\"  #>   18,13   19,13   20,13   21,13   22,13   23,13   24,13   25,13   26,13   27,13  #> \"13,18\" \"13,19\" \"13,20\" \"13,21\" \"13,22\" \"13,23\" \"13,24\" \"13,25\" \"13,26\" \"13,27\"  #>   15,14   16,14   17,14   18,14   19,14   20,14   21,14   22,14   23,14   24,14  #> \"14,15\" \"14,16\" \"14,17\" \"14,18\" \"14,19\" \"14,20\" \"14,21\" \"14,22\" \"14,23\" \"14,24\"  #>   25,14   26,14   27,14   16,15   17,15   18,15   19,15   20,15   21,15   22,15  #> \"14,25\" \"14,26\" \"14,27\" \"15,16\" \"15,17\" \"15,18\" \"15,19\" \"15,20\" \"15,21\" \"15,22\"  #>   23,15   24,15   25,15   26,15   27,15   17,16   18,16   19,16   20,16   21,16  #> \"15,23\" \"15,24\" \"15,25\" \"15,26\" \"15,27\" \"16,17\" \"16,18\" \"16,19\" \"16,20\" \"16,21\"  #>   22,16   23,16   24,16   25,16   26,16   27,16   18,17   19,17   20,17   21,17  #> \"16,22\" \"16,23\" \"16,24\" \"16,25\" \"16,26\" \"16,27\" \"17,18\" \"17,19\" \"17,20\" \"17,21\"  #>   22,17   23,17   24,17   25,17   26,17   27,17   19,18   20,18   21,18   22,18  #> \"17,22\" \"17,23\" \"17,24\" \"17,25\" \"17,26\" \"17,27\" \"18,19\" \"18,20\" \"18,21\" \"18,22\"  #>   23,18   24,18   25,18   26,18   27,18   20,19   21,19   22,19   23,19   24,19  #> \"18,23\" \"18,24\" \"18,25\" \"18,26\" \"18,27\" \"19,20\" \"19,21\" \"19,22\" \"19,23\" \"19,24\"  #>   25,19   26,19   27,19   21,20   22,20   23,20   24,20   25,20   26,20   27,20  #> \"19,25\" \"19,26\" \"19,27\" \"20,21\" \"20,22\" \"20,23\" \"20,24\" \"20,25\" \"20,26\" \"20,27\"  #>   22,21   23,21   24,21   25,21   26,21   27,21   23,22   24,22   25,22   26,22  #> \"21,22\" \"21,23\" \"21,24\" \"21,25\" \"21,26\" \"21,27\" \"22,23\" \"22,24\" \"22,25\" \"22,26\"  #>   27,22   24,23   25,23   26,23   27,23   25,24   26,24   27,24   26,25   27,25  #> \"22,27\" \"23,24\" \"23,25\" \"23,26\" \"23,27\" \"24,25\" \"24,26\" \"24,27\" \"25,26\" \"25,27\"  #>   27,26     1,1     2,2     3,3     4,4     5,5     6,6     7,7     8,8     9,9  #> \"26,27\"   \"1,1\"   \"2,2\"   \"3,3\"   \"4,4\"   \"5,5\"   \"6,6\"   \"7,7\"   \"8,8\"   \"9,9\"  #>   10,10   11,11   12,12   13,13   14,14   15,15   16,16   17,17   18,18   19,19  #> \"10,10\" \"11,11\" \"12,12\" \"13,13\" \"14,14\" \"15,15\" \"16,16\" \"17,17\" \"18,18\" \"19,19\"  #>   20,20   21,21   22,22   23,23   24,24   25,25   26,26   27,27  #> \"20,20\" \"21,21\" \"22,22\" \"23,23\" \"24,24\" \"25,25\" \"26,26\" \"27,27\""},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_ed_3_reps.html","id":null,"dir":"Reference","previous_headings":"","what":"Even Distribution Calculation for 3 Replications — .calculate_ed_3_reps","title":"Even Distribution Calculation for 3 Replications — .calculate_ed_3_reps","text":"metric represents even distribution items 3 replications minimum spanning tree (mst).","code":""},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_ed_3_reps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Even Distribution Calculation for 3 Replications — .calculate_ed_3_reps","text":"","code":".calculate_ed_3_reps(edges, current_ed = NULL)"},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_ed_3_reps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Even Distribution Calculation for 3 Replications — .calculate_ed_3_reps","text":"edges list vectors edge weights","code":""},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_ed_3_reps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Even Distribution Calculation for 3 Replications — .calculate_ed_3_reps","text":"Named list containing: msts - Named list pairs items mst min_mst - lowest mst min_items - Pairs items lowest mst","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighbor Balance Calculation without Pair Mapping — .calculate_nb","title":"Neighbor Balance Calculation without Pair Mapping — .calculate_nb","text":"metric counts occurrence adjacent pairs. horizontal vertical pairs counted.","code":""},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighbor Balance Calculation without Pair Mapping — .calculate_nb","text":"","code":".calculate_nb(design_matrix)"},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighbor Balance Calculation without Pair Mapping — .calculate_nb","text":"design_matrix matrix representing design","code":""},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neighbor Balance Calculation without Pair Mapping — .calculate_nb","text":"Named list containing: nb - Named list pairs items number occurrence max_nb - highest number occurrence max_pairs - Vector pairs items highest number occurrence","code":""},{"path":"https://biometryhub.github.io/speed/reference/env_add_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Add One to Environment — env_add_one","title":"Add One to Environment — env_add_one","text":"Add one value key environment exists, otherwise set one key.","code":""},{"path":"https://biometryhub.github.io/speed/reference/env_add_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add One to Environment — env_add_one","text":"","code":"env_add_one(env, key)"},{"path":"https://biometryhub.github.io/speed/reference/env_add_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add One to Environment — env_add_one","text":"env environment key key environment","code":""},{"path":"https://biometryhub.github.io/speed/reference/generate_neighbour.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Neighbour Design by Swapping Treatments — generate_neighbour","title":"Generate a Neighbour Design by Swapping Treatments — generate_neighbour","text":"Generate Neighbour Design Swapping Treatments","code":""},{"path":"https://biometryhub.github.io/speed/reference/generate_neighbour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Neighbour Design by Swapping Treatments — generate_neighbour","text":"","code":"generate_neighbour(   design,   swap,   swap_within,   level = NULL,   swap_count = getOption(\"speed.swap_count\", 1),   swap_all_blocks = getOption(\"speed.swap_all_blocks\", FALSE) )"},{"path":"https://biometryhub.github.io/speed/reference/generate_neighbour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Neighbour Design by Swapping Treatments — generate_neighbour","text":"design Data frame containing current design swap Column name treatment swap, named list hierarchical designs swap_within Column name defining groups within swap treatments, named list hierarchical designs level level design optimised current loop. Relevant sequential designs. Simple designs pass NULL. swap_count Number swaps perform swap_all_blocks Whether perform swaps blocks just one","code":""},{"path":"https://biometryhub.github.io/speed/reference/generate_neighbour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Neighbour Design by Swapping Treatments — generate_neighbour","text":"list updated design swapping information swapped items","code":""},{"path":"https://biometryhub.github.io/speed/reference/generate_sequential_neighbour.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate neighbour for sequential or hierarchical designs — generate_sequential_neighbour","title":"Generate neighbour for sequential or hierarchical designs — generate_sequential_neighbour","text":"Generate neighbour sequential hierarchical designs","code":""},{"path":"https://biometryhub.github.io/speed/reference/generate_sequential_neighbour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate neighbour for sequential or hierarchical designs — generate_sequential_neighbour","text":"","code":"generate_sequential_neighbour(   design,   swap,   swap_within,   level,   swap_count,   swap_all_blocks )"},{"path":"https://biometryhub.github.io/speed/reference/generate_simple_neighbour.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate neighbour for simple (non-hierarchical) designs — generate_simple_neighbour","title":"Generate neighbour for simple (non-hierarchical) designs — generate_simple_neighbour","text":"Generate neighbour simple (non-hierarchical) designs","code":""},{"path":"https://biometryhub.github.io/speed/reference/generate_simple_neighbour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate neighbour for simple (non-hierarchical) designs — generate_simple_neighbour","text":"","code":"generate_simple_neighbour(   design,   swap,   swap_within,   level,   swap_count,   swap_all_blocks )"},{"path":"https://biometryhub.github.io/speed/reference/get_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Weighted Edges — get_edges","title":"Get Weighted Edges — get_edges","text":"Calculate weight edges vertices.","code":""},{"path":"https://biometryhub.github.io/speed/reference/get_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Weighted Edges — get_edges","text":"","code":"get_edges(vertices)"},{"path":"https://biometryhub.github.io/speed/reference/get_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Weighted Edges — get_edges","text":"vertices Named list vertices containing: - list (vertex 1, vertex 2, ...)","code":""},{"path":"https://biometryhub.github.io/speed/reference/get_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Weighted Edges — get_edges","text":"Named list containing: - vector edge weights","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/get_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Weighted Edges — get_edges","text":"","code":"design_matrix <- matrix(c(1, 2, 2, 1, 3, 2, 1, 3, 3), nrow = 3, ncol = 3) vertices <- get_vertices(design_matrix) edges <- get_edges(vertices)"},{"path":"https://biometryhub.github.io/speed/reference/get_vertices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Vertices of Each Item — get_vertices","title":"Get Vertices of Each Item — get_vertices","text":"Get vertices item design matrix.","code":""},{"path":"https://biometryhub.github.io/speed/reference/get_vertices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Vertices of Each Item — get_vertices","text":"","code":"get_vertices(design_matrix)"},{"path":"https://biometryhub.github.io/speed/reference/get_vertices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Vertices of Each Item — get_vertices","text":"design_matrix matrix representing design","code":""},{"path":"https://biometryhub.github.io/speed/reference/get_vertices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Vertices of Each Item — get_vertices","text":"Named list containing: - list (vertex 1, vertex 2, ...)","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/get_vertices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Vertices of Each Item — get_vertices","text":"","code":"design_matrix <- matrix(c(1, 2, 2, 1, 3, 2, 1, 3, 3), nrow = 3, ncol = 3) vertices <- get_vertices(design_matrix)"},{"path":"https://biometryhub.github.io/speed/reference/infer_row_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer 'row' and 'col' with Patterns — infer_row_col","title":"Infer 'row' and 'col' with Patterns — infer_row_col","text":"Infer data frame names patterns determine variations 'row' 'col' columns exist.","code":""},{"path":"https://biometryhub.github.io/speed/reference/infer_row_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer 'row' and 'col' with Patterns — infer_row_col","text":"","code":"infer_row_col(   layout_df,   grid_factors = list(dim1 = \"row\", dim2 = \"col\"),   quiet = FALSE )"},{"path":"https://biometryhub.github.io/speed/reference/infer_row_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer 'row' and 'col' with Patterns — infer_row_col","text":"layout_df data frame representing current design grid_factors named list specifying grid factors construct matrix calculating adjacency score, dim1 row dim2 column. (default: list(dim1 = \"row\", dim2 = \"col\")). quiet Logical (default: FALSE). TRUE, output suppressed.","code":""},{"path":"https://biometryhub.github.io/speed/reference/infer_row_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer 'row' and 'col' with Patterns — infer_row_col","text":"list containing: inferred - Logical; TRUE, row column columns inferred data frame row - Name row column col - Name column column","code":""},{"path":"https://biometryhub.github.io/speed/reference/initialise_design_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialise Design Data Frame — initialise_design_df","title":"Initialise Design Data Frame — initialise_design_df","text":"Initialise design data frame without blocking.","code":""},{"path":"https://biometryhub.github.io/speed/reference/initialise_design_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialise Design Data Frame — initialise_design_df","text":"","code":"initialise_design_df(   items = NULL,   nrows = NULL,   ncols = NULL,   block_nrows = NULL,   block_ncols = NULL,   designs = NULL,   design_col = \"site\" )  initialize_design_df(   items = NULL,   nrows = NULL,   ncols = NULL,   block_nrows = NULL,   block_ncols = NULL,   designs = NULL,   design_col = \"site\" )"},{"path":"https://biometryhub.github.io/speed/reference/initialise_design_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialise Design Data Frame — initialise_design_df","text":"items Items placed design. Either single numeric value (number equally replicated items), vector items. (default: NULL) nrows Number rows design (default: NULL) ncols Number columns design (default: NULL) block_nrows Number rows block (default: NULL) block_ncols Number columns block (default: NULL) designs list named arguments describing design specifications, required nrows ncols absent. (default: NULL) design_col column name distinguish different designs (default: \"site\")","code":""},{"path":"https://biometryhub.github.io/speed/reference/initialise_design_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialise Design Data Frame — initialise_design_df","text":"data frame containing design","code":""},{"path":"https://biometryhub.github.io/speed/reference/initialise_design_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialise Design Data Frame — initialise_design_df","text":"","code":"initialise_design_df(   items = c(1, 2, 2, 1, 3, 3, 1, 3, 3),   nrows = 3,   ncols = 3 ) #>   row col treatment #> 1   1   1         1 #> 2   2   1         2 #> 3   3   1         2 #> 4   1   2         1 #> 5   2   2         3 #> 6   3   2         3 #> 7   1   3         1 #> 8   2   3         3 #> 9   3   3         3  # blocking initialise_design_df(rep(1:8, 4), 8, 4, 2, 2) #>    row col treatment row_block col_block block #> 1    1   1         1         1         1     1 #> 2    2   1         2         1         1     1 #> 3    3   1         5         2         1     2 #> 4    4   1         6         2         1     2 #> 5    5   1         1         3         1     3 #> 6    6   1         2         3         1     3 #> 7    7   1         5         4         1     4 #> 8    8   1         6         4         1     4 #> 9    1   2         3         1         1     1 #> 10   2   2         4         1         1     1 #> 11   3   2         7         2         1     2 #> 12   4   2         8         2         1     2 #> 13   5   2         3         3         1     3 #> 14   6   2         4         3         1     3 #> 15   7   2         7         4         1     4 #> 16   8   2         8         4         1     4 #> 17   1   3         1         1         2     5 #> 18   2   3         2         1         2     5 #> 19   3   3         5         2         2     6 #> 20   4   3         6         2         2     6 #> 21   5   3         1         3         2     7 #> 22   6   3         2         3         2     7 #> 23   7   3         5         4         2     8 #> 24   8   3         6         4         2     8 #> 25   1   4         3         1         2     5 #> 26   2   4         4         1         2     5 #> 27   3   4         7         2         2     6 #> 28   4   4         8         2         2     6 #> 29   5   4         3         3         2     7 #> 30   6   4         4         3         2     7 #> 31   7   4         7         4         2     8 #> 32   8   4         8         4         2     8  # another blocking example initialise_design_df(   items = paste0(\"T\", 1:6),   nrows = 4,   ncols = 6,   block_nrows = 2,   block_ncols = 3 ) #>    row col treatment row_block col_block block #> 1    1   1        T1         1         1     1 #> 2    2   1        T2         1         1     1 #> 3    3   1        T1         2         1     2 #> 4    4   1        T2         2         1     2 #> 5    1   2        T3         1         1     1 #> 6    2   2        T4         1         1     1 #> 7    3   2        T3         2         1     2 #> 8    4   2        T4         2         1     2 #> 9    1   3        T5         1         1     1 #> 10   2   3        T6         1         1     1 #> 11   3   3        T5         2         1     2 #> 12   4   3        T6         2         1     2 #> 13   1   4        T1         1         2     3 #> 14   2   4        T2         1         2     3 #> 15   3   4        T1         2         2     4 #> 16   4   4        T2         2         2     4 #> 17   1   5        T3         1         2     3 #> 18   2   5        T4         1         2     3 #> 19   3   5        T3         2         2     4 #> 20   4   5        T4         2         2     4 #> 21   1   6        T5         1         2     3 #> 22   2   6        T6         1         2     3 #> 23   3   6        T5         2         2     4 #> 24   4   6        T6         2         2     4  # MET initialise_design_df(   items = c(rep(1:10, 6), rep(11:20, 8)),   designs = list(     a = list(nrows = 10, ncols = 3),     b = list(nrows = 10, ncols = 5),     c = list(nrows = 10, ncols = 6)   ) ) #>     row col treatment site #> 1     1   1         1    a #> 2     2   1         2    a #> 3     3   1         3    a #> 4     4   1         4    a #> 5     5   1         5    a #> 6     6   1         6    a #> 7     7   1         7    a #> 8     8   1         8    a #> 9     9   1         9    a #> 10   10   1        10    a #> 11    1   2         1    a #> 12    2   2         2    a #> 13    3   2         3    a #> 14    4   2         4    a #> 15    5   2         5    a #> 16    6   2         6    a #> 17    7   2         7    a #> 18    8   2         8    a #> 19    9   2         9    a #> 20   10   2        10    a #> 21    1   3         1    a #> 22    2   3         2    a #> 23    3   3         3    a #> 24    4   3         4    a #> 25    5   3         5    a #> 26    6   3         6    a #> 27    7   3         7    a #> 28    8   3         8    a #> 29    9   3         9    a #> 30   10   3        10    a #> 31    1   1         1    b #> 32    2   1         2    b #> 33    3   1         3    b #> 34    4   1         4    b #> 35    5   1         5    b #> 36    6   1         6    b #> 37    7   1         7    b #> 38    8   1         8    b #> 39    9   1         9    b #> 40   10   1        10    b #> 41    1   2         1    b #> 42    2   2         2    b #> 43    3   2         3    b #> 44    4   2         4    b #> 45    5   2         5    b #> 46    6   2         6    b #> 47    7   2         7    b #> 48    8   2         8    b #> 49    9   2         9    b #> 50   10   2        10    b #> 51    1   3         1    b #> 52    2   3         2    b #> 53    3   3         3    b #> 54    4   3         4    b #> 55    5   3         5    b #> 56    6   3         6    b #> 57    7   3         7    b #> 58    8   3         8    b #> 59    9   3         9    b #> 60   10   3        10    b #> 61    1   4        11    b #> 62    2   4        12    b #> 63    3   4        13    b #> 64    4   4        14    b #> 65    5   4        15    b #> 66    6   4        16    b #> 67    7   4        17    b #> 68    8   4        18    b #> 69    9   4        19    b #> 70   10   4        20    b #> 71    1   5        11    b #> 72    2   5        12    b #> 73    3   5        13    b #> 74    4   5        14    b #> 75    5   5        15    b #> 76    6   5        16    b #> 77    7   5        17    b #> 78    8   5        18    b #> 79    9   5        19    b #> 80   10   5        20    b #> 81    1   1        11    c #> 82    2   1        12    c #> 83    3   1        13    c #> 84    4   1        14    c #> 85    5   1        15    c #> 86    6   1        16    c #> 87    7   1        17    c #> 88    8   1        18    c #> 89    9   1        19    c #> 90   10   1        20    c #> 91    1   2        11    c #> 92    2   2        12    c #> 93    3   2        13    c #> 94    4   2        14    c #> 95    5   2        15    c #> 96    6   2        16    c #> 97    7   2        17    c #> 98    8   2        18    c #> 99    9   2        19    c #> 100  10   2        20    c #> 101   1   3        11    c #> 102   2   3        12    c #> 103   3   3        13    c #> 104   4   3        14    c #> 105   5   3        15    c #> 106   6   3        16    c #> 107   7   3        17    c #> 108   8   3        18    c #> 109   9   3        19    c #> 110  10   3        20    c #> 111   1   4        11    c #> 112   2   4        12    c #> 113   3   4        13    c #> 114   4   4        14    c #> 115   5   4        15    c #> 116   6   4        16    c #> 117   7   4        17    c #> 118   8   4        18    c #> 119   9   4        19    c #> 120  10   4        20    c #> 121   1   5        11    c #> 122   2   5        12    c #> 123   3   5        13    c #> 124   4   5        14    c #> 125   5   5        15    c #> 126   6   5        16    c #> 127   7   5        17    c #> 128   8   5        18    c #> 129   9   5        19    c #> 130  10   5        20    c #> 131   1   6        11    c #> 132   2   6        12    c #> 133   3   6        13    c #> 134   4   6        14    c #> 135   5   6        15    c #> 136   6   6        16    c #> 137   7   6        17    c #> 138   8   6        18    c #> 139   9   6        19    c #> 140  10   6        20    c  # MET with different items for each site initialise_design_df(   designs = list(     a = list(items = 1:30, nrows = 10, ncols = 6),     b = list(items = 1:25, nrows = 10, ncols = 5),     c = list(items = 16:30, nrows = 10, ncols = 3)   ) ) #>     row col treatment site #> 1     1   1         1    a #> 2     2   1         2    a #> 3     3   1         3    a #> 4     4   1         4    a #> 5     5   1         5    a #> 6     6   1         6    a #> 7     7   1         7    a #> 8     8   1         8    a #> 9     9   1         9    a #> 10   10   1        10    a #> 11    1   2        11    a #> 12    2   2        12    a #> 13    3   2        13    a #> 14    4   2        14    a #> 15    5   2        15    a #> 16    6   2        16    a #> 17    7   2        17    a #> 18    8   2        18    a #> 19    9   2        19    a #> 20   10   2        20    a #> 21    1   3        21    a #> 22    2   3        22    a #> 23    3   3        23    a #> 24    4   3        24    a #> 25    5   3        25    a #> 26    6   3        26    a #> 27    7   3        27    a #> 28    8   3        28    a #> 29    9   3        29    a #> 30   10   3        30    a #> 31    1   4         1    a #> 32    2   4         2    a #> 33    3   4         3    a #> 34    4   4         4    a #> 35    5   4         5    a #> 36    6   4         6    a #> 37    7   4         7    a #> 38    8   4         8    a #> 39    9   4         9    a #> 40   10   4        10    a #> 41    1   5        11    a #> 42    2   5        12    a #> 43    3   5        13    a #> 44    4   5        14    a #> 45    5   5        15    a #> 46    6   5        16    a #> 47    7   5        17    a #> 48    8   5        18    a #> 49    9   5        19    a #> 50   10   5        20    a #> 51    1   6        21    a #> 52    2   6        22    a #> 53    3   6        23    a #> 54    4   6        24    a #> 55    5   6        25    a #> 56    6   6        26    a #> 57    7   6        27    a #> 58    8   6        28    a #> 59    9   6        29    a #> 60   10   6        30    a #> 61    1   1         1    b #> 62    2   1         2    b #> 63    3   1         3    b #> 64    4   1         4    b #> 65    5   1         5    b #> 66    6   1         6    b #> 67    7   1         7    b #> 68    8   1         8    b #> 69    9   1         9    b #> 70   10   1        10    b #> 71    1   2        11    b #> 72    2   2        12    b #> 73    3   2        13    b #> 74    4   2        14    b #> 75    5   2        15    b #> 76    6   2        16    b #> 77    7   2        17    b #> 78    8   2        18    b #> 79    9   2        19    b #> 80   10   2        20    b #> 81    1   3        21    b #> 82    2   3        22    b #> 83    3   3        23    b #> 84    4   3        24    b #> 85    5   3        25    b #> 86    6   3         1    b #> 87    7   3         2    b #> 88    8   3         3    b #> 89    9   3         4    b #> 90   10   3         5    b #> 91    1   4         6    b #> 92    2   4         7    b #> 93    3   4         8    b #> 94    4   4         9    b #> 95    5   4        10    b #> 96    6   4        11    b #> 97    7   4        12    b #> 98    8   4        13    b #> 99    9   4        14    b #> 100  10   4        15    b #> 101   1   5        16    b #> 102   2   5        17    b #> 103   3   5        18    b #> 104   4   5        19    b #> 105   5   5        20    b #> 106   6   5        21    b #> 107   7   5        22    b #> 108   8   5        23    b #> 109   9   5        24    b #> 110  10   5        25    b #> 111   1   1        16    c #> 112   2   1        17    c #> 113   3   1        18    c #> 114   4   1        19    c #> 115   5   1        20    c #> 116   6   1        21    c #> 117   7   1        22    c #> 118   8   1        23    c #> 119   9   1        24    c #> 120  10   1        25    c #> 121   1   2        26    c #> 122   2   2        27    c #> 123   3   2        28    c #> 124   4   2        29    c #> 125   5   2        30    c #> 126   6   2        16    c #> 127   7   2        17    c #> 128   8   2        18    c #> 129   9   2        19    c #> 130  10   2        20    c #> 131   1   3        21    c #> 132   2   3        22    c #> 133   3   3        23    c #> 134   4   3        24    c #> 135   5   3        25    c #> 136   6   3        26    c #> 137   7   3        27    c #> 138   8   3        28    c #> 139   9   3        29    c #> 140  10   3        30    c"},{"path":"https://biometryhub.github.io/speed/reference/initialise_multiple_designs_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialise Multiple Design Data Frames — initialise_multiple_designs_df","title":"Initialise Multiple Design Data Frames — initialise_multiple_designs_df","text":"Initialise Multiple Design Data Frames","code":""},{"path":"https://biometryhub.github.io/speed/reference/initialise_multiple_designs_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialise Multiple Design Data Frames — initialise_multiple_designs_df","text":"","code":"initialise_multiple_designs_df(items, designs, design_col)"},{"path":"https://biometryhub.github.io/speed/reference/initialise_multiple_designs_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialise Multiple Design Data Frames — initialise_multiple_designs_df","text":"items Items placed design. Either single numeric value (number equally replicated items), vector items. (default: NULL) designs list named arguments describing design specifications, required nrows ncols absent. (default: NULL) design_col column name distinguish different designs (default: \"site\")","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_function_piepho.html","id":null,"dir":"Reference","previous_headings":"","what":"Objective Function with Metric from Piepho — objective_function_piepho","title":"Objective Function with Metric from Piepho — objective_function_piepho","text":"Create objective function including even distribution neighbor balance introduced Piepho 2018.","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_function_piepho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective Function with Metric from Piepho — objective_function_piepho","text":"","code":"objective_function_piepho(   design,   swap,   spatial_cols,   current_score_obj = NULL,   swapped_items = NULL,   pair_mapping = NULL,   row_column = \"row\",   col_column = \"col\",   ... )"},{"path":"https://biometryhub.github.io/speed/reference/objective_function_piepho.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective Function with Metric from Piepho — objective_function_piepho","text":"design data frame representing spatial information design swap column name items swapped spatial_cols Column name(s) spatial factors current_score_obj named list containing current score swapped_items items just swapped pair_mapping named vector pairs generated create_pair_mapping row_column Name column representing row design (default: \"row\") col_column Name column representing column design (default: \"col\") ... Extra parameters passed speed","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_function_piepho.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Objective Function with Metric from Piepho — objective_function_piepho","text":"function returns named list numeric values one required name score representing score design (lower better) signature function(design_df, swap, spatial_cols, ...). See signature details objective_function_signature.","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_function_piepho.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Objective Function with Metric from Piepho — objective_function_piepho","text":"Piepho, H. P., Michel, V., & Williams, E. (2018). Neighbor balance evenness distribution treatment replications row-column designs. Biometrical journal. Biometrische Zeitschrift, 60(6), 1172–1189. https://doi.org/10.1002/bimj.201800013","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/objective_function_piepho.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Objective Function with Metric from Piepho — objective_function_piepho","text":"","code":"design_df <- initialise_design_df(   items = c(1, 2, 2, 1, 3, 3, 1, 3, 3),   nrows = 3,   ncols = 3 )  pair_mapping <- create_pair_mapping(design_df$treatment) objective_function_piepho(design_df, \"treatment\", c(\"row\", \"col\"), pair_mapping = pair_mapping) #> $score #> [1] 16.36667 #>  #> $ed #> $ed$`2` #> $ed$`2`$msts #> $ed$`2`$msts$`2` #> [1] 1 #>  #>  #> $ed$`2`$min_mst #> [1] 1 #>  #> $ed$`2`$min_items #> [1] \"2\" #>  #>  #> $ed$`4` #> $ed$`4`$msts #> $ed$`4`$msts$`3` #> [1] 3 #>  #>  #> $ed$`4`$min_mst #> [1] 3 #>  #> $ed$`4`$min_items #> [1] \"3\" #>  #>  #> $ed$`3` #> $ed$`3`$msts #> $ed$`3`$msts$`1` #> [1] 2 #>  #>  #> $ed$`3`$min_mst #> [1] 2 #>  #> $ed$`3`$min_items #> [1] \"1\" #>  #>  #>  #> $bal #> [1] 8 #>  #> $adj #> [1] 7 #>  #> $nb #> $nb$nb #> sorted_pairs #> 1,1 1,2 1,3 2,2 2,3 3,3  #>   2   1   2   1   2   4  #>  #> $nb$max_nb #> [1] 4 #>  #> $nb$max_pairs #> [1] \"3,3\" #>  #> $nb$var #> [1] 1.2 #>  #>  # usage in speed, speed(..., obj_function = objective_function_piepho, pair_mapping = pair_mapping)"},{"path":"https://biometryhub.github.io/speed/reference/objective_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Default objective functions — objective_function_signature","title":"Default objective functions — objective_function_signature","text":"Default Objective Function Design Optimization","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default objective functions — objective_function_signature","text":"","code":"objective_function_signature(layout_df, swap, spatial_cols, ...)  objective_function(   layout_df,   swap,   spatial_cols,   adj_weight = getOption(\"speed.adj_weight\", 1),   bal_weight = getOption(\"speed.bal_weight\", 1),   row_column = \"row\",   col_column = \"col\",   ... )"},{"path":"https://biometryhub.github.io/speed/reference/objective_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default objective functions — objective_function_signature","text":"layout_df data frame representing current design swap column name items swapped spatial_cols Column name(s) spatial factors ... Extra parameters passed speed adj_weight Weight adjacency score (default: 1) bal_weight Weight balance score (default: 1) row_column Name column representing row design (default: \"row\") col_column Name column representing column design (default: \"col\")","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default objective functions — objective_function_signature","text":"numeric value representing score design (lower better)","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default objective functions — objective_function_signature","text":"","code":"layout_df <- data.frame(   row = rep(1:3, each = 3),   col = rep(1:3, times = 3),   treatment = rep(letters[1:3], 3) ) objective_function(layout_df, \"treatment\", c(\"row\", \"col\")) #> $score #> [1] 15 #>"},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Optimization Progress — plot_progress","title":"Plot Optimization Progress — plot_progress","text":"Creates two plots showing progression optimization: Objective score iterations Temperature decay iterations","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Optimization Progress — plot_progress","text":"","code":"plot_progress(result)"},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Optimization Progress — plot_progress","text":"result list containing optimization results following elements: scores - Numeric vector objective scores iteration temperatures - Numeric vector temperatures iteration","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Optimization Progress — plot_progress","text":"return value; prints two ggplot objects showing: Progress objective score Cooling schedule (temperature decay)","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Optimization Progress — plot_progress","text":"","code":"# Create a simple design df <- data.frame(   row = rep(1:3, each = 3),   col = rep(1:3, times = 3),   treatment = rep(LETTERS[1:3], 3) )  # Optimise the design result <- speed(df, \"treatment\") #> row and col are used as row and column, respectively. #> Early stopping at iteration 76   # Plot optimization progress plot_progress(result)"},{"path":"https://biometryhub.github.io/speed/reference/print.design.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for speed design objects — print.design","title":"Print method for speed design objects — print.design","text":"Print method speed design objects","code":""},{"path":"https://biometryhub.github.io/speed/reference/print.design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for speed design objects — print.design","text":"","code":"# S3 method for class 'design' print(x, ...)"},{"path":"https://biometryhub.github.io/speed/reference/print.design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for speed design objects — print.design","text":"x Design object returned speed function ... Additional arguments passed print","code":""},{"path":"https://biometryhub.github.io/speed/reference/print.design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for speed design objects — print.design","text":"x invisibly","code":""},{"path":"https://biometryhub.github.io/speed/reference/pseudo_inverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Pseudo Inverse — pseudo_inverse","title":"Pseudo Inverse — pseudo_inverse","text":"Calculates Moore-Penrose pseudo inverse matrix.","code":""},{"path":"https://biometryhub.github.io/speed/reference/pseudo_inverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pseudo Inverse — pseudo_inverse","text":"","code":"pseudo_inverse(a_matrix, tolerance = 1e-10)"},{"path":"https://biometryhub.github.io/speed/reference/pseudo_inverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pseudo Inverse — pseudo_inverse","text":"a_matrix matrix tolerance tolerance value singular values","code":""},{"path":"https://biometryhub.github.io/speed/reference/pseudo_inverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pseudo Inverse — pseudo_inverse","text":"Moore-Penrose pseudo inverse design matrix.","code":""},{"path":"https://biometryhub.github.io/speed/reference/rbind_fill.html","id":null,"dir":"Reference","previous_headings":"","what":"rbind for Unequal Columns — rbind_fill","title":"rbind for Unequal Columns — rbind_fill","text":"rbind Unequal Columns","code":""},{"path":"https://biometryhub.github.io/speed/reference/rbind_fill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rbind for Unequal Columns — rbind_fill","text":"","code":"rbind_fill(..., fill = NA)"},{"path":"https://biometryhub.github.io/speed/reference/rbind_fill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rbind for Unequal Columns — rbind_fill","text":"... Data frames combined fill filling value missing columns (default: NA)","code":""},{"path":"https://biometryhub.github.io/speed/reference/rbind_fill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rbind for Unequal Columns — rbind_fill","text":"combined data frame","code":""},{"path":"https://biometryhub.github.io/speed/reference/shuffle_items.html","id":null,"dir":"Reference","previous_headings":"","what":"Shuffle Items in A Group — shuffle_items","title":"Shuffle Items in A Group — shuffle_items","text":"Shuffle Items Group","code":""},{"path":"https://biometryhub.github.io/speed/reference/shuffle_items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shuffle Items in A Group — shuffle_items","text":"","code":"shuffle_items(design, swap, swap_within, seed = NULL)"},{"path":"https://biometryhub.github.io/speed/reference/shuffle_items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shuffle Items in A Group — shuffle_items","text":"design Data frame containing current design swap Column name treatment swap, named list hierarchical designs swap_within Column name defining groups within swap treatments, named list hierarchical designs seed numeric value random seed. provided, ensures reproducibility results (default: NULL).","code":""},{"path":"https://biometryhub.github.io/speed/reference/shuffle_items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shuffle Items in A Group — shuffle_items","text":"data frame items shuffled","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed-options.html","id":null,"dir":"Reference","previous_headings":"","what":"Package Options for speed — speed-options","title":"Package Options for speed — speed-options","text":"page describes options can set control behaviour speed package, especially technical options speed() function controlling behaviour optimisation algorithm.","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed-options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Package Options for speed — speed-options","text":"speed.swap_count Number treatment swaps per iteration (default: 1). speed.swap_all_blocks Logical; TRUE, performs swaps blocks iteration (default: FALSE). speed.adaptive_swaps Logical; TRUE, adjusts swap parameters based temperature (default: FALSE). speed.start_temp Starting temperature simulated annealing (default: 100). higher start temperature allows algorithm accept worse solutions early , encouraging exploration solution space helping avoid local optima. Lower values make algorithm greedier start, can speed convergence increases risk getting stuck poor solution. good starting temperature allows moderately worse solutions accepted probability 70–90% beginning optimisation. speed.cooling_rate Rate temperature decreases simulated annealing (default: 0.99). controls quickly algorithm shifts exploration exploitation. temperature updated iteration multiplying rate: T_i = start_temp * cooling_rate^. higher cooling rate (e.g. 0.995–0.999) results slower cooling longer exploration phase, generally better complex noisy optimisation landscapes. Lower values (e.g. 0.95–0.98) cool quickly, leading faster convergence greater risk premature convergence suboptimal design. speed.random_initialisation Logical; TRUE, randomly shuffle items within swap_within (default: FALSE) speed.adj_weight Weight adjacency score (default: 0). speed.bal_weight Weight balance score (default: 1).","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed-options.html","id":"setting-options","dir":"Reference","previous_headings":"","what":"Setting options","title":"Package Options for speed — speed-options","text":"can set options using base::options(), either start session within code:","code":"options(speed.swap_count = 5, speed.swap_all_blocks = TRUE)"},{"path":"https://biometryhub.github.io/speed/reference/speed-package.html","id":null,"dir":"Reference","previous_headings":"","what":"speed: Generate Spatially Efficient Experimental Designs — speed-package","title":"speed: Generate Spatially Efficient Experimental Designs — speed-package","text":"Speed package optimises spatial experimental designs rearranging treatments improve statistical efficiency maintaining statistical validity. employs customisable optimisation metrics, default approach balances minimising treatment adjacency maintaining spatial balance. Users can supply optimisation metrics tailor designs specific experimental requirements. package also includes visualisation tools allow users inspect optimised designs.","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/speed-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"speed: Generate Spatially Efficient Experimental Designs — speed-package","text":"Maintainer: Sam Rogers sam.rogers@adelaide.edu.au Authors: Julian Taylor julian.taylor@adelaide.edu.au Russell Edson russell.edson@adelaide.edu.au Wasin Pipattungsakul wasin.pipattungsakul@adelaide.edu.au contributors: University Adelaide (https://adelaide.edu.au/) [copyright holder, funder] Grains Research Development Corporation (https://grdc.com.au/) [copyright holder, funder]","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimise Experimental Design Layout Using Simulated Annealing — speed","title":"Optimise Experimental Design Layout Using Simulated Annealing — speed","text":"Optimises spatial layout experimental designs using simulated annealing minimise treatment adjacency maintain treatment balance across spatial factors. Works regular irregular spatial designs.","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimise Experimental Design Layout Using Simulated Annealing — speed","text":"","code":"speed(   data,   swap,   swap_within = \"1\",   spatial_factors = ~row + col,   grid_factors = list(dim1 = \"row\", dim2 = \"col\"),   iterations = 10000,   early_stop_iterations = 2000,   obj_function = objective_function,   quiet = FALSE,   seed = NULL,   ... )"},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimise Experimental Design Layout Using Simulated Annealing — speed","text":"data data frame containing experimental design spatial coordinates swap column name items swapped (e.g., treatment, variety, genotype, etc). hierarchical designs, provide named list name corresponds hierarchy level (e.g., list(wp = \"wholeplot_treatment\", sp = \"subplot_treatment\")). See details information. swap_within string specifying variable defines boundary within swap treatments. Specify \"1\" \"none\" boundary (default: \"1\"). examples might \"block\" \"replicate\" even \"site\". hierarchical designs, provide named list names matching swap optimise hierarchical design split-plot. See details information. spatial_factors one-sided formula specifying spatial factors consider balance (default: ~row + col). grid_factors named list specifying grid factors construct matrix calculating adjacency score, dim1 row dim2 column. (default: list(dim1 = \"row\", dim2 = \"col\")). iterations Maximum number iterations simulated annealing algorithm (default: 10000). hierarchical designs, can named list names matching swap. early_stop_iterations Number iterations without improvement early stopping (default: 2000). hierarchical designs, can named list names matching swap. obj_function Objective function used calculate score (lower better) (default: objective_function()). hierarchical designs, can named list names matching swap. quiet Logical; TRUE, suppresses progress messages (default: FALSE) seed numeric value random seed. provided, ensures reproducibility results (default: NULL). ... arguments passed objective functions.","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimise Experimental Design Layout Using Simulated Annealing — speed","text":"list containing: design_df - Data frame optimised design score - Final optimisation score scores - Vector scores across iterations (simple designs) named list score vectors (hierarchical designs) temperatures - Vector temperatures across iterations iterations_run - Total number iterations performed stopped_early - Logical indicating optimisation stopped early (simple designs) named logical vector (hierarchical designs) treatments - Vector unique treatments (simple designs) named list treatment vectors (hierarchical designs) seed - Random seed used reproducibility design. set function, seed set third element .Random.seed.","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimise Experimental Design Layout Using Simulated Annealing — speed","text":"function provides general interface producing experimental designs different types. hierarchical designs split-plots, strip plots, split-split plots similar nested structures, key arguments (swap, swap_within, iterations, early_stop_iterations obj_function) can provided named lists name corresponds level hierarchy (e.g., \"wholeplot\", \"subplot\"). arguments provided named lists matching names, optimisation applied sequentially hierarchical level, starting first level progressing hierarchy. allows different optimisation parameters objective functions applied different levels design structure. simple (non-hierarchical) designs, arguments can provided single values. examples detailed usage, see package vignettes.","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimise Experimental Design Layout Using Simulated Annealing — speed","text":"","code":"# Create a simple design with 3 replicates of 4 treatments in a 4x3 layout df <- data.frame(   row = rep(1:4, times = 5),   col = rep(1:5, each = 4),   treatment = rep(LETTERS[1:4], 5) )  # Optimise the design result <- speed(df, swap = \"treatment\", seed = 42) #> row and col are used as row and column, respectively. #> Iteration: 1000 Score: 1 Best: 1 Since Improvement: 275  #> Iteration: 2000 Score: 1 Best: 1 Since Improvement: 1275  #> Early stopping at iteration 2725  autoplot(result)   # Hierarchical split-plot design df_split <- data.frame(   row = rep(1:12, each = 4),   col = rep(1:4, times = 12),   block = rep(1:4, each = 12),   wholeplot = rep(1:12, each = 4),   wholeplot_treatment = rep(rep(LETTERS[1:3], each = 4), times = 4),   subplot_treatment = rep(letters[1:4], 12) )  result <- speed(df_split,                 swap = list(wp = \"wholeplot_treatment\",                             sp = \"subplot_treatment\"),                 swap_within = list(wp = \"block\", sp = \"wholeplot\"),                 seed = 42) #> row and col are used as row and column, respectively. #> Optimising level: wp  #> Level: wp Iteration: 1000 Score: 100 Best: 100 Since Improvement: 1000  #> Level: wp Iteration: 2000 Score: 100 Best: 100 Since Improvement: 2000  #> Early stopping at iteration 2000 for level wp  #> Optimising level: sp  #> Early stopping at iteration 570 for level sp   # Plot wholeplot allocations within blocks autoplot(result, treatments = \"wholeplot_treatment\")  # Plot subplot allocations within wholeplots autoplot(result, treatments = \"subplot_treatment\", block = \"wholeplot\")"},{"path":"https://biometryhub.github.io/speed/reference/speed_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Speed function for hierarchical designs — speed_hierarchical","title":"Speed function for hierarchical designs — speed_hierarchical","text":"Speed function hierarchical designs","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Speed function for hierarchical designs — speed_hierarchical","text":"","code":"speed_hierarchical(   data,   swap,   swap_within,   spatial_factors,   iterations,   early_stop_iterations,   obj_function,   quiet,   seed,   ... )"},{"path":"https://biometryhub.github.io/speed/reference/speed_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Speed function for simple (non-hierarchical) designs — speed_simple","title":"Speed function for simple (non-hierarchical) designs — speed_simple","text":"Speed function simple (non-hierarchical) designs","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Speed function for simple (non-hierarchical) designs — speed_simple","text":"","code":"speed_simple(   data,   swap,   swap_within,   spatial_factors,   iterations,   early_stop_iterations,   obj_function,   quiet,   seed,   ... )"},{"path":"https://biometryhub.github.io/speed/reference/to_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Frame Data to Factors — to_factor","title":"Convert Data Frame Data to Factors — to_factor","text":"Convert Data Frame Data Factors","code":""},{"path":"https://biometryhub.github.io/speed/reference/to_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Frame Data to Factors — to_factor","text":"","code":"to_factor(df)"},{"path":"https://biometryhub.github.io/speed/reference/to_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Frame Data to Factors — to_factor","text":"df data frame","code":""},{"path":"https://biometryhub.github.io/speed/reference/to_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Frame Data to Factors — to_factor","text":"list containing: df - data frame factors input_types - named list original type column","code":""},{"path":"https://biometryhub.github.io/speed/reference/to_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Frame Data to Provided Types — to_types","title":"Convert Data Frame Data to Provided Types — to_types","text":"Convert Data Frame Data Provided Types","code":""},{"path":"https://biometryhub.github.io/speed/reference/to_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Frame Data to Provided Types — to_types","text":"","code":"to_types(df, types)"},{"path":"https://biometryhub.github.io/speed/reference/to_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Frame Data to Provided Types — to_types","text":"df data frame types named list types column","code":""},{"path":"https://biometryhub.github.io/speed/reference/to_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Frame Data to Provided Types — to_types","text":"data frame new types","code":""},{"path":"https://biometryhub.github.io/speed/reference/verify.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify Inputs for speed — .verify_speed_inputs","title":"Verify Inputs for speed — .verify_speed_inputs","text":"Verify inputs speed function.","code":""},{"path":"https://biometryhub.github.io/speed/reference/verify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify Inputs for speed — .verify_speed_inputs","text":"","code":".verify_speed_inputs(   data,   swap,   swap_within,   spatial_factors,   iterations,   early_stop_iterations,   quiet,   seed,   swap_count,   swap_all_blocks,   adaptive_swaps,   start_temp,   cooling_rate,   random_initialisation )  .verify_hierarchical_inputs(   data,   swap,   swap_within,   spatial_factors,   iterations,   early_stop_iterations,   obj_function,   quiet,   seed )"},{"path":"https://biometryhub.github.io/speed/reference/verify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify Inputs for speed — .verify_speed_inputs","text":"data data frame containing experimental design spatial coordinates swap column name items swapped (e.g., treatment, variety, genotype, etc). hierarchical designs, provide named list name corresponds hierarchy level (e.g., list(wp = \"wholeplot_treatment\", sp = \"subplot_treatment\")). See details information. swap_within string specifying variable defines boundary within swap treatments. Specify \"1\" \"none\" boundary (default: \"1\"). examples might \"block\" \"replicate\" even \"site\". hierarchical designs, provide named list names matching swap optimise hierarchical design split-plot. See details information. spatial_factors one-sided formula specifying spatial factors consider balance (default: ~row + col). iterations Maximum number iterations simulated annealing algorithm (default: 10000). hierarchical designs, can named list names matching swap. early_stop_iterations Number iterations without improvement early stopping (default: 2000). hierarchical designs, can named list names matching swap. quiet Logical; TRUE, suppresses progress messages (default: FALSE) seed numeric value random seed. provided, ensures reproducibility results (default: NULL). swap_count Number item swaps per iteration (default: 1) swap_all_blocks Logical; TRUE, performs swaps blocks iteration (default: FALSE) adaptive_swaps Logical; TRUE, adjusts swap parameters based temperature (default: FALSE) start_temp Starting temperature simulated annealing (default: 100) cooling_rate Rate temperature decreases (default: 0.99) random_initialisation Logical; TRUE, randomly shuffle items within swap_within (default: FALSE) obj_function Objective function used calculate score (lower better) (default: objective_function()). hierarchical designs, can named list names matching swap.","code":""}]
