[{"path":"https://biometryhub.github.io/speed/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 University Adelaide Biometry Hub Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Common Agricultural Experimental Designs with speed","text":"Agricultural experiments require careful spatial design minimise effects field heterogeneity neighbour interactions maximising statistical power. speed package provides tools creating spatially efficient experimental designs simulated annealing optimisation. vignette demonstrates use speed common agricultural experimental designs, showing spatial optimisation can improve efficiency validity field trials. ’ll work four key design types, building complexity showing different features package.","code":"library(speed)"},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"completely-randomised-design-crd","dir":"Articles","previous_headings":"","what":"Completely Randomised Design (CRD)","title":"Common Agricultural Experimental Designs with speed","text":"Completely Randomised Design simplest experimental design treatments assigned experimental units entirely random. simple implement, CRD doesn’t account spatial variation field conditions. Homogeneous experimental conditions Controlled environments (greenhouse, growth chamber) Small-scale experiments minimal spatial variation Proof--concept studies Consider field trial testing 8 new wheat varieties 4 replicates . Even though treatments assigned randomly, spatial optimization can reduce neighbor effects improve precision. agricultural contexts, even completely randomised designs benefit spatial optimisation minimise treatment clustering neighbour effects. Firstly initialise dataframe representing design visualise . design 4 replicates 8 treatments items, 8 rows 4 columns.  systematic layout; note initial layout arranges treatments repeating, non-random pattern. now randomised visualisation. main speed() function performs optimisation. set sensible defaults allow application wide variety situations. case, need provide design dataframe operate , column name dataframe use treatments, seed reproducibility. printed output returned design object shows final optimisation score (lower better), number iterations taken reach result, iterations stopped early due lack improvement, treatments present design, seed. output object contains additional components, can seen : final step visualise optimised design. plot displays spatial arrangement treatments optimisation, allowing easily check clustering, spatial trends, patterns may affect experiment. well-randomised spatially efficient design show treatments distributed evenly across field, helping minimise neighbour effects maximise reliability results.  nicely randomised spatially optimal design!","code":"# Initialise dataframe crd_design <- initialise_design_df(items = 8, nrows = 8, ncols = 4) head(crd_design) row col treatment 1   1   1        T1 2   2   1        T2 3   3   1        T3 4   4   1        T4 5   5   1        T5 6   6   1        T6 crd_result <- speed(crd_design,                      swap = \"treatment\",                     seed = 42) Iteration: 1000 Score: 2.285714 Best: 2.285714 Since Improvement: 271 Iteration: 2000 Score: 2.285714 Best: 2.285714 Since Improvement: 1271 Early stopping at iteration 2729 crd_result Optimised Experimental Design ---------------------------- Score: 2.285714 Iterations Run: 2730 Stopped Early: TRUE Treatments: T1, T2, T3, T4, T5, T6, T7, T8 Seed: 42 str(crd_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    32 obs. of  3 variables:   ..$ row      : int [1:32] 1 1 1 1 2 2 2 2 3 3 ...   ..$ col      : int [1:32] 1 2 3 4 1 2 3 4 1 2 ...   ..$ treatment: chr [1:32] \"T8\" \"T1\" \"T7\" \"T3\" ...  $ score         : num 2.29  $ scores        : num [1:2730] 40 36.3 32.4 28.3 24.1 ...  $ temperatures  : num [1:2730] 100 99 98 97 96.1 ...  $ iterations_run: int 2730  $ stopped_early : logi TRUE  $ treatments    : chr [1:8] \"T1\" \"T2\" \"T3\" \"T4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(crd_result)"},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Common Agricultural Experimental Designs with speed","text":"Completely Randomised Design simplest experimental design treatments assigned experimental units entirely random. simple implement, CRD doesn’t account spatial variation field conditions.","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"when-to-use","dir":"Articles","previous_headings":"","what":"When to Use","title":"Common Agricultural Experimental Designs with speed","text":"Homogeneous experimental conditions Controlled environments (greenhouse, growth chamber) Small-scale experiments minimal spatial variation Proof--concept studies","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"example-field-trial-with-8-varieties","dir":"Articles","previous_headings":"","what":"Example: Field Trial with 8 Varieties","title":"Common Agricultural Experimental Designs with speed","text":"Consider field trial testing 8 new wheat varieties 4 replicates . Even though treatments assigned randomly, spatial optimization can reduce neighbor effects improve precision.","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"setting-up-crd-with-speed","dir":"Articles","previous_headings":"","what":"Setting Up CRD with speed","title":"Common Agricultural Experimental Designs with speed","text":"agricultural contexts, even completely randomised designs benefit spatial optimisation minimise treatment clustering neighbour effects. Firstly initialise dataframe representing design visualise . design 4 replicates 8 treatments items, 8 rows 4 columns.  systematic layout; note initial layout arranges treatments repeating, non-random pattern. now randomised visualisation. main speed() function performs optimisation. set sensible defaults allow application wide variety situations. case, need provide design dataframe operate , column name dataframe use treatments, seed reproducibility. printed output returned design object shows final optimisation score (lower better), number iterations taken reach result, iterations stopped early due lack improvement, treatments present design, seed. output object contains additional components, can seen : final step visualise optimised design. plot displays spatial arrangement treatments optimisation, allowing easily check clustering, spatial trends, patterns may affect experiment. well-randomised spatially efficient design show treatments distributed evenly across field, helping minimise neighbour effects maximise reliability results.  nicely randomised spatially optimal design!","code":"# Initialise dataframe crd_design <- initialise_design_df(items = 8, nrows = 8, ncols = 4) head(crd_design) row col treatment 1   1   1        T1 2   2   1        T2 3   3   1        T3 4   4   1        T4 5   5   1        T5 6   6   1        T6 crd_result <- speed(crd_design,                      swap = \"treatment\",                     seed = 42) Iteration: 1000 Score: 2.285714 Best: 2.285714 Since Improvement: 271 Iteration: 2000 Score: 2.285714 Best: 2.285714 Since Improvement: 1271 Early stopping at iteration 2729 crd_result Optimised Experimental Design ---------------------------- Score: 2.285714 Iterations Run: 2730 Stopped Early: TRUE Treatments: T1, T2, T3, T4, T5, T6, T7, T8 Seed: 42 str(crd_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    32 obs. of  3 variables:   ..$ row      : int [1:32] 1 1 1 1 2 2 2 2 3 3 ...   ..$ col      : int [1:32] 1 2 3 4 1 2 3 4 1 2 ...   ..$ treatment: chr [1:32] \"T8\" \"T1\" \"T7\" \"T3\" ...  $ score         : num 2.29  $ scores        : num [1:2730] 40 36.3 32.4 28.3 24.1 ...  $ temperatures  : num [1:2730] 100 99 98 97 96.1 ...  $ iterations_run: int 2730  $ stopped_early : logi TRUE  $ treatments    : chr [1:8] \"T1\" \"T2\" \"T3\" \"T4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(crd_result)"},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"performing-the-optimisation","dir":"Articles","previous_headings":"Completely Randomised Design (CRD)","what":"Performing the Optimisation","title":"Common Agricultural Experimental Designs with speed","text":"main speed() function performs optimisation. set sensible defaults allow application wide variety situations. case, need provide design dataframe operate , column name dataframe use treatments, seed reproducibility.","code":"crd_result <- speed(crd_design,                      swap = \"treatment\",                     seed = 42) Iteration: 1000 Score: 2.285714 Best: 2.285714 Since Improvement: 271 Iteration: 2000 Score: 2.285714 Best: 2.285714 Since Improvement: 1271 Early stopping at iteration 2729 crd_result Optimised Experimental Design ---------------------------- Score: 2.285714 Iterations Run: 2730 Stopped Early: TRUE Treatments: T1, T2, T3, T4, T5, T6, T7, T8 Seed: 42"},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"output-of-the-optimisation","dir":"Articles","previous_headings":"Completely Randomised Design (CRD)","what":"Output of the Optimisation","title":"Common Agricultural Experimental Designs with speed","text":"printed output returned design object shows final optimisation score (lower better), number iterations taken reach result, iterations stopped early due lack improvement, treatments present design, seed. output object contains additional components, can seen :","code":"str(crd_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    32 obs. of  3 variables:   ..$ row      : int [1:32] 1 1 1 1 2 2 2 2 3 3 ...   ..$ col      : int [1:32] 1 2 3 4 1 2 3 4 1 2 ...   ..$ treatment: chr [1:32] \"T8\" \"T1\" \"T7\" \"T3\" ...  $ score         : num 2.29  $ scores        : num [1:2730] 40 36.3 32.4 28.3 24.1 ...  $ temperatures  : num [1:2730] 100 99 98 97 96.1 ...  $ iterations_run: int 2730  $ stopped_early : logi TRUE  $ treatments    : chr [1:8] \"T1\" \"T2\" \"T3\" \"T4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"visualise-the-output","dir":"Articles","previous_headings":"Completely Randomised Design (CRD)","what":"Visualise the Output","title":"Common Agricultural Experimental Designs with speed","text":"final step visualise optimised design. plot displays spatial arrangement treatments optimisation, allowing easily check clustering, spatial trends, patterns may affect experiment. well-randomised spatially efficient design show treatments distributed evenly across field, helping minimise neighbour effects maximise reliability results.  nicely randomised spatially optimal design!","code":"autoplot(crd_result)"},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"randomised-complete-block-design-rcbd","dir":"Articles","previous_headings":"","what":"Randomised Complete Block Design (RCBD)","title":"Common Agricultural Experimental Designs with speed","text":"RCBD one commonly used designs agricultural research. controls one source variation grouping experimental units homogeneous blocks, treatment appearing per block. Field experiments known gradient (slope, soil type, irrigation) Medium large experiments (3+ treatments) blocking factor explains significant variation Multi-location trials Consider testing 6 soybean varieties across field moisture gradient. Using 4 blocks perpendicular gradient helps control soil moisture variation. initialise dataframe design 4 blocks 6 treatments, arranged 4 rows 6 columns. Note can specify treatments items argument.  systematic block layout; block contains treatments repeating pattern. now randomised within blocks.  well-randomised spatially efficient RCBD layout.","code":"rcbd_design <- initialise_design_df(items = paste0(\"V\", 1:6), nrows = 4, ncols = 6, block_nrows = 1, block_ncols = 6) head(rcbd_design) row col treatment row_block col_block block 1   1   1        V1         1         1     1 2   2   1        V2         2         1     2 3   3   1        V3         3         1     3 4   4   1        V4         4         1     4 5   1   2        V5         1         1     1 6   2   2        V6         2         1     2 rcbd_result <- speed(rcbd_design,                       swap = \"treatment\",                      swap_within = \"block\",                      seed = 42) Iteration: 1000 Score: 1.6 Best: 1.6 Since Improvement: 672 Iteration: 2000 Score: 1.6 Best: 1.6 Since Improvement: 1672 Early stopping at iteration 2328 rcbd_result Optimised Experimental Design ---------------------------- Score: 1.6 Iterations Run: 2329 Stopped Early: TRUE Treatments: V1, V2, V3, V4, V5, V6 Seed: 42 str(rcbd_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    24 obs. of  6 variables:   ..$ row      : int [1:24] 1 1 1 1 1 1 2 2 2 2 ...   ..$ col      : int [1:24] 1 2 3 4 5 6 1 2 3 4 ...   ..$ treatment: chr [1:24] \"V4\" \"V1\" \"V5\" \"V6\" ...   ..$ row_block: int [1:24] 1 1 1 1 1 1 2 2 2 2 ...   ..$ col_block: int [1:24] 1 1 1 1 1 1 1 1 1 1 ...   ..$ block    : num [1:24] 1 1 1 1 1 1 2 2 2 2 ...  $ score         : num 1.6  $ scores        : num [1:2329] 34 29.6 25.2 21.6 18.4 16.2 13 12.2 8.6 10.4 ...  $ temperatures  : num [1:2329] 100 99 98 97 96.1 ...  $ iterations_run: int 2329  $ stopped_early : logi TRUE  $ treatments    : chr [1:6] \"V1\" \"V2\" \"V3\" \"V4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(rcbd_result)"},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"overview-1","dir":"Articles","previous_headings":"","what":"Overview","title":"Common Agricultural Experimental Designs with speed","text":"RCBD one commonly used designs agricultural research. controls one source variation grouping experimental units homogeneous blocks, treatment appearing per block.","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"when-to-use-1","dir":"Articles","previous_headings":"","what":"When to Use","title":"Common Agricultural Experimental Designs with speed","text":"Field experiments known gradient (slope, soil type, irrigation) Medium large experiments (3+ treatments) blocking factor explains significant variation Multi-location trials","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"example-variety-trial-across-field-gradient","dir":"Articles","previous_headings":"","what":"Example: Variety Trial Across Field Gradient","title":"Common Agricultural Experimental Designs with speed","text":"Consider testing 6 soybean varieties across field moisture gradient. Using 4 blocks perpendicular gradient helps control soil moisture variation.","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"setting-up-rcbd-with-speed","dir":"Articles","previous_headings":"","what":"Setting Up RCBD with speed","title":"Common Agricultural Experimental Designs with speed","text":"initialise dataframe design 4 blocks 6 treatments, arranged 4 rows 6 columns. Note can specify treatments items argument.  systematic block layout; block contains treatments repeating pattern. now randomised within blocks.  well-randomised spatially efficient RCBD layout.","code":"rcbd_design <- initialise_design_df(items = paste0(\"V\", 1:6), nrows = 4, ncols = 6, block_nrows = 1, block_ncols = 6) head(rcbd_design) row col treatment row_block col_block block 1   1   1        V1         1         1     1 2   2   1        V2         2         1     2 3   3   1        V3         3         1     3 4   4   1        V4         4         1     4 5   1   2        V5         1         1     1 6   2   2        V6         2         1     2 rcbd_result <- speed(rcbd_design,                       swap = \"treatment\",                      swap_within = \"block\",                      seed = 42) Iteration: 1000 Score: 1.6 Best: 1.6 Since Improvement: 672 Iteration: 2000 Score: 1.6 Best: 1.6 Since Improvement: 1672 Early stopping at iteration 2328 rcbd_result Optimised Experimental Design ---------------------------- Score: 1.6 Iterations Run: 2329 Stopped Early: TRUE Treatments: V1, V2, V3, V4, V5, V6 Seed: 42 str(rcbd_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    24 obs. of  6 variables:   ..$ row      : int [1:24] 1 1 1 1 1 1 2 2 2 2 ...   ..$ col      : int [1:24] 1 2 3 4 5 6 1 2 3 4 ...   ..$ treatment: chr [1:24] \"V4\" \"V1\" \"V5\" \"V6\" ...   ..$ row_block: int [1:24] 1 1 1 1 1 1 2 2 2 2 ...   ..$ col_block: int [1:24] 1 1 1 1 1 1 1 1 1 1 ...   ..$ block    : num [1:24] 1 1 1 1 1 1 2 2 2 2 ...  $ score         : num 1.6  $ scores        : num [1:2329] 34 29.6 25.2 21.6 18.4 16.2 13 12.2 8.6 10.4 ...  $ temperatures  : num [1:2329] 100 99 98 97 96.1 ...  $ iterations_run: int 2329  $ stopped_early : logi TRUE  $ treatments    : chr [1:6] \"V1\" \"V2\" \"V3\" \"V4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(rcbd_result)"},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"performing-the-optimisation-1","dir":"Articles","previous_headings":"Randomised Complete Block Design (RCBD)","what":"Performing the Optimisation","title":"Common Agricultural Experimental Designs with speed","text":"","code":"rcbd_result <- speed(rcbd_design,                       swap = \"treatment\",                      swap_within = \"block\",                      seed = 42) Iteration: 1000 Score: 1.6 Best: 1.6 Since Improvement: 672 Iteration: 2000 Score: 1.6 Best: 1.6 Since Improvement: 1672 Early stopping at iteration 2328 rcbd_result Optimised Experimental Design ---------------------------- Score: 1.6 Iterations Run: 2329 Stopped Early: TRUE Treatments: V1, V2, V3, V4, V5, V6 Seed: 42"},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"output-of-the-optimisation-1","dir":"Articles","previous_headings":"Randomised Complete Block Design (RCBD)","what":"Output of the Optimisation","title":"Common Agricultural Experimental Designs with speed","text":"","code":"str(rcbd_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    24 obs. of  6 variables:   ..$ row      : int [1:24] 1 1 1 1 1 1 2 2 2 2 ...   ..$ col      : int [1:24] 1 2 3 4 5 6 1 2 3 4 ...   ..$ treatment: chr [1:24] \"V4\" \"V1\" \"V5\" \"V6\" ...   ..$ row_block: int [1:24] 1 1 1 1 1 1 2 2 2 2 ...   ..$ col_block: int [1:24] 1 1 1 1 1 1 1 1 1 1 ...   ..$ block    : num [1:24] 1 1 1 1 1 1 2 2 2 2 ...  $ score         : num 1.6  $ scores        : num [1:2329] 34 29.6 25.2 21.6 18.4 16.2 13 12.2 8.6 10.4 ...  $ temperatures  : num [1:2329] 100 99 98 97 96.1 ...  $ iterations_run: int 2329  $ stopped_early : logi TRUE  $ treatments    : chr [1:6] \"V1\" \"V2\" \"V3\" \"V4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"visualise-the-output-1","dir":"Articles","previous_headings":"Randomised Complete Block Design (RCBD)","what":"Visualise the Output","title":"Common Agricultural Experimental Designs with speed","text":"well-randomised spatially efficient RCBD layout.","code":"autoplot(rcbd_result)"},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"latin-square-design","dir":"Articles","previous_headings":"","what":"Latin Square Design","title":"Common Agricultural Experimental Designs with speed","text":"Latin Square Design controls two sources variation simultaneously arranging treatments square grid treatment appears exactly row column. Small medium experiments (3-10 treatments) Two known sources variation (e.g., row column effects) Greenhouse bench experiments Field experiments two-way gradients Number treatments must equal number rows columns Limited degrees freedom error Assumes row × column interaction initialise 5 × 5 Latin square 5 treatments.  systematic Latin square layout; treatment appears per row column. design now randomised. spatial optimisation algorithm built speed, default options enough iterations, arrive Latin square design cases number rows, columns, treatments replicates equal . Note final score zero shows algorithm found perfect Latin Square solution.  well-randomised spatially efficient Latin square layout.","code":"latin_square_design <- initialise_design_df(items = 5, nrows = 5, ncols = 5) head(latin_square_design) row col treatment 1   1   1        T1 2   2   1        T2 3   3   1        T3 4   4   1        T4 5   5   1        T5 6   1   2        T1 latin_square_result <- speed(latin_square_design,                               swap = \"treatment\",                              seed = 42) Iteration: 1000 Score: 1 Best: 1 Since Improvement: 308 Early stopping at iteration 1040 latin_square_result Optimised Experimental Design ---------------------------- Score: 0 Iterations Run: 1041 Stopped Early: TRUE Treatments: T1, T2, T3, T4, T5 Seed: 42 str(latin_square_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    25 obs. of  3 variables:   ..$ row      : int [1:25] 1 1 1 1 1 2 2 2 2 2 ...   ..$ col      : int [1:25] 1 2 3 4 5 1 2 3 4 5 ...   ..$ treatment: chr [1:25] \"T3\" \"T2\" \"T5\" \"T1\" ...  $ score         : num 0  $ scores        : num [1:1041] 45 39 37 33.5 30.5 32.5 32 30.5 26.5 29 ...  $ temperatures  : num [1:1041] 100 99 98 97 96.1 ...  $ iterations_run: int 1041  $ stopped_early : logi TRUE  $ treatments    : chr [1:5] \"T1\" \"T2\" \"T3\" \"T4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(latin_square_result)"},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"overview-2","dir":"Articles","previous_headings":"","what":"Overview","title":"Common Agricultural Experimental Designs with speed","text":"Latin Square Design controls two sources variation simultaneously arranging treatments square grid treatment appears exactly row column.","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"when-to-use-2","dir":"Articles","previous_headings":"","what":"When to Use","title":"Common Agricultural Experimental Designs with speed","text":"Small medium experiments (3-10 treatments) Two known sources variation (e.g., row column effects) Greenhouse bench experiments Field experiments two-way gradients","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"constraints","dir":"Articles","previous_headings":"","what":"Constraints","title":"Common Agricultural Experimental Designs with speed","text":"Number treatments must equal number rows columns Limited degrees freedom error Assumes row × column interaction","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"setting-up-latin-square-with-speed","dir":"Articles","previous_headings":"","what":"Setting Up Latin Square with speed","title":"Common Agricultural Experimental Designs with speed","text":"initialise 5 × 5 Latin square 5 treatments.  systematic Latin square layout; treatment appears per row column. design now randomised. spatial optimisation algorithm built speed, default options enough iterations, arrive Latin square design cases number rows, columns, treatments replicates equal . Note final score zero shows algorithm found perfect Latin Square solution.  well-randomised spatially efficient Latin square layout.","code":"latin_square_design <- initialise_design_df(items = 5, nrows = 5, ncols = 5) head(latin_square_design) row col treatment 1   1   1        T1 2   2   1        T2 3   3   1        T3 4   4   1        T4 5   5   1        T5 6   1   2        T1 latin_square_result <- speed(latin_square_design,                               swap = \"treatment\",                              seed = 42) Iteration: 1000 Score: 1 Best: 1 Since Improvement: 308 Early stopping at iteration 1040 latin_square_result Optimised Experimental Design ---------------------------- Score: 0 Iterations Run: 1041 Stopped Early: TRUE Treatments: T1, T2, T3, T4, T5 Seed: 42 str(latin_square_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    25 obs. of  3 variables:   ..$ row      : int [1:25] 1 1 1 1 1 2 2 2 2 2 ...   ..$ col      : int [1:25] 1 2 3 4 5 1 2 3 4 5 ...   ..$ treatment: chr [1:25] \"T3\" \"T2\" \"T5\" \"T1\" ...  $ score         : num 0  $ scores        : num [1:1041] 45 39 37 33.5 30.5 32.5 32 30.5 26.5 29 ...  $ temperatures  : num [1:1041] 100 99 98 97 96.1 ...  $ iterations_run: int 1041  $ stopped_early : logi TRUE  $ treatments    : chr [1:5] \"T1\" \"T2\" \"T3\" \"T4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(latin_square_result)"},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"performing-the-optimisation-2","dir":"Articles","previous_headings":"Latin Square Design","what":"Performing the Optimisation","title":"Common Agricultural Experimental Designs with speed","text":"spatial optimisation algorithm built speed, default options enough iterations, arrive Latin square design cases number rows, columns, treatments replicates equal .","code":"latin_square_result <- speed(latin_square_design,                               swap = \"treatment\",                              seed = 42) Iteration: 1000 Score: 1 Best: 1 Since Improvement: 308 Early stopping at iteration 1040 latin_square_result Optimised Experimental Design ---------------------------- Score: 0 Iterations Run: 1041 Stopped Early: TRUE Treatments: T1, T2, T3, T4, T5 Seed: 42"},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"output-of-the-optimisation-2","dir":"Articles","previous_headings":"Latin Square Design","what":"Output of the Optimisation","title":"Common Agricultural Experimental Designs with speed","text":"Note final score zero shows algorithm found perfect Latin Square solution.","code":"str(latin_square_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    25 obs. of  3 variables:   ..$ row      : int [1:25] 1 1 1 1 1 2 2 2 2 2 ...   ..$ col      : int [1:25] 1 2 3 4 5 1 2 3 4 5 ...   ..$ treatment: chr [1:25] \"T3\" \"T2\" \"T5\" \"T1\" ...  $ score         : num 0  $ scores        : num [1:1041] 45 39 37 33.5 30.5 32.5 32 30.5 26.5 29 ...  $ temperatures  : num [1:1041] 100 99 98 97 96.1 ...  $ iterations_run: int 1041  $ stopped_early : logi TRUE  $ treatments    : chr [1:5] \"T1\" \"T2\" \"T3\" \"T4\" ...  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"visualise-the-output-2","dir":"Articles","previous_headings":"Latin Square Design","what":"Visualise the Output","title":"Common Agricultural Experimental Designs with speed","text":"well-randomised spatially efficient Latin square layout.","code":"autoplot(latin_square_result)"},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"split-plot-design","dir":"Articles","previous_headings":"","what":"Split-Plot Design","title":"Common Agricultural Experimental Designs with speed","text":"Split-Plot Design used treatments easier apply large areas (whole plots) others require smaller areas (sub-plots). creates hierarchical structure different levels precision. Split-Plot Designs particularly useful agricultural experiments factors difficult expensive replicate whole plot level. designs possible speed package, allowing spatial optimisation whole plots sub-plots single step. Treatments different application scales (large vs small plots) Irrigation × variety experiments Tillage × fertilizer studies treatments expensive difficult replicate Whole plots: Larger experimental units (main treatments) Sub-plots: Smaller units within whole plots (sub-treatments) Different error terms different treatment levels Now can create dataframe representing split plot design. Note initalise_design_df function currently support split plot designs directly, create manually.   systematic split plot layout; treatment appears per block wholeplot treatments, per whole plot sub-plot treatments. design now randomised. split-plot designs, use named lists specify hierarchical structure. swap parameter defines optimize level, swap_within defines constraints level. output shows optimization results design. score iterations combined entire design, treatments, stopping criteria reported separately level, allowing assess quality optimization hierarchy level.   design now optimised whole plot level sub-plot level.","code":"split_plot_design <- data.frame(     row = rep(1:12, each = 4),     col = rep(1:4, times = 12),     block = rep(1:4, each = 12),     wholeplot = rep(1:12, each = 4),     wholeplot_treatment = rep(rep(LETTERS[1:3], each = 4), times = 4),     subplot_treatment = rep(letters[1:4], 12)  ) head(split_plot_design) row col block wholeplot wholeplot_treatment subplot_treatment 1   1   1     1         1                   A                 a 2   1   2     1         1                   A                 b 3   1   3     1         1                   A                 c 4   1   4     1         1                   A                 d 5   2   1     1         2                   B                 a 6   2   2     1         2                   B                 b split_plot_result <- speed(split_plot_design,                            swap = list(wp = \"wholeplot_treatment\",                                        sp = \"subplot_treatment\"),                            swap_within = list(wp = \"block\", sp = \"wholeplot\"),                            seed = 42) Optimising level: wp Level: wp Iteration: 1000 Score: 100 Best: 100 Since Improvement: 1000 Level: wp Iteration: 2000 Score: 100 Best: 100 Since Improvement: 2000 Early stopping at iteration 2000 for level wp Optimising level: sp Early stopping at iteration 570 for level sp split_plot_result Optimised Experimental Design ---------------------------- Score: 100 Iterations Run: 2572 Stopped Early: TRUE TRUE Treatments:   wp: A, B, C   sp: a, b, c, d Seed: 42 str(split_plot_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    48 obs. of  6 variables:   ..$ row                : int [1:48] 1 1 1 1 2 2 2 2 3 3 ...   ..$ col                : int [1:48] 1 2 3 4 1 2 3 4 1 2 ...   ..$ block              : int [1:48] 1 1 1 1 1 1 1 1 1 1 ...   ..$ wholeplot          : int [1:48] 1 1 1 1 2 2 2 2 3 3 ...   ..$ wholeplot_treatment: chr [1:48] \"C\" \"C\" \"C\" \"C\" ...   ..$ subplot_treatment  : chr [1:48] \"a\" \"b\" \"c\" \"d\" ...  $ score         : num 100  $ scores        :List of 2   ..$ wp: num [1:2001] 100 104 104 104 104 104 104 104 100 100 ...   ..$ sp: num [1:571] 188 169 151 133 125 ...  $ temperatures  :List of 2   ..$ wp: num [1:2001] 100 99 98 97 96.1 ...   ..$ sp: num [1:571] 100 99 98 97 96.1 ...  $ iterations_run: num 2572  $ stopped_early : Named logi [1:2] TRUE TRUE   ..- attr(*, \"names\")= chr [1:2] \"wp\" \"sp\"  $ treatments    :List of 2   ..$ wp: chr [1:3] \"A\" \"B\" \"C\"   ..$ sp: chr [1:4] \"a\" \"b\" \"c\" \"d\"  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(split_plot_result, treatments = \"wholeplot_treatment\") autoplot(split_plot_result, treatments = \"subplot_treatment\", block = \"wholeplot\")"},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"overview-3","dir":"Articles","previous_headings":"","what":"Overview","title":"Common Agricultural Experimental Designs with speed","text":"Split-Plot Design used treatments easier apply large areas (whole plots) others require smaller areas (sub-plots). creates hierarchical structure different levels precision. Split-Plot Designs particularly useful agricultural experiments factors difficult expensive replicate whole plot level. designs possible speed package, allowing spatial optimisation whole plots sub-plots single step.","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"when-to-use-3","dir":"Articles","previous_headings":"","what":"When to Use","title":"Common Agricultural Experimental Designs with speed","text":"Treatments different application scales (large vs small plots) Irrigation × variety experiments Tillage × fertilizer studies treatments expensive difficult replicate","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"structure","dir":"Articles","previous_headings":"","what":"Structure","title":"Common Agricultural Experimental Designs with speed","text":"Whole plots: Larger experimental units (main treatments) Sub-plots: Smaller units within whole plots (sub-treatments) Different error terms different treatment levels","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"setting-up-split-plot-design-with-speed","dir":"Articles","previous_headings":"","what":"Setting Up Split Plot Design with speed","title":"Common Agricultural Experimental Designs with speed","text":"Now can create dataframe representing split plot design. Note initalise_design_df function currently support split plot designs directly, create manually.   systematic split plot layout; treatment appears per block wholeplot treatments, per whole plot sub-plot treatments. design now randomised. split-plot designs, use named lists specify hierarchical structure. swap parameter defines optimize level, swap_within defines constraints level. output shows optimization results design. score iterations combined entire design, treatments, stopping criteria reported separately level, allowing assess quality optimization hierarchy level.   design now optimised whole plot level sub-plot level.","code":"split_plot_design <- data.frame(     row = rep(1:12, each = 4),     col = rep(1:4, times = 12),     block = rep(1:4, each = 12),     wholeplot = rep(1:12, each = 4),     wholeplot_treatment = rep(rep(LETTERS[1:3], each = 4), times = 4),     subplot_treatment = rep(letters[1:4], 12)  ) head(split_plot_design) row col block wholeplot wholeplot_treatment subplot_treatment 1   1   1     1         1                   A                 a 2   1   2     1         1                   A                 b 3   1   3     1         1                   A                 c 4   1   4     1         1                   A                 d 5   2   1     1         2                   B                 a 6   2   2     1         2                   B                 b split_plot_result <- speed(split_plot_design,                            swap = list(wp = \"wholeplot_treatment\",                                        sp = \"subplot_treatment\"),                            swap_within = list(wp = \"block\", sp = \"wholeplot\"),                            seed = 42) Optimising level: wp Level: wp Iteration: 1000 Score: 100 Best: 100 Since Improvement: 1000 Level: wp Iteration: 2000 Score: 100 Best: 100 Since Improvement: 2000 Early stopping at iteration 2000 for level wp Optimising level: sp Early stopping at iteration 570 for level sp split_plot_result Optimised Experimental Design ---------------------------- Score: 100 Iterations Run: 2572 Stopped Early: TRUE TRUE Treatments:   wp: A, B, C   sp: a, b, c, d Seed: 42 str(split_plot_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    48 obs. of  6 variables:   ..$ row                : int [1:48] 1 1 1 1 2 2 2 2 3 3 ...   ..$ col                : int [1:48] 1 2 3 4 1 2 3 4 1 2 ...   ..$ block              : int [1:48] 1 1 1 1 1 1 1 1 1 1 ...   ..$ wholeplot          : int [1:48] 1 1 1 1 2 2 2 2 3 3 ...   ..$ wholeplot_treatment: chr [1:48] \"C\" \"C\" \"C\" \"C\" ...   ..$ subplot_treatment  : chr [1:48] \"a\" \"b\" \"c\" \"d\" ...  $ score         : num 100  $ scores        :List of 2   ..$ wp: num [1:2001] 100 104 104 104 104 104 104 104 100 100 ...   ..$ sp: num [1:571] 188 169 151 133 125 ...  $ temperatures  :List of 2   ..$ wp: num [1:2001] 100 99 98 97 96.1 ...   ..$ sp: num [1:571] 100 99 98 97 96.1 ...  $ iterations_run: num 2572  $ stopped_early : Named logi [1:2] TRUE TRUE   ..- attr(*, \"names\")= chr [1:2] \"wp\" \"sp\"  $ treatments    :List of 2   ..$ wp: chr [1:3] \"A\" \"B\" \"C\"   ..$ sp: chr [1:4] \"a\" \"b\" \"c\" \"d\"  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\" autoplot(split_plot_result, treatments = \"wholeplot_treatment\") autoplot(split_plot_result, treatments = \"subplot_treatment\", block = \"wholeplot\")"},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"performing-the-optimisation-3","dir":"Articles","previous_headings":"Split-Plot Design","what":"Performing the Optimisation","title":"Common Agricultural Experimental Designs with speed","text":"split-plot designs, use named lists specify hierarchical structure. swap parameter defines optimize level, swap_within defines constraints level.","code":"split_plot_result <- speed(split_plot_design,                            swap = list(wp = \"wholeplot_treatment\",                                        sp = \"subplot_treatment\"),                            swap_within = list(wp = \"block\", sp = \"wholeplot\"),                            seed = 42) Optimising level: wp Level: wp Iteration: 1000 Score: 100 Best: 100 Since Improvement: 1000 Level: wp Iteration: 2000 Score: 100 Best: 100 Since Improvement: 2000 Early stopping at iteration 2000 for level wp Optimising level: sp Early stopping at iteration 570 for level sp split_plot_result Optimised Experimental Design ---------------------------- Score: 100 Iterations Run: 2572 Stopped Early: TRUE TRUE Treatments:   wp: A, B, C   sp: a, b, c, d Seed: 42"},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"output-of-the-optimisation-3","dir":"Articles","previous_headings":"Split-Plot Design","what":"Output of the Optimisation","title":"Common Agricultural Experimental Designs with speed","text":"output shows optimization results design. score iterations combined entire design, treatments, stopping criteria reported separately level, allowing assess quality optimization hierarchy level.","code":"str(split_plot_result) List of 8  $ design_df     :Classes 'design' and 'data.frame':    48 obs. of  6 variables:   ..$ row                : int [1:48] 1 1 1 1 2 2 2 2 3 3 ...   ..$ col                : int [1:48] 1 2 3 4 1 2 3 4 1 2 ...   ..$ block              : int [1:48] 1 1 1 1 1 1 1 1 1 1 ...   ..$ wholeplot          : int [1:48] 1 1 1 1 2 2 2 2 3 3 ...   ..$ wholeplot_treatment: chr [1:48] \"C\" \"C\" \"C\" \"C\" ...   ..$ subplot_treatment  : chr [1:48] \"a\" \"b\" \"c\" \"d\" ...  $ score         : num 100  $ scores        :List of 2   ..$ wp: num [1:2001] 100 104 104 104 104 104 104 104 100 100 ...   ..$ sp: num [1:571] 188 169 151 133 125 ...  $ temperatures  :List of 2   ..$ wp: num [1:2001] 100 99 98 97 96.1 ...   ..$ sp: num [1:571] 100 99 98 97 96.1 ...  $ iterations_run: num 2572  $ stopped_early : Named logi [1:2] TRUE TRUE   ..- attr(*, \"names\")= chr [1:2] \"wp\" \"sp\"  $ treatments    :List of 2   ..$ wp: chr [1:3] \"A\" \"B\" \"C\"   ..$ sp: chr [1:4] \"a\" \"b\" \"c\" \"d\"  $ seed          : num 42  - attr(*, \"class\")= chr [1:2] \"design\" \"list\""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"visualise-the-output-3","dir":"Articles","previous_headings":"Split-Plot Design","what":"Visualise the Output","title":"Common Agricultural Experimental Designs with speed","text":"design now optimised whole plot level sub-plot level.","code":"autoplot(split_plot_result, treatments = \"wholeplot_treatment\") autoplot(split_plot_result, treatments = \"subplot_treatment\", block = \"wholeplot\")"},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"spatial-design-considerations","dir":"Articles","previous_headings":"","what":"Spatial Design Considerations","title":"Common Agricultural Experimental Designs with speed","text":"shape orientation experimental field significantly impacts design efficiency: Long, narrow fields: Favor designs blocks perpendicular long axis Square fields: Allow flexibility blocking direction Irregular shapes: May require custom design approaches Agricultural experiments often experience neighbour effects adjacent plots influence : Competition effects: Tall varieties shading short ones Contamination: Fertiliser pesticide drift Root competition: Nutrient water competition plots speed package specifically addresses issues spatial optimisation. Consider including buffer areas border plots : Reduce edge effects minimise contamination treatments Provide realistic growing conditions","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"field-shape-and-orientation","dir":"Articles","previous_headings":"","what":"Field Shape and Orientation","title":"Common Agricultural Experimental Designs with speed","text":"shape orientation experimental field significantly impacts design efficiency: Long, narrow fields: Favor designs blocks perpendicular long axis Square fields: Allow flexibility blocking direction Irregular shapes: May require custom design approaches","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"neighbour-effects","dir":"Articles","previous_headings":"","what":"Neighbour Effects","title":"Common Agricultural Experimental Designs with speed","text":"Agricultural experiments often experience neighbour effects adjacent plots influence : Competition effects: Tall varieties shading short ones Contamination: Fertiliser pesticide drift Root competition: Nutrient water competition plots speed package specifically addresses issues spatial optimisation.","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"buffer-areas","dir":"Articles","previous_headings":"","what":"Buffer Areas","title":"Common Agricultural Experimental Designs with speed","text":"Consider including buffer areas border plots : Reduce edge effects minimise contamination treatments Provide realistic growing conditions","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"using-speed-effectively","dir":"Articles","previous_headings":"","what":"Using speed Effectively","title":"Common Agricultural Experimental Designs with speed","text":"Set appropriate parameters: Balance optimisation time improvement Visualise designs: Always plot layouts implementation Compare alternatives: Test multiple blocking strategies Validate results: Check constraint satisfaction efficiency metrics","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Common Agricultural Experimental Designs with speed","text":"speed package provides powerful tools creating spatially efficient experimental designs. optimising treatment arrangements, researchers can: Reduce neighbour effects spatial confounding Improve statistical power precision Maintain design validity balance Visualise evaluate design quality Whether using simple randomised designs complex split-plot structures, spatial optimisation speed can significantly enhance efficiency reliability agricultural experiments. Montgomery, D.C. (2017). Design Analysis Experiments Mead, R. (1988). Design Experiments John, J.. & Williams, E.R. (1995). Cyclic Computer Generated Designs Bailey, R.. (2008). Design Comparative Experiments vignette demonstrates versatility speed package agricultural experimental design. advanced applications custom designs, consult package documentation additional vignettes.","code":""},{"path":"https://biometryhub.github.io/speed/articles/common_designs.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Common Agricultural Experimental Designs with speed","text":"Montgomery, D.C. (2017). Design Analysis Experiments Mead, R. (1988). Design Experiments John, J.. & Williams, E.R. (1995). Cyclic Computer Generated Designs Bailey, R.. (2008). Design Comparative Experiments vignette demonstrates versatility speed package agricultural experimental design. advanced applications custom designs, consult package documentation additional vignettes.","code":""},{"path":"https://biometryhub.github.io/speed/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam Rogers. Author, maintainer. Julian Taylor. Author. Russell Edson. Author. Wasin Pipattungsakul. Author. University Adelaide. Copyright holder, funder.           https://adelaide.edu.au/ Grains Research Development Corporation. Copyright holder, funder.           https://grdc.com.au/","code":""},{"path":"https://biometryhub.github.io/speed/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rogers S, Taylor J, Edson R, Pipattungsakul W (2025). speed: Generate Spatially Efficient Experimental Designs. R package version 0.0.1, https://biometryhub.github.io/speed/.","code":"@Manual{,   title = {speed: Generate Spatially Efficient Experimental Designs},   author = {Sam Rogers and Julian Taylor and Russell Edson and Wasin Pipattungsakul},   year = {2025},   note = {R package version 0.0.1},   url = {https://biometryhub.github.io/speed/}, }"},{"path":[]},{"path":"https://biometryhub.github.io/speed/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Generate Spatially Efficient Experimental Designs","text":"speed package optimises spatial experimental designs rearranging treatments improve statistical efficiency maintaining statistical validity. uses simulated annealing : Minimize treatment adjacency (reducing neighbor effects) Maintain spatial balance across rows columns Respect blocking constraints specified Provide visualization tools design evaluation","code":""},{"path":"https://biometryhub.github.io/speed/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Spatially Efficient Experimental Designs","text":"can install development version speed GitHub :","code":"# install.packages(\"pak\") pak::pak(\"biometryhub/speed\")"},{"path":"https://biometryhub.github.io/speed/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Generate Spatially Efficient Experimental Designs","text":"Flexible optimization experimental designs Support blocked designs Customizable optimization parameters Built-visualization functions Progress tracking optimization Early stopping convergence reached See package documentation detailed examples options.","code":""},{"path":"https://biometryhub.github.io/speed/index.html","id":"basic-example","dir":"","previous_headings":"","what":"Basic Example","title":"Generate Spatially Efficient Experimental Designs","text":"simple example optimizing 4×3 completely randomised design 4 treatments:","code":"library(speed)  # Create a simple design with 3 replicates of 4 treatments df <- data.frame(   row = rep(1:4, each = 3),   col = rep(1:3, times = 4),   treatment = rep(LETTERS[1:4], each = 3) )  # Optimise the design with seed for reproducibility result <- speed(df, \"treatment\", seed = 42) #> Iteration: 1000 Score: 1 Best: 1 Since Improvement: 975  #> Iteration: 2000 Score: 1 Best: 1 Since Improvement: 1975  #> Early stopping at iteration 2025  # Plot the optimised design autoplot(result) # View optimization progress plot_progress(result)"},{"path":"https://biometryhub.github.io/speed/index.html","id":"blocked-design","dir":"","previous_headings":"","what":"Blocked design","title":"Generate Spatially Efficient Experimental Designs","text":"can also optimise designs within blocks:","code":"# Create a design with blocks df <- data.frame(   row = rep(1:6, each = 4),   col = rep(1:4, times = 6),   treatment = rep(LETTERS[1:8], 3),   block = rep(1:3, each = 8) )  # Optimise while respecting blocks result <- speed(df,                  \"treatment\",                 swap_within = \"block\",                 iterations = 5000,                 seed = 42) #> Iteration: 1000 Score: 2.571429 Best: 2.571429 Since Improvement: 394  #> Iteration: 2000 Score: 2.571429 Best: 2.571429 Since Improvement: 1394  #> Early stopping at iteration 2606  # Plot the design with block boundaries autoplot(result)"},{"path":"https://biometryhub.github.io/speed/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Generate Spatially Efficient Experimental Designs","text":"use speed research, please cite via:","code":"citation(\"speed\") #> Warning in citation(\"speed\"): could not determine year for 'speed' from package #> DESCRIPTION file #> To cite package 'speed' in publications use: #>  #>   Rogers S, Taylor J, Edson R, Pipattungsakul W (????). _speed: #>   Generate Spatially Efficient Experimental Designs_. R package version #>   0.0.1, <https://biometryhub.github.io/speed/>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {speed: Generate Spatially Efficient Experimental Designs}, #>     author = {Sam Rogers and Julian Taylor and Russell Edson and Wasin Pipattungsakul}, #>     note = {R package version 0.0.1}, #>     url = {https://biometryhub.github.io/speed/}, #>   }"},{"path":"https://biometryhub.github.io/speed/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Generate Spatially Efficient Experimental Designs","text":"project licensed MIT License - see LICENSE file details.","code":""},{"path":"https://biometryhub.github.io/speed/reference/autoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate plots for designs generated in speed — autoplot","title":"Generate plots for designs generated in speed — autoplot","text":"Generate plots designs generated speed","code":""},{"path":"https://biometryhub.github.io/speed/reference/autoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate plots for designs generated in speed — autoplot","text":"","code":"autoplot(object, ...)  # S3 method for class 'design' autoplot(   object,   rotation = 0,   size = 4,   margin = FALSE,   palette = \"default\",   buffer = NULL,   row = NULL,   column = NULL,   block = NULL,   treatments = NULL,   legend = FALSE,   ... )"},{"path":"https://biometryhub.github.io/speed/reference/autoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate plots for designs generated in speed — autoplot","text":"object experimental design object generated speed(). ... Arguments passed methods. rotation Rotate x axis labels treatment group labels within plot. Allows easier reading long axis treatment labels. Number 0 360 (inclusive) - default 0 size Increase decrease text size within plot treatment labels. Numeric default value 4. margin Logical (default FALSE). value FALSE expand plot edges plotting area .e. remove white space plot axes. palette string specifying colour scheme use plotting vector custom colours use palette. Default equivalent \"Spectral\". Colour blind friendly palettes can also provided via options \"colour blind\" (\"color blind\", equivalent \"viridis\"), \"magma\", \"inferno\", \"plasma\", \"cividis\", \"rocket\", \"mako\" \"turbo\". palettes scales::brewer_pal() also possible. buffer string specifying buffer plots include plotting. Default NULL (buffers plotted). options \"edge\" (outer edge trial area), \"rows\" (rows), \"columns\" (columns), \"double row\" (buffer row side treatment row) \"double column\" (buffer row side treatment column). \"blocks\" (buffer around treatment block) implemented future release. row variable plot column object rows. column variable plot column object columns. block variable plot column object blocks. treatments variable plot column object treatments. legend Logical (default FALSE). TRUE, displays legend treatment colors.","code":""},{"path":"https://biometryhub.github.io/speed/reference/autoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate plots for designs generated in speed — autoplot","text":"ggplot2 object.","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/autoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate plots for designs generated in speed — autoplot","text":"","code":"# Create a design with blocks df <- data.frame(      row = rep(1:6, each = 4),      col = rep(1:4, times = 6),      treatment = rep(LETTERS[1:8], 3),      block = rep(1:3, each = 8))  # Optimise while respecting blocks result <- speed(df,                 \"treatment\",                 swap_within = \"block\",                 seed = 42) #> Iteration: 1000 Score: 2.571429 Best: 2.571429 Since Improvement: 543  #> Iteration: 2000 Score: 2.571429 Best: 2.571429 Since Improvement: 1543  #> Early stopping at iteration 2457   # Plot the design with block boundaries autoplot(result)   # Show legend autoplot(result, legend = TRUE)   # Colour blind friendly colours autoplot(result, palette = \"colour-blind\")   # Alternative colour scheme autoplot(result, palette = \"plasma\")   # Custom colour palette autoplot(result, palette = c(\"#ef746a\", \"#3fbfc5\", \"#81ae00\", \"#c37cff\",                              \"#304702\", \"#dde024\", \"#630380ff\", \"#df7700\"))"},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Adjacency Score for Design — calculate_adjacency_score","title":"Calculate Adjacency Score for Design — calculate_adjacency_score","text":"Calculates adjacency score given experimental design. adjacency score represents number adjacent plots treatment. Lower scores indicate better separation treatments.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Adjacency Score for Design — calculate_adjacency_score","text":"","code":"calculate_adjacency_score(layout_df, swap)"},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Adjacency Score for Design — calculate_adjacency_score","text":"layout_df data frame representing current design swap column name items swapped","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Adjacency Score for Design — calculate_adjacency_score","text":"Numeric score treatment adjacencies (lower better)","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Adjacency Score for Design — calculate_adjacency_score","text":"","code":"# Example 1: Design with no adjacencies design_no_adj <- data.frame(   row = c(1, 1, 1, 2, 2, 2, 3, 3, 3),   col = c(1, 2, 3, 1, 2, 3, 1, 2, 3),   treatment = c(\"A\", \"B\", \"A\", \"B\", \"A\", \"B\", \"A\", \"B\", \"A\") )  # Gives 0 calculate_adjacency_score(design_no_adj, \"treatment\") #> [1] 0  # Example 2: Design with adjacencies design_with_adj <- data.frame(   row = c(1, 1, 1, 2, 2, 2, 3, 3, 3),   col = c(1, 2, 3, 1, 2, 3, 1, 2, 3),   treatment = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"A\", \"A\", \"A\") )  # Gives value 6 calculate_adjacency_score(design_with_adj, \"treatment\") #> [1] 6"},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Balance Score for Experimental Design — calculate_balance_score","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"Calculates balance score measures evenly treatments distributed across spatial factors experimental design. Lower scores indicate better balance.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"","code":"calculate_balance_score(layout_df, swap, spatial_cols)"},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"layout_df data frame representing current design swap column name items swapped spatial_cols Column name(s) spatial factors","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"Numeric value representing total balance score. Lower values indicate better balance treatments across spatial factors.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"","code":"layout_df <- data.frame(   row = rep(1:3, each = 3),   col = rep(1:3, times = 3),   treatment = rep(letters[1:3], 3) ) calculate_balance_score(layout_df, \"treatment\", c(\"row\", \"col\")) #> [1] 9"},{"path":"https://biometryhub.github.io/speed/reference/calculate_ed.html","id":null,"dir":"Reference","previous_headings":"","what":"Even Distribution Calculation — calculate_ed","title":"Even Distribution Calculation — calculate_ed","text":"metric represents even distribution item minimum spanning tree (mst).","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_ed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Even Distribution Calculation — calculate_ed","text":"","code":"calculate_ed(design_matrix, current_ed = NULL, swapped_items = NULL)"},{"path":"https://biometryhub.github.io/speed/reference/calculate_ed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Even Distribution Calculation — calculate_ed","text":"design_matrix matrix representing design current_ed Named list current ed calculation swapped_items items just swapped","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_ed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Even Distribution Calculation — calculate_ed","text":"Named list containing: - Named list containing: msts - Named list items mst min_mst - lowest mst min_items - Pairs items lowest mst","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/calculate_ed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Even Distribution Calculation — calculate_ed","text":"","code":"design_matrix <- matrix(c(1, 2, 2, 1, 3, 3, 1, 3, 3), nrow = 3, ncol = 3) calculate_ed(design_matrix) #> $`2` #> $`2`$msts #> $`2`$msts$`2` #> [1] 1 #>  #>  #> $`2`$min_mst #> [1] 1 #>  #> $`2`$min_items #> [1] \"2\" #>  #>  #> $`4` #> $`4`$msts #> $`4`$msts$`3` #> [1] 3 #>  #>  #> $`4`$min_mst #> [1] 3 #>  #> $`4`$min_items #> [1] \"3\" #>  #>  #> $`3` #> $`3`$msts #> $`3`$msts$`1` #> [1] 2 #>  #>  #> $`3`$min_mst #> [1] 2 #>  #> $`3`$min_items #> [1] \"1\" #>  #>"},{"path":"https://biometryhub.github.io/speed/reference/calculate_efficiency_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Efficiency Factor according Piepho — calculate_efficiency_factor","title":"Calculate Efficiency Factor according Piepho — calculate_efficiency_factor","text":"Calculates efficiency factor design according Piepho 2015.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_efficiency_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Efficiency Factor according Piepho — calculate_efficiency_factor","text":"","code":"calculate_efficiency_factor(design_df, item)"},{"path":"https://biometryhub.github.io/speed/reference/calculate_efficiency_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Efficiency Factor according Piepho — calculate_efficiency_factor","text":"design_df data frame containing experimental design spatial coordinates item column name items design (e.g., treatment, variety, genotype, etc)","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_efficiency_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Efficiency Factor according Piepho — calculate_efficiency_factor","text":"numeric value representing efficiency factor design. Higher values indicate efficient designs.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_efficiency_factor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Efficiency Factor according Piepho — calculate_efficiency_factor","text":"Piepho, H. P., Williams, E., & Michel, V. (2015). Nonresolvable Row-Column Designs Even Distribution Treatment Replications. Journal Agricultural, Biological, Environmental Statistics, 21, 227-242 (2016). https://doi.org/10.1007/s13253-015-0241-2","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_efficiency_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Efficiency Factor according Piepho — calculate_efficiency_factor","text":"","code":"df_design <- initialise_design_df(c(   \"a\", \"b\", \"d\", \"c\",   \"e\", \"a\", \"f\", \"b\",   \"c\", \"f\", \"e\", \"d\" ), 3, 4)  calculate_efficiency_factor(df_design, \"treatment\") #> [1] 0.6268657"},{"path":"https://biometryhub.github.io/speed/reference/calculate_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighbour Balance Calculation — calculate_nb","title":"Neighbour Balance Calculation — calculate_nb","text":"metric counts occurrence adjacent pairs. horizontal vertical pairs counted.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighbour Balance Calculation — calculate_nb","text":"","code":"calculate_nb(design_matrix, pair_mapping = NULL)"},{"path":"https://biometryhub.github.io/speed/reference/calculate_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighbour Balance Calculation — calculate_nb","text":"design_matrix matrix representing design pair_mapping named vector pairs generated create_pair_mapping","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neighbour Balance Calculation — calculate_nb","text":"Named list containing: nb - Table pairs items number occurrence max_nb - highest number occurrence max_pairs - Vector pairs items highest number occurrence","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/calculate_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Neighbour Balance Calculation — calculate_nb","text":"","code":"design_matrix <- matrix(c(1, 2, 2, 1, 3, 3, 1, 3, 3), nrow = 3, ncol = 3) calculate_nb(design_matrix) #> $nb #> $nb$`3,3` #> [1] 4 #>  #> $nb$`2,2` #> [1] 1 #>  #> $nb$`2,3` #> [1] 2 #>  #> $nb$`1,1` #> [1] 2 #>  #> $nb$`1,2` #> [1] 1 #>  #> $nb$`1,3` #> [1] 2 #>  #>  #> $max_nb #> [1] 4 #>  #> $max_pairs #> [1] \"3,3\" #>  #> $var #> [1] 1.2 #>"},{"path":"https://biometryhub.github.io/speed/reference/create_pair_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Pair Mapping — create_pair_mapping","title":"Create Pair Mapping — create_pair_mapping","text":"Create item pair mapping calculate_nb.","code":""},{"path":"https://biometryhub.github.io/speed/reference/create_pair_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Pair Mapping — create_pair_mapping","text":"","code":"create_pair_mapping(items)"},{"path":"https://biometryhub.github.io/speed/reference/create_pair_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Pair Mapping — create_pair_mapping","text":"items Vector items design","code":""},{"path":"https://biometryhub.github.io/speed/reference/create_pair_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Pair Mapping — create_pair_mapping","text":"Named vector item pairs character separated \",\": \"<item 2>,<item 1>\" - \"<item 1>,<item 2>\" \"<item 3>,<item 1>\" - \"<item 1>,<item 3>\" ... \",<item 1>\" - \"<item 1>,\" \",<item 1>\" - \"<item 1>,\" \"<item 3>,<item 2>\" - \"<item 2>,<item 3>\" \"<item 4>,<item 2>\" - \"<item 2>,<item 4>\" ... \",<item 2>\" - \"<item 2>,\" \",<item 2>\" - \"<item 2>,\" ... \",\" - \",\" \"<item 1>,<item 1>\" - \"<item 1>,<item 1>\" \"<item 2>,<item 2>\" - \"<item 2>,<item 2>\" ... \",\" - \",\" \",\" - \",\"","code":""},{"path":"https://biometryhub.github.io/speed/reference/create_pair_mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Pair Mapping — create_pair_mapping","text":"","code":"treatments <- c(rep(1:10, 4), rep(11:16, 3), rep(17:27, 2)) create_pair_mapping(treatments) #>     2,1     3,1     4,1     5,1     6,1     7,1     8,1     9,1    10,1    11,1  #>   \"1,2\"   \"1,3\"   \"1,4\"   \"1,5\"   \"1,6\"   \"1,7\"   \"1,8\"   \"1,9\"  \"1,10\"  \"1,11\"  #>    12,1    13,1    14,1    15,1    16,1    17,1    18,1    19,1    20,1    21,1  #>  \"1,12\"  \"1,13\"  \"1,14\"  \"1,15\"  \"1,16\"  \"1,17\"  \"1,18\"  \"1,19\"  \"1,20\"  \"1,21\"  #>    22,1    23,1    24,1    25,1    26,1    27,1     3,2     4,2     5,2     6,2  #>  \"1,22\"  \"1,23\"  \"1,24\"  \"1,25\"  \"1,26\"  \"1,27\"   \"2,3\"   \"2,4\"   \"2,5\"   \"2,6\"  #>     7,2     8,2     9,2    10,2    11,2    12,2    13,2    14,2    15,2    16,2  #>   \"2,7\"   \"2,8\"   \"2,9\"  \"2,10\"  \"2,11\"  \"2,12\"  \"2,13\"  \"2,14\"  \"2,15\"  \"2,16\"  #>    17,2    18,2    19,2    20,2    21,2    22,2    23,2    24,2    25,2    26,2  #>  \"2,17\"  \"2,18\"  \"2,19\"  \"2,20\"  \"2,21\"  \"2,22\"  \"2,23\"  \"2,24\"  \"2,25\"  \"2,26\"  #>    27,2     4,3     5,3     6,3     7,3     8,3     9,3    10,3    11,3    12,3  #>  \"2,27\"   \"3,4\"   \"3,5\"   \"3,6\"   \"3,7\"   \"3,8\"   \"3,9\"  \"3,10\"  \"3,11\"  \"3,12\"  #>    13,3    14,3    15,3    16,3    17,3    18,3    19,3    20,3    21,3    22,3  #>  \"3,13\"  \"3,14\"  \"3,15\"  \"3,16\"  \"3,17\"  \"3,18\"  \"3,19\"  \"3,20\"  \"3,21\"  \"3,22\"  #>    23,3    24,3    25,3    26,3    27,3     5,4     6,4     7,4     8,4     9,4  #>  \"3,23\"  \"3,24\"  \"3,25\"  \"3,26\"  \"3,27\"   \"4,5\"   \"4,6\"   \"4,7\"   \"4,8\"   \"4,9\"  #>    10,4    11,4    12,4    13,4    14,4    15,4    16,4    17,4    18,4    19,4  #>  \"4,10\"  \"4,11\"  \"4,12\"  \"4,13\"  \"4,14\"  \"4,15\"  \"4,16\"  \"4,17\"  \"4,18\"  \"4,19\"  #>    20,4    21,4    22,4    23,4    24,4    25,4    26,4    27,4     6,5     7,5  #>  \"4,20\"  \"4,21\"  \"4,22\"  \"4,23\"  \"4,24\"  \"4,25\"  \"4,26\"  \"4,27\"   \"5,6\"   \"5,7\"  #>     8,5     9,5    10,5    11,5    12,5    13,5    14,5    15,5    16,5    17,5  #>   \"5,8\"   \"5,9\"  \"5,10\"  \"5,11\"  \"5,12\"  \"5,13\"  \"5,14\"  \"5,15\"  \"5,16\"  \"5,17\"  #>    18,5    19,5    20,5    21,5    22,5    23,5    24,5    25,5    26,5    27,5  #>  \"5,18\"  \"5,19\"  \"5,20\"  \"5,21\"  \"5,22\"  \"5,23\"  \"5,24\"  \"5,25\"  \"5,26\"  \"5,27\"  #>     7,6     8,6     9,6    10,6    11,6    12,6    13,6    14,6    15,6    16,6  #>   \"6,7\"   \"6,8\"   \"6,9\"  \"6,10\"  \"6,11\"  \"6,12\"  \"6,13\"  \"6,14\"  \"6,15\"  \"6,16\"  #>    17,6    18,6    19,6    20,6    21,6    22,6    23,6    24,6    25,6    26,6  #>  \"6,17\"  \"6,18\"  \"6,19\"  \"6,20\"  \"6,21\"  \"6,22\"  \"6,23\"  \"6,24\"  \"6,25\"  \"6,26\"  #>    27,6     8,7     9,7    10,7    11,7    12,7    13,7    14,7    15,7    16,7  #>  \"6,27\"   \"7,8\"   \"7,9\"  \"7,10\"  \"7,11\"  \"7,12\"  \"7,13\"  \"7,14\"  \"7,15\"  \"7,16\"  #>    17,7    18,7    19,7    20,7    21,7    22,7    23,7    24,7    25,7    26,7  #>  \"7,17\"  \"7,18\"  \"7,19\"  \"7,20\"  \"7,21\"  \"7,22\"  \"7,23\"  \"7,24\"  \"7,25\"  \"7,26\"  #>    27,7     9,8    10,8    11,8    12,8    13,8    14,8    15,8    16,8    17,8  #>  \"7,27\"   \"8,9\"  \"8,10\"  \"8,11\"  \"8,12\"  \"8,13\"  \"8,14\"  \"8,15\"  \"8,16\"  \"8,17\"  #>    18,8    19,8    20,8    21,8    22,8    23,8    24,8    25,8    26,8    27,8  #>  \"8,18\"  \"8,19\"  \"8,20\"  \"8,21\"  \"8,22\"  \"8,23\"  \"8,24\"  \"8,25\"  \"8,26\"  \"8,27\"  #>    10,9    11,9    12,9    13,9    14,9    15,9    16,9    17,9    18,9    19,9  #>  \"9,10\"  \"9,11\"  \"9,12\"  \"9,13\"  \"9,14\"  \"9,15\"  \"9,16\"  \"9,17\"  \"9,18\"  \"9,19\"  #>    20,9    21,9    22,9    23,9    24,9    25,9    26,9    27,9   11,10   12,10  #>  \"9,20\"  \"9,21\"  \"9,22\"  \"9,23\"  \"9,24\"  \"9,25\"  \"9,26\"  \"9,27\" \"10,11\" \"10,12\"  #>   13,10   14,10   15,10   16,10   17,10   18,10   19,10   20,10   21,10   22,10  #> \"10,13\" \"10,14\" \"10,15\" \"10,16\" \"10,17\" \"10,18\" \"10,19\" \"10,20\" \"10,21\" \"10,22\"  #>   23,10   24,10   25,10   26,10   27,10   12,11   13,11   14,11   15,11   16,11  #> \"10,23\" \"10,24\" \"10,25\" \"10,26\" \"10,27\" \"11,12\" \"11,13\" \"11,14\" \"11,15\" \"11,16\"  #>   17,11   18,11   19,11   20,11   21,11   22,11   23,11   24,11   25,11   26,11  #> \"11,17\" \"11,18\" \"11,19\" \"11,20\" \"11,21\" \"11,22\" \"11,23\" \"11,24\" \"11,25\" \"11,26\"  #>   27,11   13,12   14,12   15,12   16,12   17,12   18,12   19,12   20,12   21,12  #> \"11,27\" \"12,13\" \"12,14\" \"12,15\" \"12,16\" \"12,17\" \"12,18\" \"12,19\" \"12,20\" \"12,21\"  #>   22,12   23,12   24,12   25,12   26,12   27,12   14,13   15,13   16,13   17,13  #> \"12,22\" \"12,23\" \"12,24\" \"12,25\" \"12,26\" \"12,27\" \"13,14\" \"13,15\" \"13,16\" \"13,17\"  #>   18,13   19,13   20,13   21,13   22,13   23,13   24,13   25,13   26,13   27,13  #> \"13,18\" \"13,19\" \"13,20\" \"13,21\" \"13,22\" \"13,23\" \"13,24\" \"13,25\" \"13,26\" \"13,27\"  #>   15,14   16,14   17,14   18,14   19,14   20,14   21,14   22,14   23,14   24,14  #> \"14,15\" \"14,16\" \"14,17\" \"14,18\" \"14,19\" \"14,20\" \"14,21\" \"14,22\" \"14,23\" \"14,24\"  #>   25,14   26,14   27,14   16,15   17,15   18,15   19,15   20,15   21,15   22,15  #> \"14,25\" \"14,26\" \"14,27\" \"15,16\" \"15,17\" \"15,18\" \"15,19\" \"15,20\" \"15,21\" \"15,22\"  #>   23,15   24,15   25,15   26,15   27,15   17,16   18,16   19,16   20,16   21,16  #> \"15,23\" \"15,24\" \"15,25\" \"15,26\" \"15,27\" \"16,17\" \"16,18\" \"16,19\" \"16,20\" \"16,21\"  #>   22,16   23,16   24,16   25,16   26,16   27,16   18,17   19,17   20,17   21,17  #> \"16,22\" \"16,23\" \"16,24\" \"16,25\" \"16,26\" \"16,27\" \"17,18\" \"17,19\" \"17,20\" \"17,21\"  #>   22,17   23,17   24,17   25,17   26,17   27,17   19,18   20,18   21,18   22,18  #> \"17,22\" \"17,23\" \"17,24\" \"17,25\" \"17,26\" \"17,27\" \"18,19\" \"18,20\" \"18,21\" \"18,22\"  #>   23,18   24,18   25,18   26,18   27,18   20,19   21,19   22,19   23,19   24,19  #> \"18,23\" \"18,24\" \"18,25\" \"18,26\" \"18,27\" \"19,20\" \"19,21\" \"19,22\" \"19,23\" \"19,24\"  #>   25,19   26,19   27,19   21,20   22,20   23,20   24,20   25,20   26,20   27,20  #> \"19,25\" \"19,26\" \"19,27\" \"20,21\" \"20,22\" \"20,23\" \"20,24\" \"20,25\" \"20,26\" \"20,27\"  #>   22,21   23,21   24,21   25,21   26,21   27,21   23,22   24,22   25,22   26,22  #> \"21,22\" \"21,23\" \"21,24\" \"21,25\" \"21,26\" \"21,27\" \"22,23\" \"22,24\" \"22,25\" \"22,26\"  #>   27,22   24,23   25,23   26,23   27,23   25,24   26,24   27,24   26,25   27,25  #> \"22,27\" \"23,24\" \"23,25\" \"23,26\" \"23,27\" \"24,25\" \"24,26\" \"24,27\" \"25,26\" \"25,27\"  #>   27,26     1,1     2,2     3,3     4,4     5,5     6,6     7,7     8,8     9,9  #> \"26,27\"   \"1,1\"   \"2,2\"   \"3,3\"   \"4,4\"   \"5,5\"   \"6,6\"   \"7,7\"   \"8,8\"   \"9,9\"  #>   10,10   11,11   12,12   13,13   14,14   15,15   16,16   17,17   18,18   19,19  #> \"10,10\" \"11,11\" \"12,12\" \"13,13\" \"14,14\" \"15,15\" \"16,16\" \"17,17\" \"18,18\" \"19,19\"  #>   20,20   21,21   22,22   23,23   24,24   25,25   26,26   27,27  #> \"20,20\" \"21,21\" \"22,22\" \"23,23\" \"24,24\" \"25,25\" \"26,26\" \"27,27\""},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_ed_3_reps.html","id":null,"dir":"Reference","previous_headings":"","what":"Even Distribution Calculation for 3 Replications — .calculate_ed_3_reps","title":"Even Distribution Calculation for 3 Replications — .calculate_ed_3_reps","text":"metric represents even distribution items 3 replications minimum spanning tree (mst).","code":""},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_ed_3_reps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Even Distribution Calculation for 3 Replications — .calculate_ed_3_reps","text":"","code":".calculate_ed_3_reps(edges, current_ed = NULL)"},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_ed_3_reps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Even Distribution Calculation for 3 Replications — .calculate_ed_3_reps","text":"edges list vectors edge weights","code":""},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_ed_3_reps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Even Distribution Calculation for 3 Replications — .calculate_ed_3_reps","text":"Named list containing: msts - Named list pairs items mst min_mst - lowest mst min_items - Pairs items lowest mst","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighbor Balance Calculation without Pair Mapping — .calculate_nb","title":"Neighbor Balance Calculation without Pair Mapping — .calculate_nb","text":"metric counts occurrence adjacent pairs. horizontal vertical pairs counted.","code":""},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighbor Balance Calculation without Pair Mapping — .calculate_nb","text":"","code":".calculate_nb(design_matrix)"},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighbor Balance Calculation without Pair Mapping — .calculate_nb","text":"design_matrix matrix representing design","code":""},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neighbor Balance Calculation without Pair Mapping — .calculate_nb","text":"Named list containing: nb - Named list pairs items number occurrence max_nb - highest number occurrence max_pairs - Vector pairs items highest number occurrence","code":""},{"path":"https://biometryhub.github.io/speed/reference/env_add_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Add One to Environment — env_add_one","title":"Add One to Environment — env_add_one","text":"Add one value key environment exists, otherwise set one key.","code":""},{"path":"https://biometryhub.github.io/speed/reference/env_add_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add One to Environment — env_add_one","text":"","code":"env_add_one(env, key)"},{"path":"https://biometryhub.github.io/speed/reference/env_add_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add One to Environment — env_add_one","text":"env environment key key environment","code":""},{"path":"https://biometryhub.github.io/speed/reference/generate_neighbour.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Neighbour Design by Swapping Treatments — generate_neighbour","title":"Generate a Neighbour Design by Swapping Treatments — generate_neighbour","text":"Generate Neighbour Design Swapping Treatments","code":""},{"path":"https://biometryhub.github.io/speed/reference/generate_neighbour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Neighbour Design by Swapping Treatments — generate_neighbour","text":"","code":"generate_neighbour(   design,   swap,   swap_within,   level = NULL,   swap_count = getOption(\"speed.swap_count\", 1),   swap_all_blocks = getOption(\"speed.swap_all_blocks\", FALSE) )"},{"path":"https://biometryhub.github.io/speed/reference/generate_neighbour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Neighbour Design by Swapping Treatments — generate_neighbour","text":"design Data frame containing current design swap Column name treatment swap, named list hierarchical designs swap_within Column name defining groups within swap treatments, named list hierarchical designs level level design optimised current loop. Relevant sequential designs. Simple designs pass NULL. swap_count Number swaps perform swap_all_blocks Whether perform swaps blocks just one","code":""},{"path":"https://biometryhub.github.io/speed/reference/generate_neighbour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Neighbour Design by Swapping Treatments — generate_neighbour","text":"list updated design swapping information swapped items","code":""},{"path":"https://biometryhub.github.io/speed/reference/generate_sequential_neighbour.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate neighbour for sequential or hierarchical designs — generate_sequential_neighbour","title":"Generate neighbour for sequential or hierarchical designs — generate_sequential_neighbour","text":"Generate neighbour sequential hierarchical designs","code":""},{"path":"https://biometryhub.github.io/speed/reference/generate_sequential_neighbour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate neighbour for sequential or hierarchical designs — generate_sequential_neighbour","text":"","code":"generate_sequential_neighbour(   design,   swap,   swap_within,   level,   swap_count,   swap_all_blocks )"},{"path":"https://biometryhub.github.io/speed/reference/generate_simple_neighbour.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate neighbour for simple (non-hierarchical) designs — generate_simple_neighbour","title":"Generate neighbour for simple (non-hierarchical) designs — generate_simple_neighbour","text":"Generate neighbour simple (non-hierarchical) designs","code":""},{"path":"https://biometryhub.github.io/speed/reference/generate_simple_neighbour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate neighbour for simple (non-hierarchical) designs — generate_simple_neighbour","text":"","code":"generate_simple_neighbour(   design,   swap,   swap_within,   level,   swap_count,   swap_all_blocks )"},{"path":"https://biometryhub.github.io/speed/reference/get_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Weighted Edges — get_edges","title":"Get Weighted Edges — get_edges","text":"Calculate weight edges vertices.","code":""},{"path":"https://biometryhub.github.io/speed/reference/get_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Weighted Edges — get_edges","text":"","code":"get_edges(vertices)"},{"path":"https://biometryhub.github.io/speed/reference/get_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Weighted Edges — get_edges","text":"vertices Named list vertices containing: - list (vertex 1, vertex 2, ...)","code":""},{"path":"https://biometryhub.github.io/speed/reference/get_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Weighted Edges — get_edges","text":"Named list containing: - vector edge weights","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/get_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Weighted Edges — get_edges","text":"","code":"design_matrix <- matrix(c(1, 2, 2, 1, 3, 2, 1, 3, 3), nrow = 3, ncol = 3) vertices <- get_vertices(design_matrix) edges <- get_edges(vertices)"},{"path":"https://biometryhub.github.io/speed/reference/get_vertices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Vertices of Each Item — get_vertices","title":"Get Vertices of Each Item — get_vertices","text":"Get vertices item design matrix.","code":""},{"path":"https://biometryhub.github.io/speed/reference/get_vertices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Vertices of Each Item — get_vertices","text":"","code":"get_vertices(design_matrix)"},{"path":"https://biometryhub.github.io/speed/reference/get_vertices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Vertices of Each Item — get_vertices","text":"design_matrix matrix representing design","code":""},{"path":"https://biometryhub.github.io/speed/reference/get_vertices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Vertices of Each Item — get_vertices","text":"Named list containing: - list (vertex 1, vertex 2, ...)","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/get_vertices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Vertices of Each Item — get_vertices","text":"","code":"design_matrix <- matrix(c(1, 2, 2, 1, 3, 2, 1, 3, 3), nrow = 3, ncol = 3) vertices <- get_vertices(design_matrix)"},{"path":"https://biometryhub.github.io/speed/reference/initialise_design_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialise Design Data Frame — initialise_design_df","title":"Initialise Design Data Frame — initialise_design_df","text":"Initialise design data frame without blocking.","code":""},{"path":"https://biometryhub.github.io/speed/reference/initialise_design_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialise Design Data Frame — initialise_design_df","text":"","code":"initialise_design_df(   items,   nrows,   ncols,   block_nrows = NULL,   block_ncols = NULL )  initialize_design_df(   items,   nrows,   ncols,   block_nrows = NULL,   block_ncols = NULL )"},{"path":"https://biometryhub.github.io/speed/reference/initialise_design_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialise Design Data Frame — initialise_design_df","text":"items Items placed design. Either single numeric value (number equally replicated items), vector items. nrows Number rows design ncols Number columns design block_nrows Number rows block block_ncols Number columns block","code":""},{"path":"https://biometryhub.github.io/speed/reference/initialise_design_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialise Design Data Frame — initialise_design_df","text":"data frame containing design","code":""},{"path":"https://biometryhub.github.io/speed/reference/initialise_design_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialise Design Data Frame — initialise_design_df","text":"","code":"initialise_design_df(   items = c(1, 2, 2, 1, 3, 3, 1, 3, 3),   nrows = 3,   ncols = 3 ) #>   row col treatment #> 1   1   1         1 #> 2   2   1         2 #> 3   3   1         2 #> 4   1   2         1 #> 5   2   2         3 #> 6   3   2         3 #> 7   1   3         1 #> 8   2   3         3 #> 9   3   3         3  # blocking initialise_design_df(rep(1:8, 4), 8, 4, 2, 2) #>    row col treatment row_block col_block block #> 1    1   1         1         1         1     1 #> 2    2   1         2         1         1     1 #> 3    3   1         3         2         1     2 #> 4    4   1         4         2         1     2 #> 5    5   1         5         3         1     3 #> 6    6   1         6         3         1     3 #> 7    7   1         7         4         1     4 #> 8    8   1         8         4         1     4 #> 9    1   2         1         1         1     1 #> 10   2   2         2         1         1     1 #> 11   3   2         3         2         1     2 #> 12   4   2         4         2         1     2 #> 13   5   2         5         3         1     3 #> 14   6   2         6         3         1     3 #> 15   7   2         7         4         1     4 #> 16   8   2         8         4         1     4 #> 17   1   3         1         1         2     5 #> 18   2   3         2         1         2     5 #> 19   3   3         3         2         2     6 #> 20   4   3         4         2         2     6 #> 21   5   3         5         3         2     7 #> 22   6   3         6         3         2     7 #> 23   7   3         7         4         2     8 #> 24   8   3         8         4         2     8 #> 25   1   4         1         1         2     5 #> 26   2   4         2         1         2     5 #> 27   3   4         3         2         2     6 #> 28   4   4         4         2         2     6 #> 29   5   4         5         3         2     7 #> 30   6   4         6         3         2     7 #> 31   7   4         7         4         2     8 #> 32   8   4         8         4         2     8"},{"path":"https://biometryhub.github.io/speed/reference/objective_function_piepho.html","id":null,"dir":"Reference","previous_headings":"","what":"Objective Function with Metric from Piepho — objective_function_piepho","title":"Objective Function with Metric from Piepho — objective_function_piepho","text":"Create objective function including even distribution neighbor balance introduced Piepho 2018.","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_function_piepho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective Function with Metric from Piepho — objective_function_piepho","text":"","code":"objective_function_piepho(   design,   swap,   spatial_cols,   current_score_obj = NULL,   swapped_items = NULL,   pair_mapping = NULL,   ... )"},{"path":"https://biometryhub.github.io/speed/reference/objective_function_piepho.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective Function with Metric from Piepho — objective_function_piepho","text":"design data frame representing spatial information design swap column name items swapped spatial_cols Column name(s) spatial factors current_score_obj named list containing current score swapped_items items just swapped pair_mapping named vector pairs generated create_pair_mapping ... Extra parameters passed speed","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_function_piepho.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Objective Function with Metric from Piepho — objective_function_piepho","text":"function returns named list numeric values one required name score representing score design (lower better) signature function(design_df, swap, spatial_cols, ...). See signature details objective_function_signature.","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_function_piepho.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Objective Function with Metric from Piepho — objective_function_piepho","text":"Piepho, H. P., Michel, V., & Williams, E. (2018). Neighbor balance evenness distribution treatment replications row-column designs. Biometrical journal. Biometrische Zeitschrift, 60(6), 1172–1189. https://doi.org/10.1002/bimj.201800013","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/objective_function_piepho.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Objective Function with Metric from Piepho — objective_function_piepho","text":"","code":"design_df <- initialise_design_df(   items = c(1, 2, 2, 1, 3, 3, 1, 3, 3),   nrows = 3,   ncols = 3 )  pair_mapping <- create_pair_mapping(design_df$treatment) objective_function_piepho(design_df, \"treatment\", c(\"row\", \"col\"), pair_mapping = pair_mapping) #> $score #> [1] 16.36667 #>  #> $ed #> $ed$`2` #> $ed$`2`$msts #> $ed$`2`$msts$`2` #> [1] 1 #>  #>  #> $ed$`2`$min_mst #> [1] 1 #>  #> $ed$`2`$min_items #> [1] \"2\" #>  #>  #> $ed$`4` #> $ed$`4`$msts #> $ed$`4`$msts$`3` #> [1] 3 #>  #>  #> $ed$`4`$min_mst #> [1] 3 #>  #> $ed$`4`$min_items #> [1] \"3\" #>  #>  #> $ed$`3` #> $ed$`3`$msts #> $ed$`3`$msts$`1` #> [1] 2 #>  #>  #> $ed$`3`$min_mst #> [1] 2 #>  #> $ed$`3`$min_items #> [1] \"1\" #>  #>  #>  #> $bal #> [1] 8 #>  #> $adj #> [1] 7 #>  #> $nb #> $nb$nb #> sorted_pairs #> 1,1 1,2 1,3 2,2 2,3 3,3  #>   2   1   2   1   2   4  #>  #> $nb$max_nb #> [1] 4 #>  #> $nb$max_pairs #> [1] \"3,3\" #>  #> $nb$var #> [1] 1.2 #>  #>  # usage in speed, speed(..., obj_function = objective_function_piepho, pair_mapping = pair_mapping)"},{"path":"https://biometryhub.github.io/speed/reference/objective_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Default objective functions — objective_function_signature","title":"Default objective functions — objective_function_signature","text":"Default Objective Function Design Optimization","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default objective functions — objective_function_signature","text":"","code":"objective_function_signature(layout_df, swap, spatial_cols, ...)  objective_function(   layout_df,   swap,   spatial_cols,   adj_weight = getOption(\"speed.adj_weight\", 1),   bal_weight = getOption(\"speed.bal_weight\", 1),   ... )"},{"path":"https://biometryhub.github.io/speed/reference/objective_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default objective functions — objective_function_signature","text":"layout_df data frame representing current design swap column name items swapped spatial_cols Column name(s) spatial factors ... Extra parameters passed speed adj_weight Weight adjacency score (default: 1) bal_weight Weight balance score (default: 1)","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default objective functions — objective_function_signature","text":"numeric value representing score design (lower better)","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default objective functions — objective_function_signature","text":"","code":"layout_df <- data.frame(   row = rep(1:3, each = 3),   col = rep(1:3, times = 3),   treatment = rep(letters[1:3], 3) ) objective_function(layout_df, \"treatment\", c(\"row\", \"col\")) #> $score #> [1] 15 #>"},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Optimization Progress — plot_progress","title":"Plot Optimization Progress — plot_progress","text":"Creates two plots showing progression optimization: Objective score iterations Temperature decay iterations","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Optimization Progress — plot_progress","text":"","code":"plot_progress(result)"},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Optimization Progress — plot_progress","text":"result list containing optimization results following elements: scores - Numeric vector objective scores iteration temperatures - Numeric vector temperatures iteration","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Optimization Progress — plot_progress","text":"return value; prints two ggplot objects showing: Progress objective score Cooling schedule (temperature decay)","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Optimization Progress — plot_progress","text":"","code":"# Create a simple design df <- data.frame(   row = rep(1:3, each = 3),   col = rep(1:3, times = 3),   treatment = rep(LETTERS[1:3], 3) )  # Optimise the design result <- speed(df, \"treatment\") #> Early stopping at iteration 76   # Plot optimization progress plot_progress(result)"},{"path":"https://biometryhub.github.io/speed/reference/print.design.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for speed design objects — print.design","title":"Print method for speed design objects — print.design","text":"Print method speed design objects","code":""},{"path":"https://biometryhub.github.io/speed/reference/print.design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for speed design objects — print.design","text":"","code":"# S3 method for class 'design' print(x, ...)"},{"path":"https://biometryhub.github.io/speed/reference/print.design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for speed design objects — print.design","text":"x Design object returned speed function ... Additional arguments passed print","code":""},{"path":"https://biometryhub.github.io/speed/reference/print.design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for speed design objects — print.design","text":"x invisibly","code":""},{"path":"https://biometryhub.github.io/speed/reference/pseudo_inverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Pseudo Inverse — pseudo_inverse","title":"Pseudo Inverse — pseudo_inverse","text":"Calculates Moore-Penrose pseudo inverse matrix.","code":""},{"path":"https://biometryhub.github.io/speed/reference/pseudo_inverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pseudo Inverse — pseudo_inverse","text":"","code":"pseudo_inverse(a_matrix, tolerance = 1e-10)"},{"path":"https://biometryhub.github.io/speed/reference/pseudo_inverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pseudo Inverse — pseudo_inverse","text":"a_matrix matrix tolerance tolerance value singular values","code":""},{"path":"https://biometryhub.github.io/speed/reference/pseudo_inverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pseudo Inverse — pseudo_inverse","text":"Moore-Penrose pseudo inverse design matrix.","code":""},{"path":"https://biometryhub.github.io/speed/reference/shuffle_items.html","id":null,"dir":"Reference","previous_headings":"","what":"Shuffle Items in A Group — shuffle_items","title":"Shuffle Items in A Group — shuffle_items","text":"Shuffle Items Group","code":""},{"path":"https://biometryhub.github.io/speed/reference/shuffle_items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shuffle Items in A Group — shuffle_items","text":"","code":"shuffle_items(design, swap, swap_within, seed = NULL)"},{"path":"https://biometryhub.github.io/speed/reference/shuffle_items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shuffle Items in A Group — shuffle_items","text":"design Data frame containing current design swap Column name treatment swap, named list hierarchical designs swap_within Column name defining groups within swap treatments, named list hierarchical designs seed numeric value random seed. provided, ensures reproducibility results (default: NULL).","code":""},{"path":"https://biometryhub.github.io/speed/reference/shuffle_items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shuffle Items in A Group — shuffle_items","text":"data frame items shuffled","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed-options.html","id":null,"dir":"Reference","previous_headings":"","what":"Package Options for speed — speed-options","title":"Package Options for speed — speed-options","text":"page describes options can set control behaviour speed package, especially technical options speed() function controlling behaviour optimisation algorithm.","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed-options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Package Options for speed — speed-options","text":"speed.swap_count Number treatment swaps per iteration (default: 1). speed.swap_all_blocks Logical; TRUE, performs swaps blocks iteration (default: FALSE). speed.adaptive_swaps Logical; TRUE, adjusts swap parameters based temperature (default: FALSE). speed.start_temp Starting temperature simulated annealing (default: 100). higher start temperature allows algorithm accept worse solutions early , encouraging exploration solution space helping avoid local optima. Lower values make algorithm greedier start, can speed convergence increases risk getting stuck poor solution. good starting temperature allows moderately worse solutions accepted probability 70–90% beginning optimisation. speed.cooling_rate Rate temperature decreases simulated annealing (default: 0.99). controls quickly algorithm shifts exploration exploitation. temperature updated iteration multiplying rate: T_i = start_temp * cooling_rate^. higher cooling rate (e.g. 0.995–0.999) results slower cooling longer exploration phase, generally better complex noisy optimisation landscapes. Lower values (e.g. 0.95–0.98) cool quickly, leading faster convergence greater risk premature convergence suboptimal design. speed.random_initialisation Logical; TRUE, randomly shuffle items within swap_within (default: FALSE) speed.adj_weight Weight adjacency score (default: 0). speed.bal_weight Weight balance score (default: 1).","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed-options.html","id":"setting-options","dir":"Reference","previous_headings":"","what":"Setting options","title":"Package Options for speed — speed-options","text":"can set options using base::options(), either start session within code:","code":"options(speed.swap_count = 5, speed.swap_all_blocks = TRUE)"},{"path":"https://biometryhub.github.io/speed/reference/speed-package.html","id":null,"dir":"Reference","previous_headings":"","what":"speed: Generate Spatially Efficient Experimental Designs — speed-package","title":"speed: Generate Spatially Efficient Experimental Designs — speed-package","text":"Speed package optimises spatial experimental designs rearranging treatments improve statistical efficiency maintaining statistical validity. employs customisable optimisation metrics, default approach balances minimising treatment adjacency maintaining spatial balance. Users can supply optimisation metrics tailor designs specific experimental requirements. package also includes visualisation tools allow users inspect optimised designs.","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/speed-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"speed: Generate Spatially Efficient Experimental Designs — speed-package","text":"Maintainer: Sam Rogers sam.rogers@adelaide.edu.au Authors: Julian Taylor julian.taylor@adelaide.edu.au Russell Edson russell.edson@adelaide.edu.au Wasin Pipattungsakul wasin.pipattungsakul@adelaide.edu.au contributors: University Adelaide (https://adelaide.edu.au/) [copyright holder, funder] Grains Research Development Corporation (https://grdc.com.au/) [copyright holder, funder]","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimise Experimental Design Layout Using Simulated Annealing — speed","title":"Optimise Experimental Design Layout Using Simulated Annealing — speed","text":"Optimises spatial layout experimental designs using simulated annealing minimise treatment adjacency maintain treatment balance across spatial factors. Works regular irregular spatial designs.","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimise Experimental Design Layout Using Simulated Annealing — speed","text":"","code":"speed(   data,   swap,   swap_within = \"1\",   spatial_factors = ~row + col,   iterations = 10000,   early_stop_iterations = 2000,   obj_function = objective_function,   quiet = FALSE,   seed = NULL,   ... )"},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimise Experimental Design Layout Using Simulated Annealing — speed","text":"data data frame containing experimental design spatial coordinates swap column name items swapped (e.g., treatment, variety, genotype, etc). hierarchical designs, provide named list name corresponds hierarchy level (e.g., list(wp = \"wholeplot_treatment\", sp = \"subplot_treatment\")). See details information. swap_within string specifying variable defines boundary within swap treatments. Specify \"1\" \"none\" boundary (default: \"1\"). examples might \"block\" \"replicate\" even \"site\". hierarchical designs, provide named list names matching swap optimise hierarchical design split-plot. See details information. spatial_factors one-sided formula specifying spatial factors consider balance (default: ~row + col). iterations Maximum number iterations simulated annealing algorithm (default: 10000). hierarchical designs, can named list names matching swap. early_stop_iterations Number iterations without improvement early stopping (default: 2000). hierarchical designs, can named list names matching swap. obj_function Objective function used calculate score (lower better) (default: objective_function()). hierarchical designs, can named list names matching swap. quiet Logical; TRUE, suppresses progress messages (default: FALSE) seed numeric value random seed. provided, ensures reproducibility results (default: NULL). ... arguments passed objective functions.","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimise Experimental Design Layout Using Simulated Annealing — speed","text":"list containing: design_df - Data frame optimised design score - Final optimisation score scores - Vector scores across iterations (simple designs) named list score vectors (hierarchical designs) temperatures - Vector temperatures across iterations iterations_run - Total number iterations performed stopped_early - Logical indicating optimisation stopped early (simple designs) named logical vector (hierarchical designs) treatments - Vector unique treatments (simple designs) named list treatment vectors (hierarchical designs) seed - Random seed used reproducibility design. set function, seed set third element .Random.seed.","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimise Experimental Design Layout Using Simulated Annealing — speed","text":"function provides general interface producing experimental designs different types. hierarchical designs split-plots, strip plots, split-split plots similar nested structures, key arguments (swap, swap_within, iterations, early_stop_iterations obj_function) can provided named lists name corresponds level hierarchy (e.g., \"wholeplot\", \"subplot\"). arguments provided named lists matching names, optimisation applied sequentially hierarchical level, starting first level progressing hierarchy. allows different optimisation parameters objective functions applied different levels design structure. simple (non-hierarchical) designs, arguments can provided single values. examples detailed usage, see package vignettes.","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimise Experimental Design Layout Using Simulated Annealing — speed","text":"","code":"# Create a simple design with 3 replicates of 4 treatments in a 4x3 layout df <- data.frame(   row = rep(1:4, times = 5),   col = rep(1:5, each = 4),   treatment = rep(LETTERS[1:4], 5) )  # Optimise the design result <- speed(df, swap = \"treatment\", seed = 42) #> Iteration: 1000 Score: 1 Best: 1 Since Improvement: 275  #> Iteration: 2000 Score: 1 Best: 1 Since Improvement: 1275  #> Early stopping at iteration 2725  autoplot(result)   # Hierarchical split-plot design df_split <- data.frame(   row = rep(1:12, each = 4),   col = rep(1:4, times = 12),   block = rep(1:4, each = 12),   wholeplot = rep(1:12, each = 4),   wholeplot_treatment = rep(rep(LETTERS[1:3], each = 4), times = 4),   subplot_treatment = rep(letters[1:4], 12) )  result <- speed(df_split,                 swap = list(wp = \"wholeplot_treatment\",                             sp = \"subplot_treatment\"),                 swap_within = list(wp = \"block\", sp = \"wholeplot\"),                 seed = 42) #> Optimising level: wp  #> Level: wp Iteration: 1000 Score: 100 Best: 100 Since Improvement: 1000  #> Level: wp Iteration: 2000 Score: 100 Best: 100 Since Improvement: 2000  #> Early stopping at iteration 2000 for level wp  #> Optimising level: sp  #> Early stopping at iteration 570 for level sp   # Plot wholeplot allocations within blocks autoplot(result, treatments = \"wholeplot_treatment\")  # Plot subplot allocations within wholeplots autoplot(result, treatments = \"subplot_treatment\", block = \"wholeplot\")"},{"path":"https://biometryhub.github.io/speed/reference/speed_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Speed function for hierarchical designs — speed_hierarchical","title":"Speed function for hierarchical designs — speed_hierarchical","text":"Speed function hierarchical designs","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Speed function for hierarchical designs — speed_hierarchical","text":"","code":"speed_hierarchical(   data,   swap,   swap_within,   spatial_factors,   iterations,   early_stop_iterations,   obj_function,   quiet,   seed,   ... )"},{"path":"https://biometryhub.github.io/speed/reference/speed_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Speed function for simple (non-hierarchical) designs — speed_simple","title":"Speed function for simple (non-hierarchical) designs — speed_simple","text":"Speed function simple (non-hierarchical) designs","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Speed function for simple (non-hierarchical) designs — speed_simple","text":"","code":"speed_simple(   data,   swap,   swap_within,   spatial_factors,   iterations,   early_stop_iterations,   obj_function,   quiet,   seed,   ... )"},{"path":"https://biometryhub.github.io/speed/reference/verify.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify Inputs for speed — .verify_speed_inputs","title":"Verify Inputs for speed — .verify_speed_inputs","text":"Verify inputs speed function.","code":""},{"path":"https://biometryhub.github.io/speed/reference/verify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify Inputs for speed — .verify_speed_inputs","text":"","code":".verify_speed_inputs(   data,   swap,   swap_within,   spatial_factors,   iterations,   early_stop_iterations,   quiet,   seed,   swap_count,   swap_all_blocks,   adaptive_swaps,   start_temp,   cooling_rate,   random_initialisation )  .verify_hierarchical_inputs(   data,   swap,   swap_within,   spatial_factors,   iterations,   early_stop_iterations,   obj_function,   quiet,   seed )"},{"path":"https://biometryhub.github.io/speed/reference/verify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify Inputs for speed — .verify_speed_inputs","text":"data data frame containing experimental design spatial coordinates swap column name items swapped (e.g., treatment, variety, genotype, etc). hierarchical designs, provide named list name corresponds hierarchy level (e.g., list(wp = \"wholeplot_treatment\", sp = \"subplot_treatment\")). See details information. swap_within string specifying variable defines boundary within swap treatments. Specify \"1\" \"none\" boundary (default: \"1\"). examples might \"block\" \"replicate\" even \"site\". hierarchical designs, provide named list names matching swap optimise hierarchical design split-plot. See details information. spatial_factors one-sided formula specifying spatial factors consider balance (default: ~row + col). iterations Maximum number iterations simulated annealing algorithm (default: 10000). hierarchical designs, can named list names matching swap. early_stop_iterations Number iterations without improvement early stopping (default: 2000). hierarchical designs, can named list names matching swap. quiet Logical; TRUE, suppresses progress messages (default: FALSE) seed numeric value random seed. provided, ensures reproducibility results (default: NULL). swap_count Number item swaps per iteration (default: 1) swap_all_blocks Logical; TRUE, performs swaps blocks iteration (default: FALSE) adaptive_swaps Logical; TRUE, adjusts swap parameters based temperature (default: FALSE) start_temp Starting temperature simulated annealing (default: 100) cooling_rate Rate temperature decreases (default: 0.99) random_initialisation Logical; TRUE, randomly shuffle items within swap_within (default: FALSE) obj_function Objective function used calculate score (lower better) (default: objective_function()). hierarchical designs, can named list names matching swap.","code":""}]
