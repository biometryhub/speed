[{"path":"https://biometryhub.github.io/speed/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 University Adelaide Biometry Hub Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://biometryhub.github.io/speed/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam Rogers. Author, maintainer. Julian Taylor. Author. Russell Edson. Author. Wasin Pipattungsakul. Author. University Adelaide. Copyright holder, funder.           https://adelaide.edu.au/ Grains Research Development Corporation. Copyright holder, funder.           https://grdc.com.au/","code":""},{"path":"https://biometryhub.github.io/speed/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rogers S, Taylor J, Edson R, Pipattungsakul W (2025). speed: Generate Spatially Efficient Experimental Designs. R package version 0.0.1, https://biometryhub.github.io/speed/.","code":"@Manual{,   title = {speed: Generate Spatially Efficient Experimental Designs},   author = {Sam Rogers and Julian Taylor and Russell Edson and Wasin Pipattungsakul},   year = {2025},   note = {R package version 0.0.1},   url = {https://biometryhub.github.io/speed/}, }"},{"path":[]},{"path":"https://biometryhub.github.io/speed/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Generate Spatially Efficient Experimental Designs","text":"speed package optimizes spatial experimental designs rearranging treatments improve statistical efficiency maintaining statistical validity. uses simulated annealing : Minimize treatment adjacency (reducing neighbor effects) Maintain spatial balance across rows columns Respect blocking constraints specified Provide visualization tools design evaluation","code":""},{"path":"https://biometryhub.github.io/speed/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Spatially Efficient Experimental Designs","text":"can install development version speed GitHub :","code":"# install.packages(\"pak\") pak::pak(\"biometryhub/speed\")"},{"path":"https://biometryhub.github.io/speed/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Generate Spatially Efficient Experimental Designs","text":"Flexible optimization experimental designs Support blocked designs Customizable optimization parameters Built-visualization functions Progress tracking optimization Early stopping convergence reached See package documentation detailed examples options.","code":""},{"path":"https://biometryhub.github.io/speed/index.html","id":"basic-example","dir":"","previous_headings":"","what":"Basic Example","title":"Generate Spatially Efficient Experimental Designs","text":"simple example optimizing 4×3 completely randomised design 4 treatments:","code":"library(speed)  # Create a simple design with 3 replicates of 4 treatments df <- data.frame(   row = rep(1:4, each = 3),   col = rep(1:3, times = 4),   treatment = rep(LETTERS[1:4], 3) )  # Set seed for reproducibility set.seed(42)  # Optimize the design result <- speed(df, \"treatment\") #> Iteration: 1000 Score: 1 Best: 1 Since Improvement: 734  #> Iteration: 2000 Score: 1 Best: 1 Since Improvement: 1734  #> Early stopping at iteration 2266  # Plot the optimized design autoplot(result) # View optimization progress plot_progress(result)"},{"path":"https://biometryhub.github.io/speed/index.html","id":"blocked-design","dir":"","previous_headings":"","what":"Blocked design","title":"Generate Spatially Efficient Experimental Designs","text":"can also optimize designs within blocks:","code":"# Create a design with blocks df <- data.frame(   row = rep(1:6, each = 4),   col = rep(1:4, times = 6),   treatment = rep(LETTERS[1:8], 3),   block = rep(1:3, each = 8) )  # Set seed for reproducibility set.seed(42)  # Optimize while respecting blocks result <- speed(df,                  \"treatment\",                 swap_within = \"block\",                 iterations = 5000) #> Iteration: 1000 Score: 2.571429 Best: 2.571429 Since Improvement: 352  #> Iteration: 2000 Score: 2.571429 Best: 2.571429 Since Improvement: 1352  #> Early stopping at iteration 2648  # Plot the design with block boundaries autoplot(result)"},{"path":"https://biometryhub.github.io/speed/reference/autoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate plots for designs generated in speed — autoplot","title":"Generate plots for designs generated in speed — autoplot","text":"Generate plots designs generated speed","code":""},{"path":"https://biometryhub.github.io/speed/reference/autoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate plots for designs generated in speed — autoplot","text":"","code":"autoplot(object, ...)  # S3 method for class 'design' autoplot(   object,   rotation = 0,   size = 4,   margin = FALSE,   palette = \"default\",   buffer = NULL,   row = NULL,   column = NULL,   block = NULL,   treatments = NULL,   ... )"},{"path":"https://biometryhub.github.io/speed/reference/autoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate plots for designs generated in speed — autoplot","text":"object experimental design object generated speed(). ... Arguments passed methods. rotation Rotate x axis labels treatment group labels within plot. Allows easier reading long axis treatment labels. Number 0 360 (inclusive) - default 0 size Increase decrease text size within plot treatment labels. Numeric default value 4. margin Logical (default FALSE). value FALSE expand plot edges plotting area .e. remove white space plot axes. palette string specifying colour scheme use plotting vector custom colours use palette. Default equivalent \"Spectral\". Colour blind friendly palettes can also provided via options \"colour blind\" (\"color blind\", equivalent \"viridis\"), \"magma\", \"inferno\", \"plasma\", \"cividis\", \"rocket\", \"mako\" \"turbo\". palettes scales::brewer_pal() also possible. buffer string specifying buffer plots include plotting. Default NULL (buffers plotted). options \"edge\" (outer edge trial area), \"rows\" (rows), \"columns\" (columns), \"double row\" (buffer row side treatment row) \"double column\" (buffer row side treatment column). \"blocks\" (buffer around treatment block) implemented future release. row variable plot column object rows. column variable plot column object columns. block variable plot column object blocks. treatments variable plot column object treatments.","code":""},{"path":"https://biometryhub.github.io/speed/reference/autoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate plots for designs generated in speed — autoplot","text":"ggplot2 object.","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/autoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate plots for designs generated in speed — autoplot","text":"","code":"# Create a design with blocks df <- data.frame(      row = rep(1:6, each = 4),      col = rep(1:4, times = 6),      treatment = rep(LETTERS[1:8], 3),      block = rep(1:3, each = 8))  # Set seed for reproducibility set.seed(42)  # Optimize while respecting blocks result <- speed(df,                 \"treatment\",                 swap_within = \"block\",                 iterations = 5000) #> Iteration: 1000 Score: 2.571429 Best: 2.571429 Since Improvement: 352  #> Iteration: 2000 Score: 2.571429 Best: 2.571429 Since Improvement: 1352  #> Early stopping at iteration 2648   # Plot the design with block boundaries autoplot(result)   # Colour blind friendly colours autoplot(result, palette = \"colour-blind\")   # Alternative colour scheme autoplot(result, palette = \"plasma\")   df <- data.frame(       row = rep(1:4, each = 3),       col = rep(1:3, times = 4),       treatment = rep(LETTERS[1:4], 3))  # Set seed for reproducibility set.seed(42)  # Optimize while respecting blocks result <- speed(df,                 \"treatment\",                 iterations = 5000) #> Iteration: 1000 Score: 1 Best: 1 Since Improvement: 734  #> Iteration: 2000 Score: 1 Best: 1 Since Improvement: 1734  #> Early stopping at iteration 2266   # Custom colour palette autoplot(result, palette = c(\"#ef746a\", \"#3fbfc5\", \"#81ae00\", \"#c37cff\"))"},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Adjacency Score for Experimental Design — calculate_adjacency_score","title":"Calculate Adjacency Score for Experimental Design — calculate_adjacency_score","text":"Calculates number adjacent treatments experimental design layout. Lower scores indicate better separation treatments.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Adjacency Score for Experimental Design — calculate_adjacency_score","text":"","code":"calculate_adjacency_score(design)"},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Adjacency Score for Experimental Design — calculate_adjacency_score","text":"design matrix containing experimental design layout treatments","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Adjacency Score for Experimental Design — calculate_adjacency_score","text":"Numeric value representing total number adjacent treatments. score sum treatments adjacent horizontally vertically.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_adjacency_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Adjacency Score for Experimental Design — calculate_adjacency_score","text":"","code":"design <- matrix(   c(     \"A\", \"B\", \"A\",     \"B\", \"A\", \"B\",     \"A\", \"B\", \"A\"   ),   nrow = 3, byrow = TRUE ) calculate_adjacency_score(design) # Returns the number of adjacent matches #> [1] 0"},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Balance Score for Experimental Design — calculate_balance_score","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"Calculates balance score measures evenly treatments distributed across spatial factors experimental design. Lower scores indicate better balance.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"","code":"calculate_balance_score(layout_df, swap, spatial_cols)"},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"layout_df data frame representing spatial information design swap column name treatment spatial_cols Column names spatial factors","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"Numeric value representing total balance score. Lower values indicate better balance treatments across spatial factors.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_balance_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Balance Score for Experimental Design — calculate_balance_score","text":"","code":"layout_df <- data.frame(   row = rep(1:3, each = 3),   col = rep(1:3, times = 3),   treatment = rep(letters[1:3], 3) ) calculate_balance_score(layout_df, \"treatment\", c(\"row\", \"col\")) #> [1] 9"},{"path":"https://biometryhub.github.io/speed/reference/calculate_ed.html","id":null,"dir":"Reference","previous_headings":"","what":"Even Distribution Calculation — calculate_ed","title":"Even Distribution Calculation — calculate_ed","text":"metric represents even distribution item minimum spanning tree (mst).","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_ed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Even Distribution Calculation — calculate_ed","text":"","code":"calculate_ed(design_matrix)"},{"path":"https://biometryhub.github.io/speed/reference/calculate_ed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Even Distribution Calculation — calculate_ed","text":"design_matrix design matrix","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_ed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Even Distribution Calculation — calculate_ed","text":"Named list containing: - Named list containing: msts - Named list pairs items mst min_mst - lowest mst min_pairs - Pairs items lowest mst","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_ed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Even Distribution Calculation — calculate_ed","text":"","code":"design_matrix <- matrix(c(1, 2, 2, 1, 3, 3, 1, 3, 3), nrow = 3, ncol = 3) calculate_ed(design_matrix) #> $`2` #> $`2`$msts #> $`2`$msts$`2` #> [1] 1 #>  #>  #> $`2`$min_mst #> [1] 1 #>  #> $`2`$min_pairs #> [1] \"2\" #>  #>  #> $`4` #> $`4`$msts #> $`4`$msts$`3` #> [1] 3 #>  #>  #> $`4`$min_mst #> [1] 3 #>  #> $`4`$min_pairs #> [1] \"3\" #>  #>  #> $`3` #> $`3`$msts #> $`3`$msts$`1` #> [1] 2 #>  #>  #> $`3`$min_mst #> [1] 2 #>  #> $`3`$min_pairs #> [1] \"1\" #>  #>"},{"path":"https://biometryhub.github.io/speed/reference/calculate_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighbor Balance Calculation — calculate_nb","title":"Neighbor Balance Calculation — calculate_nb","text":"metric counts occurrence adjacent pairs. horizontal vertical pairs counted.","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighbor Balance Calculation — calculate_nb","text":"","code":"calculate_nb(design_matrix)"},{"path":"https://biometryhub.github.io/speed/reference/calculate_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighbor Balance Calculation — calculate_nb","text":"design_matrix design matrix","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neighbor Balance Calculation — calculate_nb","text":"Named list containing: nb - Named list pairs items number occurrence max_nb - highest number occurrence max_pairs - Vector pairs items highest number occurrence","code":""},{"path":"https://biometryhub.github.io/speed/reference/calculate_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Neighbor Balance Calculation — calculate_nb","text":"","code":"design_matrix <- matrix(c(1, 2, 2, 1, 3, 3, 1, 3, 3), nrow = 3, ncol = 3) calculate_nb(design_matrix) #> $nb #> $nb$`3,3` #> [1] 4 #>  #> $nb$`2,2` #> [1] 1 #>  #> $nb$`2,3` #> [1] 2 #>  #> $nb$`1,1` #> [1] 2 #>  #> $nb$`1,2` #> [1] 1 #>  #> $nb$`1,3` #> [1] 2 #>  #>  #> $max_nb #> [1] 4 #>  #> $max_pairs #> [1] \"3,3\" #>"},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_ed_3_reps.html","id":null,"dir":"Reference","previous_headings":"","what":"Even Distribution Calculation for 3 Replications — .calculate_ed_3_reps","title":"Even Distribution Calculation for 3 Replications — .calculate_ed_3_reps","text":"metric represents even distribution items 3 replications minimum spanning tree (mst).","code":""},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_ed_3_reps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Even Distribution Calculation for 3 Replications — .calculate_ed_3_reps","text":"","code":".calculate_ed_3_reps(edges)"},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_ed_3_reps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Even Distribution Calculation for 3 Replications — .calculate_ed_3_reps","text":"edges list lists edges","code":""},{"path":"https://biometryhub.github.io/speed/reference/dot-calculate_ed_3_reps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Even Distribution Calculation for 3 Replications — .calculate_ed_3_reps","text":"Named list containing: msts - Named list pairs items mst min_mst - lowest mst min_pairs - Pairs items lowest mst","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/dot-verify_speed_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify Inputs for speed — .verify_speed_inputs","title":"Verify Inputs for speed — .verify_speed_inputs","text":"Verify inputs speed function.","code":""},{"path":"https://biometryhub.github.io/speed/reference/dot-verify_speed_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify Inputs for speed — .verify_speed_inputs","text":"","code":".verify_speed_inputs(   data,   swap,   swap_within,   spatial_factors,   iterations,   early_stop_iterations,   quiet,   seed,   swap_count,   swap_all_blocks,   adaptive_swaps,   start_temp,   cooling_rate )"},{"path":"https://biometryhub.github.io/speed/reference/dot-verify_speed_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify Inputs for speed — .verify_speed_inputs","text":"data data frame containing initial design layout row col coordinates swap column name item swapped (e.g., treatment) swap_within string specifying blocking variable boundary within swap items. Specify \"1\" \"none\" boundary (default: \"1\") spatial_factors one-sided formula specifying spatial factors consider balance (default: ~row + col) iterations Maximum number iterations simulated annealing algorithm (default: 10000) early_stop_iterations Number iterations without improvement early stopping (default: 2000) quiet Logical; TRUE, suppresses progress messages (default: FALSE) seed numeric value random seed. provided, ensures reproducibility results (default: NULL). swap_count Number item swaps per iteration (default: 1) swap_all_blocks Logical; TRUE, performs swaps blocks iteration (default: FALSE) adaptive_swaps Logical; TRUE, adjusts swap parameters based temperature (default: FALSE) start_temp Starting temperature simulated annealing (default: 100) cooling_rate Rate temperature decreases (default: 0.99)","code":""},{"path":"https://biometryhub.github.io/speed/reference/env_add_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Add One to Environment — env_add_one","title":"Add One to Environment — env_add_one","text":"Add one value key environment exists, otherwise set one key.","code":""},{"path":"https://biometryhub.github.io/speed/reference/env_add_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add One to Environment — env_add_one","text":"","code":"env_add_one(env, key)"},{"path":"https://biometryhub.github.io/speed/reference/env_add_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add One to Environment — env_add_one","text":"env environment key key environment","code":""},{"path":"https://biometryhub.github.io/speed/reference/generate_neighbor.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Neighbor Design — generate_neighbor","title":"Generate Neighbor Design — generate_neighbor","text":"Generates neighbor design based current design swap parameters.","code":""},{"path":"https://biometryhub.github.io/speed/reference/generate_neighbor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Neighbor Design — generate_neighbor","text":"","code":"generate_neighbor(design_matrix, swap_matrix, swap_count, swap_all_blocks)"},{"path":"https://biometryhub.github.io/speed/reference/generate_neighbor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Neighbor Design — generate_neighbor","text":"design_matrix design matrix swap_matrix matrix constrains swap boundaries swap_count Number treatment swaps per iteration swap_all_blocks Logical; TRUE, performs swaps blocks iteration","code":""},{"path":"https://biometryhub.github.io/speed/reference/get_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Weighted Edges — get_edges","title":"Get Weighted Edges — get_edges","text":"Calculate weight edges vertices.","code":""},{"path":"https://biometryhub.github.io/speed/reference/get_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Weighted Edges — get_edges","text":"","code":"get_edges(vertices)"},{"path":"https://biometryhub.github.io/speed/reference/get_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Weighted Edges — get_edges","text":"vertices Named list vertices containing: - list (vertex 1, vertex 2, ...)","code":""},{"path":"https://biometryhub.github.io/speed/reference/get_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Weighted Edges — get_edges","text":"Named list containing: - list (vertex 1, vertex 2, weight)","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/get_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Weighted Edges — get_edges","text":"","code":"design_matrix <- matrix(c(1, 2, 2, 1, 3, 2, 1, 3, 3), nrow = 3, ncol = 3) vertices <- get_vertices(design_matrix) edges <- get_edges(vertices)"},{"path":"https://biometryhub.github.io/speed/reference/get_vertices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Weighted Edges — get_vertices","title":"Get Weighted Edges — get_vertices","text":"Calculate weight edges vertices.","code":""},{"path":"https://biometryhub.github.io/speed/reference/get_vertices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Weighted Edges — get_vertices","text":"","code":"get_vertices(design_matrix)"},{"path":"https://biometryhub.github.io/speed/reference/get_vertices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Weighted Edges — get_vertices","text":"design_matrix design matrix","code":""},{"path":"https://biometryhub.github.io/speed/reference/get_vertices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Weighted Edges — get_vertices","text":"Named list containing: - list (vertex 1, vertex 2, ...)","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/get_vertices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Weighted Edges — get_vertices","text":"","code":"design_matrix <- matrix(c(1, 2, 2, 1, 3, 2, 1, 3, 3), nrow = 3, ncol = 3) vertices <- get_vertices(design_matrix)"},{"path":"https://biometryhub.github.io/speed/reference/initialize_design_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Design Matrix — initialize_design_matrix","title":"Initialize Design Matrix — initialize_design_matrix","text":"Initialize design matrix based treatment matrix swap matrix.","code":""},{"path":"https://biometryhub.github.io/speed/reference/initialize_design_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Design Matrix — initialize_design_matrix","text":"","code":"initialize_design_matrix(treatment_matrix, swap_matrix)"},{"path":"https://biometryhub.github.io/speed/reference/initialize_design_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Design Matrix — initialize_design_matrix","text":"treatment_matrix matrix treatments swap_matrix matrix constrains swap boundaries","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Objective Function — objective_function","title":"Default Objective Function — objective_function","text":"default objective function combines adjacency balance scores.","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Objective Function — objective_function","text":"","code":"objective_function(   adj_weight = getOption(\"speed.adj_weight\", 1),   bal_weight = getOption(\"speed.bal_weight\", 1) )"},{"path":"https://biometryhub.github.io/speed/reference/objective_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Objective Function — objective_function","text":"adj_weight Weight adjacency score (default: 1) bal_weight Weight balance score (default: 1)","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Objective Function — objective_function","text":"function returns numeric value representing score design (lower better) signature function(design_matrix, layout_df, swap, spatial_cols). See signature details objective_function_signature.","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default Objective Function — objective_function","text":"","code":"design_matrix <- matrix(c(1, 2, 2, 1, 3, 3, 1, 3, 3), nrow = 3, ncol = 3) layout_df <- data.frame(   row = rep(1:3, each = 3),   col = rep(1:3, times = 3) ) objective_function()(design_matrix, layout_df, \"treatment\", c(\"row\", \"col\")) #> [1] 15  # create an objective function including even distribution and neighbor # balance introduced by Piepho 2018 objective_function_piepho <- function(design_matrix, layout_df, swap, spatial_cols) {   ed <- calculate_ed(design_matrix)   ed_score <- -sum(unlist(lapply(ed, function(ed_rep) ed_rep$min_mst)))   nb_score <- calculate_nb(design_matrix)$max_nb    adj_bal_score <- objective_function()(design_matrix, layout_df, swap, spatial_cols)    return(nb_score + ed_score + adj_bal_score) } objective_function_piepho(design_matrix, layout_df, \"treatment\", c(\"row\", \"col\")) #> [1] 13 # usage in speed, speed(..., obj_function = objective_function_piepho)"},{"path":"https://biometryhub.github.io/speed/reference/objective_function_signature.html","id":null,"dir":"Reference","previous_headings":"","what":"Objective Function Signature — objective_function_signature","title":"Objective Function Signature — objective_function_signature","text":"signature objective function","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_function_signature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective Function Signature — objective_function_signature","text":"","code":"objective_function_signature(design_matrix, layout_df, swap, spatial_cols)"},{"path":"https://biometryhub.github.io/speed/reference/objective_function_signature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective Function Signature — objective_function_signature","text":"design_matrix design matrix layout_df data frame representing spatial information design swap column name treatment spatial_cols Column names spatial factors","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_function_signature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Objective Function Signature — objective_function_signature","text":"function returns numeric value representing score design (lower better)","code":""},{"path":"https://biometryhub.github.io/speed/reference/objective_function_signature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Objective Function Signature — objective_function_signature","text":"","code":"design_matrix <- matrix(c(1, 2, 2, 1, 3, 3, 1, 3, 3), nrow = 3, ncol = 3) layout_df <- data.frame(   row = rep(1:3, each = 3),   col = rep(1:3, times = 3) ) objective_function()(design_matrix, layout_df, \"treatment\", c(\"row\", \"col\")) #> [1] 15"},{"path":"https://biometryhub.github.io/speed/reference/plot_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Experimental Design — plot_design","title":"Plot Experimental Design — plot_design","text":"Creates visual representation experimental design layout, options highlight blocks customize appearance.","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Experimental Design — plot_design","text":"","code":"plot_design(   design_result,   treatment_var = NULL,   block_var = NULL,   title = \"Experimental Design\",   row_var = \"row\",   col_var = \"col\" )"},{"path":"https://biometryhub.github.io/speed/reference/plot_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Experimental Design — plot_design","text":"design_result Either result speed() function design matrix treatment_var name treatment variable (required design_result dataframe) block_var Optional name blocking variable highlight boundaries title Plot title (default: \"Experimental Design\") row_var Name row coordinate variable (default: \"row\") col_var Name column coordinate variable (default: \"col\")","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Experimental Design — plot_design","text":"ggplot object displaying experimental design","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Experimental Design — plot_design","text":"","code":"# Create a simple design df <- data.frame(   row = rep(1:4, each = 3),   col = rep(1:3, times = 4),   treatment = rep(LETTERS[1:4], 3) )  # Optimize the design result <- speed(df, \"treatment\", seed = 42) #> Iteration: 1000 Score: 1 Best: 1 Since Improvement: 220  #> Iteration: 2000 Score: 1 Best: 1 Since Improvement: 1220  #> Early stopping at iteration 2780   # Plot the optimized design plot_design(result)   # Plot with custom treatment variable name plot_design(result$design_df, treatment_var = \"treatment\")"},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Optimization Progress — plot_progress","title":"Plot Optimization Progress — plot_progress","text":"Creates two plots showing progression optimization: Objective score iterations Temperature decay iterations","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Optimization Progress — plot_progress","text":"","code":"plot_progress(result)"},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Optimization Progress — plot_progress","text":"result list containing optimization results following elements: scores - Numeric vector objective scores iteration temperatures - Numeric vector temperatures iteration","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Optimization Progress — plot_progress","text":"return value; prints two ggplot objects showing: Progress objective score Cooling schedule (temperature decay)","code":""},{"path":"https://biometryhub.github.io/speed/reference/plot_progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Optimization Progress — plot_progress","text":"","code":"# Create a simple design df <- data.frame(   row = rep(1:3, each = 3),   col = rep(1:3, times = 3),   treatment = rep(LETTERS[1:3], 3) )  # Optimize the design result <- speed(df, \"treatment\") #> Iteration: 1000 Score: 0 Best: 0 Since Improvement: 953  #> Iteration: 2000 Score: 0 Best: 0 Since Improvement: 1953  #> Early stopping at iteration 2047   # Plot optimization progress plot_progress(result)"},{"path":"https://biometryhub.github.io/speed/reference/speed-options.html","id":null,"dir":"Reference","previous_headings":"","what":"Package Options for speed — speed-options","title":"Package Options for speed — speed-options","text":"page describes options can set control behaviour speed package, especially technical options speed() function controlling behaviour optimisation algorithm.","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed-options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Package Options for speed — speed-options","text":"speed.swap_count Number treatment swaps per iteration (default: 1). speed.swap_all_blocks Logical; TRUE, performs swaps blocks iteration (default: FALSE). speed.adaptive_swaps Logical; TRUE, adjusts swap parameters based temperature (default: FALSE). speed.start_temp Starting temperature simulated annealing (default: 100). speed.cooling_rate Rate temperature decreases simulated annealing (default: 0.99).","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed-options.html","id":"setting-options","dir":"Reference","previous_headings":"","what":"Setting options","title":"Package Options for speed — speed-options","text":"can set options using base::options(), either start session within code:","code":"options(speed.swap_count = 5, speed.swap_all_blocks = TRUE)"},{"path":"https://biometryhub.github.io/speed/reference/speed-package.html","id":null,"dir":"Reference","previous_headings":"","what":"speed: Generate Spatially Efficient Experimental Designs — speed-package","title":"speed: Generate Spatially Efficient Experimental Designs — speed-package","text":"Speed package optimizes spatial experimental designs rearranging treatments improve statistical efficiency maintaining statistical validity. employs customisable optimisation metrics, default approach balances minimising treatment adjacency maintaining spatial balance. Users can supply optimisation metrics tailor designs specific experimental requirements. package also includes visualisation tools allow researchers inspect optimised designs.","code":""},{"path":[]},{"path":"https://biometryhub.github.io/speed/reference/speed-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"speed: Generate Spatially Efficient Experimental Designs — speed-package","text":"Maintainer: Sam Rogers sam.rogers@adelaide.edu.au Authors: Julian Taylor julian.taylor@adelaide.edu.au Russell Edson russell.edson@adelaide.edu.au Wasin Pipattungsakul wasin.pipattungsakul@adelaide.edu.au contributors: University Adelaide (https://adelaide.edu.au/) [copyright holder, funder] Grains Research Development Corporation (https://grdc.com.au/) [copyright holder, funder]","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize Experimental Design Layout Using Simulated Annealing — speed","title":"Optimize Experimental Design Layout Using Simulated Annealing — speed","text":"Optimizes spatial layout experimental designs using simulated annealing minimize treatment adjacency maintain treatment balance across spatial factors.","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize Experimental Design Layout Using Simulated Annealing — speed","text":"","code":"speed(   data,   swap,   swap_within = \"1\",   spatial_factors = ~row + col,   iterations = 10000,   early_stop_iterations = 2000,   obj_function = objective_function(),   quiet = FALSE,   seed = NULL )"},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize Experimental Design Layout Using Simulated Annealing — speed","text":"data data frame containing initial design layout row col coordinates swap column name item swapped (e.g., treatment) swap_within string specifying blocking variable boundary within swap items. Specify \"1\" \"none\" boundary (default: \"1\") spatial_factors one-sided formula specifying spatial factors consider balance (default: ~row + col) iterations Maximum number iterations simulated annealing algorithm (default: 10000) early_stop_iterations Number iterations without improvement early stopping (default: 2000) obj_function Objective function used calculate score (lower better) (default: objective_function) quiet Logical; TRUE, suppresses progress messages (default: FALSE) seed numeric value random seed. provided, ensures reproducibility results (default: NULL).","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize Experimental Design Layout Using Simulated Annealing — speed","text":"list containing: design - Matrix optimized treatment layout design_df - Data frame optimized design score - Final optimization score adjacency_score - Score treatment adjacencies balance_score - Score spatial balance scores - Vector scores across iterations temperatures - Vector temperatures across iterations iterations_run - Total number iterations performed stopped_early - Logical indicating optimization stopped early treatments - Vector unique treatments seed - Random seed used reproducibility design. set function, seed set second element .Random.seed.","code":""},{"path":"https://biometryhub.github.io/speed/reference/speed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize Experimental Design Layout Using Simulated Annealing — speed","text":"","code":"# Create a simple design with 3 replicates of 4 treatments in a 4x3 layout df <- data.frame(   row = rep(1:4, each = 3),   col = rep(1:3, times = 4),   treatment = rep(LETTERS[1:4], 3) )  # Optimize the design result <- speed(df, swap = \"treatment\") #> Iteration: 1000 Score: 2.333333 Best: 2.333333 Since Improvement: 694  #> Iteration: 2000 Score: 2.333333 Best: 2.333333 Since Improvement: 1694  #> Early stopping at iteration 2306"}]
